// Contract Signing Timeout Fix
// This restructures the email processing to prevent browser timeouts

// STEP 1: Move response before email processing
// STEP 2: Use setImmediate for background email processing 
// STEP 3: Add proper error handling for background process

// Replace the email processing section starting after contract signing
// with this optimized version:

// Send immediate response to prevent timeout
res.json({ 
  message: "Contract signed successfully",
  contract: signedContract 
});

// Process emails in background without blocking response
setImmediate(async () => {
  try {
    console.log('=== STARTING BACKGROUND EMAIL PROCESS ===');
    
    const userSettings = await storage.getUserSettings(contract.userId);
    const { sendEmail } = await import('./sendgrid');
    const { generateContractPDF } = await import('./pdf-generator');
    
    const userBusinessEmail = userSettings?.businessEmail;
    const fromName = userSettings?.emailFromName || userSettings?.businessName || 'MusoBuddy';
    const fromEmail = 'noreply@musobuddy.com';
    const replyToEmail = userBusinessEmail && !userBusinessEmail.includes('@musobuddy.com') ? userBusinessEmail : null;
    
    console.log('Background email process - Client email:', contract.clientEmail);
    console.log('Background email process - Performer email:', userBusinessEmail);
    
    // Generate PDF with signature details
    const signatureDetails = {
      signedAt: new Date(),
      signatureName: signatureName.trim(),
      clientIpAddress: clientIP
    };
    
    const pdfBuffer = await generateContractPDF(signedContract, userSettings || null, signatureDetails);
    const pdfBase64 = pdfBuffer.toString('base64');
    console.log('Background PDF generated, size:', pdfBuffer.length);
    
    // Send to client
    if (contract.clientEmail) {
      const clientEmailParams = {
        to: contract.clientEmail,
        from: `${fromName} <${fromEmail}>`,
        subject: `Contract ${contract.contractNumber} Successfully Signed - Copy Attached`,
        html: `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <h2 style="color: #4CAF50;">Contract Signed Successfully âœ“</h2>
            <p>Dear ${contract.clientName},</p>
            <p>Your performance contract <strong>${contract.contractNumber}</strong> has been successfully signed.</p>
            <p>ðŸ“Ž <strong>Your signed contract is attached as a PDF for your records.</strong></p>
            <p>We look forward to performing at your event!</p>
            <p>Best regards,<br><strong>${userSettings?.businessName || 'MusoBuddy'}</strong></p>
          </div>
        `,
        text: `Contract ${contract.contractNumber} has been successfully signed. PDF attached.`,
        attachments: [{
          content: pdfBase64,
          filename: `Contract-${contract.contractNumber}-Signed.pdf`,
          type: 'application/pdf',
          disposition: 'attachment'
        }],
        ...(replyToEmail && { replyTo: replyToEmail })
      };
      
      await sendEmail(clientEmailParams);
      console.log('Background: Client email sent');
    }
    
    // Send to performer
    if (userSettings?.businessEmail) {
      const performerEmailParams = {
        to: userSettings.businessEmail,
        from: `${fromName} <${fromEmail}>`,
        subject: `Contract ${contract.contractNumber} Signed by ${contract.clientName}`,
        html: `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <h2 style="color: #4CAF50;">Contract Signed Successfully! âœ“</h2>
            <p>Great news! Your contract has been signed by ${contract.clientName}.</p>
            <p>ðŸ“Ž <strong>Signed contract PDF is attached for your records.</strong></p>
            <p>Time to prepare for the performance!</p>
          </div>
        `,
        text: `Contract ${contract.contractNumber} signed by ${contract.clientName}. PDF attached.`,
        attachments: [{
          content: pdfBase64,
          filename: `Contract-${contract.contractNumber}-Signed.pdf`,
          type: 'application/pdf',
          disposition: 'attachment'
        }]
      };
      
      await sendEmail(performerEmailParams);
      console.log('Background: Performer email sent');
    }
    
    console.log('=== BACKGROUND EMAIL PROCESS COMPLETED ===');
    
  } catch (error) {
    console.error('Error in background email processing:', error);
  }
});