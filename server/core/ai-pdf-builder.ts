import OpenAI from 'openai';
import puppeteer from 'puppeteer';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

interface PDFData {
  type: 'contract' | 'invoice';
  client: string;
  eventDate?: string;
  venue?: string;
  fee: string;
  sections: Array<{
    title: string;
    content: string;
  }>;
  branding?: {
    logoUrl?: string;
    footerText?: string;
    businessName?: string;
  };
}

export async function generateAIPDF(data: PDFData): Promise<Buffer> {
  console.log(`ü§ñ Generating AI-driven ${data.type} PDF for:`, data.client);
  
  // Prepare the prompt for OpenAI
  const systemPrompt = `You are an expert layout formatter specializing in professional business documents. Format this ${data.type} into clean, professional HTML suitable for printing to PDF with Puppeteer.

CRITICAL REQUIREMENTS:
1. Use CSS to ensure good page breaks - add class="page-break" before each major section
2. Use class="avoid-break" for content that should stay together
3. Keep signature sections and legal information grouped together
4. Use professional styling with clean typography
5. Include proper margins and spacing for print
6. Return ONLY the complete HTML document (including <html>, <head>, <body> tags)

CSS CLASSES TO USE:
- page-break: Forces a new page
- avoid-break: Prevents breaking within this element
- keep-together: Prevents breaking before or after

The output should be print-ready and professional.`;

  const userPrompt = `Generate a professional ${data.type} HTML document with this data:

Client: ${data.client}
${data.eventDate ? `Event Date: ${data.eventDate}` : ''}
${data.venue ? `Venue: ${data.venue}` : ''}
Fee: ${data.fee}
Business: ${data.branding?.businessName || 'MusoBuddy'}

Sections:
${data.sections.map(section => `${section.title}: ${section.content}`).join('\n')}

${data.branding?.footerText ? `Footer: ${data.branding.footerText}` : ''}

Format this as a complete, professional HTML document ready for PDF generation.`;

  try {
    // Get AI-generated HTML
    const completion = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [
        { role: "system", content: systemPrompt },
        { role: "user", content: userPrompt }
      ],
      max_tokens: 4000,
      temperature: 0.3, // Low temperature for consistent formatting
    });

    const htmlContent = completion.choices[0]?.message?.content;
    if (!htmlContent) {
      throw new Error('No HTML content generated by AI');
    }

    console.log('ü§ñ AI generated HTML successfully, length:', htmlContent.length);

    // Generate PDF with Puppeteer
    const browser = await puppeteer.launch({
      headless: true,
      executablePath: '/nix/store/zi4f80l169xlmivz8vja8wlphq74qqk0-chromium-125.0.6422.141/bin/chromium',
      args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage']
    });

    try {
      const page = await browser.newPage();
      
      // Enable print media emulation
      await page.emulateMediaType('print');
      
      // Set the AI-generated HTML content
      await page.setContent(htmlContent, { waitUntil: 'domcontentloaded' });
      
      // Generate PDF with optimized settings
      const pdf = await page.pdf({
        format: 'A4',
        printBackground: true,
        margin: {
          top: '1cm',
          bottom: '2cm',
          left: '1.5cm',
          right: '1.5cm'
        },
        displayHeaderFooter: true,
        footerTemplate: `
          <div style="font-size:10px; width:100%; text-align:center; color:#666;">
            Page <span class="pageNumber"></span> of <span class="totalPages"></span>
          </div>`
      });

      console.log('üìÑ AI PDF generated successfully:', pdf.length, 'bytes');
      return Buffer.from(pdf);
      
    } finally {
      await browser.close();
    }
    
  } catch (error) {
    console.error('‚ùå AI PDF generation failed:', error);
    throw new Error(`AI PDF generation failed: ${error.message}`);
  }
}

// Helper function to convert contract data to AI format
export function contractToAIFormat(contract: any, userSettings: any): PDFData {
  const sections = [
    {
      title: "Performer Details",
      content: `${userSettings?.businessName || 'MusoBuddy'}\n${getUserAddress(userSettings)}\nPhone: ${userSettings?.phone || ''}`
    },
    {
      title: "Event Details", 
      content: `Client: ${contract.clientName}\nEmail: ${contract.clientEmail}\nAddress: ${contract.clientAddress || ''}\nPhone: ${contract.clientPhone || ''}\nDate: ${new Date(contract.eventDate).toLocaleDateString('en-GB')}\nTime: ${contract.startTime} - ${contract.endTime}\nVenue: ${contract.venue}`
    },
    {
      title: "Performance Fee",
      content: `¬£${contract.fee}`
    },
    {
      title: "Payment Terms",
      content: `Payment Due Date: Full payment of ¬£${contract.fee} becomes due and payable no later than the day of performance. Payment must be received before or immediately upon completion of the performance.\n\nPayment Methods: Cash or bank transfer to the performer's designated account (details provided separately).\n\n${contract.deposit ? `Deposit: ¬£${contract.deposit} deposit required to secure booking. Deposit is non-refundable except as outlined in the cancellation policy below.\n\n` : ''}Late Payment: Any payment received after the due date may incur a late payment fee of ¬£25 plus interest at 2% per month.`
    },
    {
      title: "Cancellation & Refund Policy", 
      content: `Client Cancellation:\n‚Ä¢ More than 30 days before event: Any deposit paid will be refunded minus a ¬£50 administration fee\n‚Ä¢ 30 days or less before event: Full performance fee becomes due regardless of cancellation\n‚Ä¢ Same day cancellation: Full fee due plus any additional costs incurred\n\nPerformer Cancellation: In the unlikely event the performer must cancel due to circumstances within their control, all payments will be refunded in full and reasonable assistance will be provided to find a suitable replacement.\n\nRescheduling: Event may be rescheduled once without penalty if agreed by both parties at least 14 days in advance. Additional rescheduling requests may incur a ¬£25 administrative fee.`
    },
    {
      title: "Professional Standards",
      content: `Equipment & Instrument Protection: The equipment and instruments of the performer are not available for use by any other person, except by specific permission of the performer. All musical instruments and equipment remain the exclusive property of the performer.\n\nVenue Safety Requirements: The client shall ensure a safe supply of electricity and the security of the performer and their property at the venue throughout the engagement.\n\nRecording & Transmission Policy: The client shall not make or permit the making of any audio and/or visual recording or transmission of the performer's performance without the prior written consent of the performer.\n\nContract Modifications: This agreement may not be modified or cancelled except by mutual consent, in writing signed by both parties. Verbal modifications are not binding.\n\nSafe Space Principle: The client and performer agree to a 'Safe Space' principle to provide a working environment free from harassment and discrimination, maintaining respectful professional standards throughout the engagement.\n\nProfessional Insurance: The performer maintains professional liability insurance as required for musical performance engagements.`
    },
    {
      title: "Signatures",
      content: `Performer: ${userSettings?.businessName || 'MusoBuddy'} - Status: ${contract.status === 'signed' ? 'Signed' : 'Awaiting Signature'}\n\nClient: ${contract.clientName} - Status: ${contract.clientSigned ? 'Signed' : 'Awaiting Signature'}\n\nContract Number: ${contract.contractNumber || contract.id}\nGenerated: ${new Date().toLocaleDateString('en-GB')} at ${new Date().toLocaleTimeString('en-GB')}`
    }
  ];

  return {
    type: 'contract',
    client: contract.clientName,
    eventDate: new Date(contract.eventDate).toLocaleDateString('en-GB'),
    venue: contract.venue,
    fee: `¬£${contract.fee}`,
    sections,
    branding: {
      businessName: userSettings?.businessName || 'MusoBuddy',
      footerText: 'Powered by MusoBuddy ‚Äì less admin, more music.'
    }
  };
}

// Helper function to convert invoice data to AI format
export function invoiceToAIFormat(invoice: any, userSettings: any, contract?: any): PDFData {
  const sections = [
    {
      title: "Business Details",
      content: `${userSettings?.businessName || 'MusoBuddy'}\n${getUserAddress(userSettings)}\nPhone: ${userSettings?.phone || ''}\nEmail: ${userSettings?.email || ''}`
    },
    {
      title: "Bill To",
      content: `${invoice.clientName}\n${invoice.clientAddress || ''}\n${invoice.clientEmail || contract?.clientEmail || ''}\n${contract?.clientPhone || ''}`
    },
    {
      title: "Invoice Details",
      content: `Invoice Number: ${invoice.invoiceNumber}\nDate: ${new Date(invoice.createdAt || '').toLocaleDateString('en-GB')}\nDue Date: ${new Date(invoice.dueDate).toLocaleDateString('en-GB')}\nStatus: ${invoice.status}`
    },
    {
      title: "Performance Details",
      content: `Event Date: ${invoice.performanceDate ? new Date(invoice.performanceDate).toLocaleDateString('en-GB') : 'TBD'}\nVenue: ${invoice.venueAddress || 'TBD'}\nPerformance Fee: ¬£${parseFloat(invoice.performanceFee || invoice.amount).toFixed(2)}\nDeposit Paid: ¬£${parseFloat(invoice.depositPaid || '0').toFixed(2)}\nAmount Due: ¬£${parseFloat(invoice.amount).toFixed(2)}`
    },
    {
      title: "Payment Information",
      content: `Bank Details: ${userSettings?.bankDetails || 'Bank details will be provided separately'}\n\nVAT Status: I am not VAT registered and therefore no VAT is charged.`
    },
    {
      title: "Terms & Conditions",
      content: userSettings?.defaultTerms || 'Payment is due within 30 days of the invoice date. Thank you for your business!'
    }
  ];

  return {
    type: 'invoice',
    client: invoice.clientName,
    eventDate: invoice.performanceDate ? new Date(invoice.performanceDate).toLocaleDateString('en-GB') : undefined,
    venue: invoice.venueAddress,
    fee: `¬£${invoice.amount}`,
    sections,
    branding: {
      businessName: userSettings?.businessName || 'MusoBuddy',
      footerText: 'Powered by MusoBuddy ‚Äì less admin, more music.'
    }
  };
}

function getUserAddress(userSettings: any): string {
  const addressParts = [];
  if (userSettings?.addressLine1) addressParts.push(userSettings.addressLine1);
  if (userSettings?.city) addressParts.push(userSettings.city);
  if (userSettings?.county) addressParts.push(userSettings.county);
  if (userSettings?.postcode) addressParts.push(userSettings.postcode);
  return addressParts.length > 0 ? addressParts.join(', ') : '';
}