Looking at your authentication code, I can see a few potential issues that might be causing the 500 error on your invoice update:

## Potential Issues

### 1. **User ID Missing from Session**
Your `updateUserSession` function doesn't store the user ID:

```javascript
function updateUserSession(
  user: any,
  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers
) {
  user.claims = tokens.claims();
  user.access_token = tokens.access_token;
  user.refresh_token = tokens.refresh_token;
  user.expires_at = user.claims?.exp;
  // Missing: user.id = tokens.claims().sub; // <-- This is likely needed
}
```

### 2. **Initial User Object is Empty**
In your verify function, you start with an empty user object:

```javascript
const verify: VerifyFunction = async (tokens, verified) => {
  const user = {}; // <-- Empty object
  updateUserSession(user, tokens);
  await upsertUser(tokens.claims());
  verified(null, user);
};
```

This means `req.user` won't have the user ID that your invoice update probably needs.

### 3. **Missing User ID in Session**
Your invoice update likely needs to know which user is making the request, but the user object doesn't contain the user ID.

## Fixes

### Fix 1: Store User ID in Session
```javascript
function updateUserSession(
  user: any,
  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers
) {
  const claims = tokens.claims();
  user.id = claims.sub; // Add this line
  user.claims = claims;
  user.access_token = tokens.access_token;
  user.refresh_token = tokens.refresh_token;
  user.expires_at = claims?.exp;
}
```

### Fix 2: Initialize User Object with ID
```javascript
const verify: VerifyFunction = async (tokens, verified) => {
  const claims = tokens.claims();
  const user = { id: claims.sub }; // Initialize with user ID
  updateUserSession(user, tokens);
  await upsertUser(claims);
  verified(null, user);
};
```

### Fix 3: Add More Debugging to Authentication
```javascript
export const isAuthenticated: RequestHandler = async (req, res, next) => {
  console.log('=== AUTHENTICATION CHECK ===');
  console.log('req.isAuthenticated():', req.isAuthenticated());
  console.log('req.user:', JSON.stringify(req.user, null, 2)); // Better logging
  
  const user = req.user as any;
  
  if (!req.isAuthenticated() || !user?.expires_at) {
    console.log('AUTHENTICATION FAILED - returning 401');
    return res.status(401).json({ message: "Unauthorized" });
  }

  // Add user ID to request for easy access
  req.userId = user.id; // Add this line
  
  const now = Math.floor(Date.now() / 1000);
  if (now <= user.expires_at) {
    return next();
  }

  // ... rest of refresh logic
};
```

### Fix 4: Check Your Invoice Update Handler
Your invoice update handler probably needs the user ID:

```javascript
app.put('/api/invoices/:id', isAuthenticated, async (req, res) => {
  console.log('=== INVOICE UPDATE REQUEST ===');
  console.log('Invoice ID:', req.params.id);
  console.log('User ID:', req.userId); // This might be undefined
  console.log('Request body:', JSON.stringify(req.body, null, 2));
  
  try {
    // Your update logic probably needs the user ID
    const result = await updateInvoice(req.params.id, req.body, req.userId);
    res.json(result);
  } catch (error) {
    console.error('Invoice update error:', error);
    res.status(500).json({ message: 'Failed to update invoice', error: error.message });
  }
});
```

## Quick Test

Add this temporary endpoint to check what's in your user session:

```javascript
app.get('/api/debug-user', isAuthenticated, (req, res) => {
  res.json({
    user: req.user,
    isAuthenticated: req.isAuthenticated(),
    sessionID: req.sessionID
  });
});
```

The main issue is likely that your invoice update is failing because it can't identify which user is making the request. Try these fixes and let me know what the debug output shows!