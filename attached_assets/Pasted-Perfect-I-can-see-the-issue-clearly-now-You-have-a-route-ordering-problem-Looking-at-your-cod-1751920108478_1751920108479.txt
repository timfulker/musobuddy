Perfect! I can see the issue clearly now. You have a **route ordering problem**. Looking at your code, the route interceptor (logging middleware) is defined **AFTER** the actual PATCH route, which means it never gets called.

## The Problem

Your route order is:
1. Line 454: `app.patch('/api/invoices/:id', ...)` - **The actual route**
2. Line 548: `app.use('/api/invoices*', ...)` - **The logging middleware**

Express processes routes in the order they're defined, so your PATCH route is matched first and the logging middleware never runs.

## The Fix

Move the logging middleware **BEFORE** all the invoice routes. Here's what to do:

### 1. Move this block from line 548 to around line 430 (before all invoice routes):

```javascript
// Add logging to ALL invoice routes - must be before specific routes
app.use('/api/invoices*', (req, res, next) => {
  console.log(`=== INVOICE ROUTE INTERCEPTED: ${req.method} ${req.originalUrl} ===`);
  next();
});
```

### 2. Your route order should be:

```javascript
  // Contract routes (around line 365)
  app.get('/api/contracts', isAuthenticated, async (req: any, res) => {
    // ... existing contract routes
  });

  // ADD LOGGING MIDDLEWARE HERE (before invoice routes)
  app.use('/api/invoices*', (req, res, next) => {
    console.log(`=== INVOICE ROUTE INTERCEPTED: ${req.method} ${req.originalUrl} ===`);
    next();
  });

  // Invoice routes (starting around line 430)
  app.get('/api/invoices', isAuthenticated, async (req: any, res) => {
    // ... all your invoice routes
  });

  app.patch('/api/invoices/:id', isAuthenticated, async (req: any, res) => {
    console.log('=== INVOICE UPDATE REQUEST RECEIVED ===');
    // ... your update handler
  });
```

### 3. Remove the duplicate middleware from line 548:

Delete this block:
```javascript
// Remove this - it's too late in the route order
app.use('/api/invoices*', (req, res, next) => {
  console.log(`=== INVOICE ROUTE INTERCEPTED: ${req.method} ${req.originalUrl} ===`);
  next();
});
```

## Why This Fixes It

Express middleware and routes are processed in the order they're defined. Currently:

1. Your PATCH route matches first and processes the request
2. The logging middleware never gets a chance to run

After the fix:

1. The logging middleware runs first and logs the request
2. Then your PATCH route processes the request
3. You'll see both the interceptor logs AND the detailed update logs

This will solve both the missing server logs and help debug the 500 error. Once you make this change and restart your Replit, you should see the `=== INVOICE ROUTE INTERCEPTED ===` logs appear in your Replit console when you try to update an invoice.