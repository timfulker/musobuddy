Perfect. Here’s exactly what you need, broken into two parts as requested:

⸻

✅ Part 1: Instructions for Replit — Instrument-to-Gig Type with Hybrid AI Fallback

Give these clear instructions to your Replit developer or paste into a README/internal issue:

⸻

📝 Feature: Instrument-Based Gig Suggestions with Hybrid AI

Objective:
Create a feature where users select instruments they play (via categorized checkboxes), and the system auto-suggests typical gig types using a hybrid approach (default lookup + OpenAI fallback).

⸻

1. ✅ User Input Interface
	•	Use checkboxes grouped under categories like:
	•	🎸 Band Instruments – guitar, bass, drums, vocals, saxophone, trumpet
	•	🎻 Classical Instruments – violin, flute, cello, piano, oboe
	•	🎹 Other/General – keyboard, DJ, singer-songwriter, percussion

Allow multi-selection.

⸻

2. ⚙️ Backend Logic
	•	On submission, send the selected instruments to a backend endpoint:
e.g. POST /api/suggest-gigs

⸻

3. 🔁 Server-Side Suggestion Logic
	•	Maintain a JS object like:

const instrumentToGigTypes = {
  saxophone: ['Solo Sax', 'Sax with DJ', 'Jazz Quartet', 'Wedding Ceremony'],
  guitar: ['Acoustic Set', 'Rock Band', 'Wedding Gig'],
  piano: ['Cocktail Set', 'Solo Piano', 'Musical Theatre'],
  flute: ['Orchestral Gig', 'Wedding Ceremony', 'Classical Recital'],
  vocals: ['Lead Singer', 'Backing Vocals', 'Acoustic Duo'],
  // Add more...
};

	•	For each instrument:
	•	Normalize input (e.g., lowercase, trim).
	•	Check against the mapping.
	•	Collect and deduplicate all matching gig types.
	•	If no matches found, fallback to OpenAI (see Part 2 below).

⸻

4. 🚀 Response Format

Return a JSON array:

["Solo Sax", "Sax with DJ", "Jazz Quartet"]


⸻

5. 💡 (Optional Enhancement)
	•	Log any user input not matched by the lookup table (e.g., "hang drum")
	•	This helps improve the static list over time

⸻

✅ Part 2: How to Use OpenAI API in Replit

Follow this setup to integrate OpenAI API in your Replit project (Node.js/Express assumed):

⸻

1. 🔐 Create OpenAI API Key
	•	Go to https://platform.openai.com/account/api-keys
	•	Click Create new secret key
	•	Copy it (you can only see it once)

⸻

2. 🛠️ Add Environment Variable in Replit

In your .env file (or Replit Secrets UI):

OPENAI_API_KEY=sk-xxxxxxxxxxxxxxxx


⸻

3. 📦 Install Dependencies

In Replit shell or package.json:

npm install openai dotenv


⸻

4. ✏️ Sample Code for AI Fallback (Node/Express)

// suggest-gigs.ts
import express from 'express';
import { OpenAI } from 'openai';
import dotenv from 'dotenv';
dotenv.config();

const router = express.Router();
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

router.post('/api/suggest-gigs', async (req, res) => {
  const instruments: string[] = req.body.instruments || [];
  const gigSuggestions = new Set<string>();

  const instrumentToGigTypes = {
    saxophone: ['Solo Sax', 'Sax with DJ', 'Jazz Quartet'],
    piano: ['Cocktail Set', 'Musical Theatre', 'Solo Piano'],
    vocals: ['Lead Singer', 'Backing Vocals'],
    // ...
  };

  instruments.forEach(instr => {
    const matches = instrumentToGigTypes[instr.toLowerCase()?.trim()];
    if (matches) matches.forEach(g => gigSuggestions.add(g));
  });

  if (gigSuggestions.size > 0) {
    return res.json([...gigSuggestions]);
  }

  // Fallback to GPT if nothing found
  const userText = instruments.join(', ');
  const prompt = `The user plays: ${userText}. Suggest 4 common gig types they might perform. Just return a list.`;

  try {
    const completion = await openai.chat.completions.create({
      messages: [{ role: 'user', content: prompt }],
      model: 'gpt-3.5-turbo',
    });

    const reply = completion.choices[0].message.content || '';
    const lines = reply.split('\n').map(line => line.replace(/^\d+\.\s*/, '').trim()).filter(Boolean);

    return res.json(lines);
  } catch (error) {
    console.error('OpenAI error:', error);
    return res.status(500).json({ error: 'AI suggestion failed' });
  }
});

export default router;


⸻

5. 🧪 Example Payload (Frontend POST)

{
  "instruments": ["saxophone", "flute"]
}


⸻

Would you also like me to provide a full starter instrumentToGigTypes object covering ~20 common instruments across genres?