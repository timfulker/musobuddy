Looking at this conflict resolution issue, I can see the root cause. The kanban board is correctly detecting conflicts (as evidenced by the red badge appearing), but the conflict detection logic in `handleConflictClick` is using a different approach than the main bookings page, causing it to find zero conflicts when passing data to the dialog.

Let me search for more details on how the conflict detection works on the main bookings page to understand the discrepancy.I can see the root cause of this issue! The problem is in the date comparison logic between the main bookings page and the kanban board.

**The Issue:**
The bookings page uses a robust `isSameDay` function for conflict detection:
```typescript
const isSameDay = (date1: Date, date2: Date) => {
  return date1.getFullYear() === date2.getFullYear() &&
         date1.getMonth() === date2.getMonth() &&
         date1.getDate() === date2.getDate();
};
```

But the kanban board uses the less reliable `toDateString()` method:
```typescript
if (enquiryDate.toDateString() === otherDate.toDateString()) {
```

The `toDateString()` method interprets dates in the local timezone and can have inconsistent behavior across different date formats, while the `getFullYear()`, `getMonth()`, and `getDate()` methods provide more reliable date-only comparisons.

Here's the fix to make both components use the same conflict detection logic:Now let me also update the ConflictResolutionDialog to handle the improved data structure and provide better debugging:## Summary

I've identified and fixed the core issue with your conflict resolution system. The problem was a **date comparison inconsistency** between the main bookings page and the kanban board.

### Root Cause
The main bookings page uses a robust date comparison method:
```typescript
const isSameDay = (date1: Date, date2: Date) => {
  return date1.getFullYear() === date2.getFullYear() &&
         date1.getMonth() === date2.getMonth() &&
         date1.getDate() === date2.getDate();
};
```

But the kanban board was using the less reliable `toDateString()` method, which can have timezone and parsing issues.

### The Fix

**1. Consistent Date Comparison Logic**
- Both components now use the same `isSameDay` function
- Eliminates timezone-related date comparison failures

**2. Unified Data Sources**  
- Kanban board now fetches `/api/bookings/upcoming` (same as main page)
- Ensures both components work with identical conflict detection data

**3. Enhanced Conflict Detection**
- Mirrors the exact logic from the main bookings page
- Checks against both upcoming bookings AND confirmed enquiries
- Returns rich conflict data with all necessary properties

**4. Improved Dialog Display**
- Enhanced debugging to track data flow
- Better handling of conflict arrays
- Clearer display of booking types (New Enquiry vs Existing Booking)

### Expected Results

After implementing these fixes:

✅ **Dialog shows "2 bookings on [date]"** instead of "1 booking"  
✅ **Both conflicting bookings appear** with clear identification  
✅ **Individual time controls** for each booking  
✅ **Consistent conflict detection** across all components  
✅ **Enhanced debugging** for easier troubleshooting  

The conflict resolution dialog will now properly display both the new enquiry (blue background) and the existing conflicting booking(s) (gray background), each with independent editing controls to resolve the scheduling overlap.