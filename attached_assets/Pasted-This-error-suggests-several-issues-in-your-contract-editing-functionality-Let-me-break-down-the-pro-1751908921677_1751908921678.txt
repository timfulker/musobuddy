This error suggests several issues in your contract editing functionality. Let me break down the problems and solutions:

## Main Issues

**1. Missing Contract ID**
```
Selected contract ID: undefined
```
The contract ID isn't being passed correctly to your edit function.

**2. Server Error (500)**
```
api/invoices/47:1 Failed to load resource: the server responded with a status of 500
```
Your backend is failing to process the update request.

**3. Accessibility Warning**
```
Warning: Missing `Description` or `aria-describedby={undefined}` for {DialogContent}
```
Your dialog component needs proper accessibility attributes.

## Solutions

### 1. Fix Contract ID Issue
Check how you're passing the contract ID to your edit function:

```javascript
// Make sure you're passing the contract ID correctly
const handleEdit = (contractId) => {
  setSelectedContractId(contractId);
  setIsEditDialogOpen(true);
};

// In your form submission
const onSubmit = (data) => {
  if (!selectedContractId) {
    console.error('No contract selected');
    return;
  }
  
  updateContract({
    id: selectedContractId,
    ...data
  });
};
```

### 2. Debug the Server Error
Add logging to see what data is being sent:

```javascript
// Before the API call
console.log('Submitting contract data:', {
  id: selectedContractId,
  ...formData
});

// Check your API endpoint
const response = await fetch(`/api/contracts/${contractId}`, {
  method: 'PUT',
  headers: {
    'Content-Type': 'application/json',
  },
  body: JSON.stringify(updateData)
});

if (!response.ok) {
  const errorData = await response.json();
  console.error('Server error:', errorData);
  throw new Error(`${response.status}: ${JSON.stringify(errorData)}`);
}
```

### 3. Fix Dialog Accessibility
Add proper ARIA attributes to your dialog:

```javascript
<DialogContent aria-describedby="contract-edit-description">
  <DialogHeader>
    <DialogTitle>Edit Contract</DialogTitle>
    <DialogDescription id="contract-edit-description">
      Update the contract details below
    </DialogDescription>
  </DialogHeader>
  {/* Your form content */}
</DialogContent>
```

### 4. Check Your Backend API
Make sure your backend endpoint handles the request correctly:

```javascript
// Example backend handler
app.put('/api/contracts/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const updateData = req.body;
    
    console.log('Updating contract:', id, updateData);
    
    // Your update logic here
    const updatedContract = await updateContract(id, updateData);
    
    res.json(updatedContract);
  } catch (error) {
    console.error('Update error:', error);
    res.status(500).json({ message: 'Failed to update contract', error: error.message });
  }
});
```

### 5. Add Error Handling
Wrap your update function with proper error handling:

```javascript
const handleContractUpdate = async (data) => {
  try {
    if (!selectedContractId) {
      throw new Error('No contract selected for update');
    }
    
    const result = await updateContract({
      id: selectedContractId,
      ...data
    });
    
    console.log('Contract updated successfully:', result);
    setIsEditDialogOpen(false);
    
  } catch (error) {
    console.error('Failed to update contract:', error);
    // Show user-friendly error message
    setError('Failed to update contract. Please try again.');
  }
};
```

## Quick Debugging Steps

1. **Check the contract selection**: Verify that `selectedContractId` has a value when the edit dialog opens
2. **Inspect network requests**: Use browser dev tools to see exactly what's being sent to your API
3. **Check server logs**: Look at your Replit console for backend error details
4. **Verify your API endpoint**: Make sure `/api/contracts/:id` exists and handles PUT requests

The main issue is likely that the contract ID isn't being properly set or passed through your edit flow. Start by adding console.log statements to track the contract ID through each step of your edit process.