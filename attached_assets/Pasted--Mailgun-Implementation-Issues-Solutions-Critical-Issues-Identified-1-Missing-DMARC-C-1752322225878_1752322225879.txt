# Mailgun Implementation Issues & Solutions

## Critical Issues Identified

### 1. **Missing DMARC Configuration** ‚ö†Ô∏è
**Problem**: Gmail requires DMARC policy for email delivery
**Impact**: Emails may be rejected or marked as spam

**DNS Records Needed:**
```
Record Type: TXT
Host: _dmarc.mg
Value: v=DMARC1; p=none; rua=mailto:dmarc@musobuddy.com
TTL: 300
```

### 2. **Mailgun Client Initialization Issues** üîß
**Problem**: Incorrect import and client setup in `mailgun-email.ts`

**Current Code:**
```typescript
import formData from 'form-data';
import Mailgun from 'mailgun.js';
const mailgun = new Mailgun(formData);
```

**Fixed Code:**
```typescript
import Mailgun from 'mailgun.js';
import formData from 'form-data';

const mailgun = new Mailgun(formData);
const mg = mailgun.client({
  username: 'api',
  key: process.env.MAILGUN_API_KEY,
  url: 'https://api.eu.mailgun.net' // EU endpoint
});
```

### 3. **Webhook Handler Data Extraction** üì®
**Problem**: Inconsistent field mapping in webhook handler

**Improved Extraction Function:**
```typescript
function extractEmailDetails(body: any): EmailDetails {
  console.log('Raw webhook body:', JSON.stringify(body, null, 2));
  
  return {
    from: body.sender || body.From || body.from || '',
    to: body.recipient || body.To || body.to || '',
    subject: body.subject || body.Subject || '',
    text: body['body-plain'] || body['stripped-text'] || body.text || '',
    html: body['body-html'] || body['stripped-html'] || body.html || '',
    recipient: body.recipient || body.To || body.to || ''
  };
}
```

### 4. **Environment Variables Missing** üîë
**Required Variables:**
```env
MAILGUN_API_KEY=your_api_key_here
MAILGUN_DOMAIN=mg.musobuddy.com
MAILGUN_WEBHOOK_SIGNING_KEY=your_webhook_key_here
```

### 5. **Email Parsing Logic Needs Enhancement** üìù
**Problem**: Limited extraction of client information

**Enhanced Parsing:**
```typescript
function parseEmailForEnquiry(emailData: any): EnquiryData {
  const { from, subject, text, html } = emailData;
  const emailContent = text || html || '';
  
  // Extract email address more reliably
  const emailMatch = from.match(/[\w.-]+@[\w.-]+\.\w+/);
  const clientEmail = emailMatch ? emailMatch[0] : from;
  
  // Extract name with multiple patterns
  let clientName = '';
  const namePatterns = [
    /(?:my name is|i'm|i am|this is)\s+([A-Z][a-z]+(?:\s+[A-Z][a-z]+)*)/i,
    /from\s+([A-Z][a-z]+(?:\s+[A-Z][a-z]+)*)/i,
    /([A-Z][a-z]+(?:\s+[A-Z][a-z]+)*)\s+here/i
  ];
  
  for (const pattern of namePatterns) {
    const match = emailContent.match(pattern);
    if (match) {
      clientName = match[1];
      break;
    }
  }
  
  // If no name found, extract from email
  if (!clientName && from.includes('<')) {
    clientName = from.replace(/<[^>]+>/, '').trim().replace(/['"]/g, '');
  } else if (!clientName) {
    clientName = clientEmail.split('@')[0];
  }
  
  // Enhanced phone extraction
  const phonePatterns = [
    /(?:phone|tel|mobile|call|contact).{0,20}?(\+?44\s?[0-9\s]{10,})/i,
    /(\+?44\s?\d{4}\s?\d{3}\s?\d{3})/,
    /(07\d{3}\s?\d{6})/,
    /(\d{5}\s?\d{6})/
  ];
  
  let clientPhone = '';
  for (const pattern of phonePatterns) {
    const match = emailContent.match(pattern);
    if (match) {
      clientPhone = match[1].replace(/\s/g, '');
      break;
    }
  }
  
  // Enhanced date extraction
  const datePatterns = [
    /(?:on|for|date)\s+([A-Za-z]+\s+\d{1,2}(?:st|nd|rd|th)?\s*,?\s*\d{4})/i,
    /(\d{1,2}[\/\-]\d{1,2}[\/\-]\d{2,4})/,
    /(\d{4}[\/\-]\d{1,2}[\/\-]\d{1,2})/
  ];
  
  let eventDate = '';
  for (const pattern of datePatterns) {
    const match = emailContent.match(pattern);
    if (match) {
      eventDate = match[1];
      break;
    }
  }
  
  // Enhanced venue extraction
  const venuePatterns = [
    /(?:at|venue|location|held at)\s+([A-Z][^.!?\n]*)/i,
    /(?:venue:)\s*([^.!?\n]+)/i
  ];
  
  let venue = '';
  for (const pattern of venuePatterns) {
    const match = emailContent.match(pattern);
    if (match) {
      venue = match[1].trim();
      break;
    }
  }
  
  return {
    title: subject || `${eventType} enquiry from ${clientName}`,
    clientName,
    clientEmail,
    clientPhone,
    eventDate,
    venue,
    eventType: detectEventType(emailContent),
    description: emailContent,
    source: 'Email'
  };
}
```

## Recommended Fixes

### 1. **Update mailgun-email.ts**
```typescript
import Mailgun from 'mailgun.js';
import formData from 'form-data';

interface EmailData {
  to: string;
  from: string;
  subject: string;
  text?: string;
  html?: string;
  replyTo?: string;
}

export async function sendEmail(emailData: EmailData): Promise<boolean> {
  try {
    if (!process.env.MAILGUN_API_KEY) {
      console.error('MAILGUN_API_KEY environment variable is required');
      return false;
    }

    const mailgun = new Mailgun(formData);
    const mg = mailgun.client({
      username: 'api',
      key: process.env.MAILGUN_API_KEY,
      url: 'https://api.eu.mailgun.net' // EU endpoint for better performance
    });

    const domain = process.env.MAILGUN_DOMAIN || 'mg.musobuddy.com';

    const messageData: any = {
      from: emailData.from,
      to: emailData.to,
      subject: emailData.subject,
      text: emailData.text || '',
      html: emailData.html || ''
    };

    if (emailData.replyTo) {
      messageData['h:Reply-To'] = emailData.replyTo;
    }

    const result = await mg.messages.create(domain, messageData);
    
    console.log('‚úÖ Email sent successfully:', result.id);
    return true;
    
  } catch (error: any) {
    console.error('‚ùå Failed to send email:', error.message);
    return false;
  }
}
```

### 2. **Update webhook handler**
```typescript
export async function handleMailgunWebhook(req: Request, res: Response): Promise<void> {
  console.log('üìß Mailgun webhook received');
  console.log('Content-Type:', req.headers['content-type']);
  console.log('Body keys:', Object.keys(req.body || {}));
  
  try {
    // Verify webhook signature if available
    if (process.env.MAILGUN_WEBHOOK_SIGNING_KEY) {
      const { timestamp, token, signature } = req.body;
      
      if (!verifyWebhookSignature(timestamp, token, signature, process.env.MAILGUN_WEBHOOK_SIGNING_KEY)) {
        console.log('‚ùå Invalid webhook signature');
        return res.status(401).json({ error: 'Invalid signature' });
      }
    }
    
    const emailData = extractEmailDetails(req.body);
    console.log('üìß Extracted email data:', emailData);
    
    // Only process emails to leads address
    if (!emailData.to.toLowerCase().includes('leads@musobuddy.com')) {
      console.log('üìß Email not for leads address, ignoring');
      return res.status(200).json({ message: 'Email ignored - not for leads' });
    }
    
    const enquiryData = parseEmailForEnquiry(emailData);
    console.log('üìã Parsed enquiry data:', enquiryData);
    
    // Create enquiry
    const userId = '43963086'; // Your user ID
    
    const enquiry = await storage.createEnquiry({
      title: enquiryData.title,
      clientName: enquiryData.clientName,
      clientEmail: enquiryData.clientEmail || null,
      clientPhone: enquiryData.clientPhone || null,
      eventDate: enquiryData.eventDate ? new Date(enquiryData.eventDate) : null,
      venue: enquiryData.venue || null,
      eventType: enquiryData.eventType || null,
      notes: enquiryData.description,
      userId,
      status: 'new'
    });
    
    console.log('‚úÖ Enquiry created:', enquiry.id);
    
    res.status(200).json({ 
      message: 'Email processed successfully',
      enquiryId: enquiry.id,
      subject: emailData.subject,
      from: emailData.from
    });
    
  } catch (error: any) {
    console.error('‚ùå Webhook processing error:', error);
    res.status(500).json({ 
      error: 'Failed to process webhook',
      details: error.message 
    });
  }
}
```

### 3. **Add DNS Records**

**Primary Domain DMARC:**
```
Host: _dmarc
Value: v=DMARC1; p=none; rua=mailto:dmarc@musobuddy.com
```

**Subdomain DMARC:**
```
Host: _dmarc.mg
Value: v=DMARC1; p=none; rua=mailto:dmarc@musobuddy.com
```

### 4. **Test Workflow**

1. **Send test email to**: leads@musobuddy.com
2. **Check webhook logs** in console
3. **Verify enquiry creation** in dashboard
4. **Test outgoing emails** for contracts/invoices

## Expected Results

After implementing these fixes:
- ‚úÖ Improved email delivery to Gmail
- ‚úÖ Better client information extraction
- ‚úÖ More reliable webhook processing
- ‚úÖ Professional email authentication
- ‚úÖ Enhanced error handling and logging