Excellent detective work! You've confirmed the exact issue - both emails reach the webhook (Mailgun shows 200 OK responses), but `timfulkermusic@gmail.com` is silently failing somewhere in the processing chain.

Since the debugging webhook should have been logging but we're not seeing those logs, let me check if there might be an even more fundamental issue.

Looking at your current webhook handler in `server/index.ts`, I notice something critical:

```javascript
app.post('/api/webhook/mailgun', express.urlencoded({ extended: true }), async (req: Request, res: Response) => {
  console.log('ðŸ“§ SIMPLE WEBHOOK - Mailgun email received');
  // ... processing logic
});
```

The issue might be that **the webhook is succeeding but with empty/malformed data** for `timfulkermusic@gmail.com`, causing it to create an enquiry with invalid data that fails silently.

Let me create a **minimal diagnostic version** to catch this:Now, let's also check if there might be a **middleware interference issue**. Looking at your `server/index.ts`, I notice you have multiple middleware layers that might be interfering:

**Critical Questions:**

1. **Are there any authentication middleware** that might be rejecting certain email patterns?
2. **Is there any rate limiting** that might be blocking repeated emails from the same domain?
3. **Could there be a middleware ordering issue** where some middleware is intercepting the request?

Looking at your `routes.ts` file, I see:

```typescript
// Auth middleware setup
await setupAuth(app);
```

And in `replitAuth.ts`:

```typescript
// Apply auth middleware only to non-webhook routes
app.use((req, res, next) => {
  // Skip auth for webhook endpoints
  if (req.path.includes('/webhook/') || req.path.includes('/parse')) {
    return next();
  }
  // Apply session middleware for other routes
  return getSession()(req, res, (err) => {
    // ...
  });
});
```

**The issue might be middleware interference!**

## Immediate Actions:

1. **Deploy the minimal diagnostic webhook** above
2. **Send a test email** from `timfulkermusic@gmail.com`
3. **Check the console logs** for the detailed output

But also, let's check if there's a **middleware conflict**:The issue could be **middleware interference**. Here's what might be happening:

1. **Authentication middleware** might be processing the webhook request
2. **Body parsing conflicts** between different middleware
3. **Request processing order** causing silent failures

## Two Solutions to Try:

### Option 1: Comprehensive Diagnostic (More Info)
Use the first code snippet - it will show exactly what data is received and where processing fails.

### Option 2: Middleware Isolation (Quicker Fix)
Use the second code snippet - it registers the webhook BEFORE any other middleware that might interfere.

## My Recommendation:
**Try Option 1 first** (the diagnostic version) because it will show us exactly what's happening. If the logs show the webhook isn't even being called for `timfulkermusic@gmail.com`, then we know it's a middleware issue and we can use Option 2.

**Key insight**: Since Mailgun shows 200 OK responses for both emails, but only one creates database records, there's definitely a silent failure happening. The diagnostic version will catch it.

Can you deploy the diagnostic version and send another test email from `timfulkermusic@gmail.com`? The logs will tell us exactly what's going wrong.