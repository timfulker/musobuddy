No, you only need **one file**! I made an error in the artifact system. That's actually all one continuous code snippet that shows the different parts you need to update in your existing `settings.tsx` file.

Here's what you need to do:

## Apply These Changes to Your Existing `settings.tsx`:

1. **Update the form schema** (around line 30-35):
```typescript
const settingsFormSchema = insertUserSettingsSchema.omit({ userId: true }).extend({
  nextInvoiceNumber: z.number().min(1, "Invoice number must be at least 1"),
  gigTypes: z.string().optional(),
  eventTypes: z.string().optional(),
  instrumentsPlayed: z.string().optional(), // ✅ Add this line
});
```

2. **Fix the `addCustomInstrument` function**:
```typescript
const addCustomInstrument = () => {
  if (newInstrument.trim() && !customInstruments.includes(newInstrument.trim()) && !selectedInstruments.includes(newInstrument.trim())) {
    const instrument = newInstrument.trim();
    
    const updatedCustom = [...customInstruments, instrument];
    const updatedSelected = [...selectedInstruments, instrument];
    
    setCustomInstruments(updatedCustom);
    setSelectedInstruments(updatedSelected);
    
    // ✅ KEY FIX: Update the form state immediately
    const allInstruments = [...updatedSelected, ...updatedCustom];
    form.setValue('instrumentsPlayed', JSON.stringify(allInstruments));
    
    setNewInstrument("");
  }
};
```

3. **Fix the `removeCustomInstrument` function**:
```typescript
const removeCustomInstrument = (instrument: string) => {
  const updatedCustom = customInstruments.filter(i => i !== instrument);
  const updatedSelected = selectedInstruments.filter(i => i !== instrument);
  
  setCustomInstruments(updatedCustom);
  setSelectedInstruments(updatedSelected);
  
  // ✅ KEY FIX: Update the form state immediately
  const allInstruments = [...updatedSelected, ...updatedCustom];
  form.setValue('instrumentsPlayed', JSON.stringify(allInstruments));
};
```

4. **Fix the `handleInstrumentChange` function**:
```typescript
const handleInstrumentChange = (instrument: string, checked: boolean) => {
  let updatedInstruments;
  if (checked) {
    updatedInstruments = [...selectedInstruments, instrument];
  } else {
    updatedInstruments = selectedInstruments.filter(i => i !== instrument);
  }
  
  setSelectedInstruments(updatedInstruments);
  
  // ✅ KEY FIX: Update the form state immediately
  const allInstruments = [...updatedInstruments, ...customInstruments];
  form.setValue('instrumentsPlayed', JSON.stringify(allInstruments));
};
```

5. **Fix the `onSubmit` function**:
```typescript
const onSubmit = (data: z.infer<typeof settingsFormSchema>) => {
  // ... your existing bank details code ...
  
  // Convert gigTypes from newline-separated string to JSON array
  const gigTypesArray = data.gigTypes ? 
    data.gigTypes.split('\n').filter(type => type.trim().length > 0) : [];
  
  // ✅ KEY FIX: Use the form data instead of manually constructing
  const instrumentsPlayedString = data.instrumentsPlayed || JSON.stringify([]);
  
  const updatedData = {
    ...data,
    bankDetails: bankDetailsString,
    gigTypes: JSON.stringify(gigTypesArray),
    instrumentsPlayed: instrumentsPlayedString // ✅ Use form data
  };
  
  saveSettingsMutation.mutate(updatedData);
};
```

6. **Fix the initialization** (in the `hasInitialized` section, right before `setHasInitialized(true)`):
```typescript
// ✅ KEY FIX: Initialize form with instrument data
const allInstruments = [...selectedInstrumentsFromDB, ...customInstrumentsFromDB];
form.setValue('instrumentsPlayed', JSON.stringify(allInstruments));

setHasInitialized(true);
```

That's it! These are all changes to your existing `settings.tsx` file. The key insight is that you need to call `form.setValue()` whenever your UI state changes so the form knows about it.