Perfect! I've successfully updated all the necessary files to rename "enquiries" to "bookings" throughout the MusoBuddy frontend. Here's a summary of the key changes made:

## **Files Updated:**

### 1. **App.tsx**
- Changed route from `/enquiries` to `/bookings`
- Updated import from `Enquiries` to `Bookings`

### 2. **enquiries.tsx → bookings.tsx** 
- **File renamed** and completely updated with bookings terminology
- All API calls changed from `/api/enquiries` to `/api/bookings`
- Type alias: `type Booking = Enquiry` (maintains database compatibility)
- All UI text updated:
  - "enquiries" → "bookings"
  - "enquiry" → "booking"
  - "New Enquiry" → "New Booking"
  - "Create Enquiry" → "Create Booking"
  - Function names and variables updated accordingly

### 3. **calendar.tsx**
- Updated API calls from `/api/enquiries` to `/api/bookings`
- Updated comments and variable names
- Navigation now goes to `/bookings` instead of `/enquiries`

### 4. **dashboard.tsx**
- No API changes needed (uses separate components)
- Maintains existing functionality

### 5. **sidebar.tsx**
- Updated navigation link from `/enquiries` to `/bookings`
- Menu item text changed from "Enquiries" to "Bookings"
- Updated active route checking

## **Key Technical Details:**

1. **Database Compatibility**: The schema types remain as `Enquiry` since the database table is still named "enquiries". I used a type alias `type Booking = Enquiry` to maintain this compatibility.

2. **API Endpoints**: All frontend calls now use `/api/bookings` instead of `/api/enquiries`. The backend will need to be updated to handle these new endpoints.

3. **Component Integration**: All existing components (BookingStatusDialog, BookingDetailsDialog, etc.) remain compatible as they use the same underlying data structure.

4. **URL Parameters**: Updated URL parameters like `enquiryId` to `bookingId` where appropriate.

5. **Consistent Terminology**: Throughout the UI, all user-facing text now consistently uses "booking" terminology while maintaining the same functionality.

The frontend is now fully updated to use "bookings" terminology. You'll need to update the backend API routes to handle the new `/api/bookings` endpoints, but the data structures and functionality remain the same.