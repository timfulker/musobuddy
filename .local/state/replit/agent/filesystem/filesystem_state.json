{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"manual-intake-instructions.md":{"content":"# üì≤ Manual Booking Enquiry Intake ‚Äì MusoBuddy Instructions\n\nWhen you receive a booking enquiry via WhatsApp, SMS, or text, follow these steps to log it into the MusoBuddy system:\n\n---\n\n## ‚úÖ If the message can be forwarded (recommended)\n1. Long-press the message (in WhatsApp, iMessage, or SMS)\n2. Tap **Forward** or **Share**\n3. Send it to: **leads@musobuddy.com**\n4. That's it ‚Äî the system will extract key details automatically\n\n---\n\n## üìù If the message can't be forwarded (e.g. voice note or in-person chat)\n1. **Open the MusoBuddy Quick Add Form** (save this as a home screen shortcut)\n   ‚Ä¢ **Link:** https://your-replit-domain.replit.app/quick-add\n2. **Fill in the fields:**\n   ‚Ä¢ Name\n   ‚Ä¢ Contact method (phone, WhatsApp, email, etc.)\n   ‚Ä¢ Event date\n   ‚Ä¢ Venue\n   ‚Ä¢ Message / notes\n   ‚Ä¢ Source (WhatsApp, SMS, Call, etc.)\n3. **Tap Submit**\n\n---\n\n## üì± Creating a Home Screen Shortcut (iPhone)\n1. Open Safari and go to: https://your-replit-domain.replit.app/quick-add\n2. Tap the **Share** button (square with arrow pointing up)\n3. Scroll down and tap **\"Add to Home Screen\"**\n4. Name it \"MusoBuddy Add\" and tap **\"Add\"**\n5. The form will now appear as an app icon on your home screen\n\n---\n\n## üì± Creating a Home Screen Shortcut (Android)\n1. Open Chrome and go to: https://your-replit-domain.replit.app/quick-add\n2. Tap the **three dots menu** (‚ãÆ) in the top right\n3. Tap **\"Add to Home screen\"**\n4. Name it \"MusoBuddy Add\" and tap **\"Add\"**\n5. The form will now appear as an app icon on your home screen\n\n---\n\n## üîÅ Why This Matters\n‚Ä¢ **Keeps all leads in one place** - No lost enquiries in message threads\n‚Ä¢ **Ensures no enquiries get missed** - Everything tracked in your pipeline\n‚Ä¢ **Helps the system track follow-ups** - Automated workflow management\n‚Ä¢ **Provides source tracking** - Know which channels bring the best bookings\n\n---\n\n## üìß Email Forwarding Setup (Advanced)\nFor automatic processing of forwarded messages:\n1. Set up email forwarding to: **leads@musobuddy.app**\n2. The system will automatically extract:\n   ‚Ä¢ Client name\n   ‚Ä¢ Contact details\n   ‚Ä¢ Event dates\n   ‚Ä¢ Venue information\n   ‚Ä¢ Original message content\n3. New enquiries appear instantly in your dashboard\n\n---\n\n**üí° Pro Tip:** Save the Quick Add form as a home screen shortcut for lightning-fast enquiry entry when you're on the go!","size_bytes":2372},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# MusoBuddy - Music Business Management Platform\n\n## Overview\n\nMusoBuddy is a comprehensive full-stack web application designed for freelance musicians to streamline their business operations. The platform automates workflows from initial enquiry to final payment, aiming to reduce administrative overhead by 70% and increase booking conversion rates. Built with modern web technologies, it provides a complete business management solution for independent music professionals.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript\n- **Routing**: Wouter for client-side navigation\n- **State Management**: TanStack Query (React Query) for server state management\n- **UI Components**: Radix UI primitives with shadcn/ui design system\n- **Styling**: Tailwind CSS with CSS custom properties for theming\n- **Build Tool**: Vite for development and production builds\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **Database**: PostgreSQL with Neon serverless driver\n- **ORM**: Drizzle ORM for type-safe database operations\n- **Authentication**: Replit OAuth integration with OpenID Connect\n- **Session Management**: Express sessions with PostgreSQL storage\n\n### Data Storage Solutions\n- **Primary Database**: PostgreSQL hosted on Neon\n- **ORM**: Drizzle ORM with schema-first approach\n- **Session Storage**: PostgreSQL table-based session storage\n- **Connection Pooling**: Neon serverless connection pooling\n- **Migrations**: Drizzle Kit for database schema migrations\n\n## Key Components\n\n### Authentication System\n- **Provider**: Replit OAuth with OpenID Connect discovery\n- **Session Management**: Secure HTTP-only cookies with PostgreSQL persistence\n- **User Management**: Automatic user creation and profile synchronization\n- **Security**: CSRF protection and secure session configuration\n\n### Business Data Models\n- **Enquiries**: Lead management with status tracking (new, qualified, contract_sent, confirmed, rejected)\n- **Contracts**: Digital contract management with client information\n- **Invoices**: Financial tracking with payment status monitoring\n- **Bookings**: Event scheduling with calendar integration\n- **Compliance**: Document management for certifications and licenses\n- **Users**: Profile management with Replit integration\n\n### Dashboard Components\n- **Stats Cards**: Real-time business metrics and KPIs\n- **Kanban Board**: Visual enquiry pipeline management\n- **Calendar Widget**: Upcoming bookings and event scheduling\n- **Compliance Alerts**: Certificate expiration monitoring\n- **Quick Actions**: Rapid task creation and management\n\n### Mobile Experience\n- **Responsive Design**: Mobile-first approach with Tailwind breakpoints\n- **Progressive Web App**: Optimized mobile navigation\n- **Touch Interactions**: Mobile-optimized UI components\n\n## Data Flow\n\n### Authentication Flow\n1. User initiates login via Replit OAuth\n2. OpenID Connect discovery and token exchange\n3. User profile creation/update in PostgreSQL\n4. Session establishment with secure cookie\n5. Protected API access with session validation\n\n### Business Process Flow\n1. **Enquiry Creation**: Client inquiry captured with status tracking\n2. **Qualification**: Enquiry assessment and status progression\n3. **Contract Generation**: Automated contract creation from enquiry data\n4. **Booking Confirmation**: Calendar scheduling and client communication\n5. **Invoice Generation**: Automated billing based on booking details\n6. **Payment Tracking**: Financial status monitoring and reporting\n\n### Data Synchronization\n- Real-time updates via TanStack Query\n- Optimistic UI updates for better user experience\n- Automatic cache invalidation and revalidation\n- Error handling with user-friendly feedback\n\n## External Dependencies\n\n### Core Dependencies\n- **@neondatabase/serverless**: PostgreSQL connection management\n- **drizzle-orm**: Type-safe database operations\n- **express**: Web application framework\n- **@tanstack/react-query**: Server state management\n- **@radix-ui/***: Accessible UI primitives\n- **tailwindcss**: Utility-first CSS framework\n\n### Authentication Dependencies\n- **openid-client**: OAuth/OpenID Connect implementation\n- **passport**: Authentication middleware\n- **express-session**: Session management\n- **connect-pg-simple**: PostgreSQL session store\n\n### Development Dependencies\n- **vite**: Build tool and development server\n- **tsx**: TypeScript execution for Node.js\n- **tailwindcss**: CSS framework\n- **@types/***: TypeScript definitions\n\n## Deployment Strategy\n\n### Development Environment\n- **Local Development**: Vite dev server with HMR\n- **Database**: Neon PostgreSQL with development credentials\n- **Authentication**: Replit OAuth in development mode\n- **Asset Serving**: Vite middleware for static assets\n\n### Production Deployment\n- **Build Process**: Vite production build with optimizations\n- **Server Bundle**: ESBuild for Node.js server compilation\n- **Static Assets**: Pre-built and served via Express\n- **Environment Variables**: Secure credential management\n- **Database Migrations**: Automated schema deployment\n\n### Performance Optimizations\n- **Code Splitting**: Automatic route-based code splitting\n- **Tree Shaking**: Dead code elimination in production\n- **Asset Optimization**: Image and font optimization\n- **Caching**: Browser caching for static assets\n- **Connection Pooling**: Efficient database connections\n\n## Changelog\n\n```\nChangelog:\n- July 02, 2025. Initial setup\n- July 02, 2025. Invoice creation functionality completed:\n  * Fixed Quick Actions \"Create Invoice\" link with URL parameter handling\n  * Implemented complete Create Invoice dialog with form validation\n  * Added proper dialog state management for all invoice creation buttons\n  * Contract selection dropdown integration for invoice-contract linking\n- July 02, 2025. Business settings system completed:\n  * Created comprehensive settings page with professional form layout\n  * Added user_settings database table for storing business details\n  * Implemented Settings navigation link in sidebar\n  * Connected invoice auto-fill to use business address from user settings\n  * Added API routes for saving/loading user business preferences\n  * Settings include: business name, address, phone, website, tax number, bank details, default terms\n  * Fixed settings save operation with proper API request format\n  * Updated bank details section to structured table format with visible field labels\n  * Added \"Back to Dashboard\" navigation button for improved user experience\n- July 02, 2025. Invoice creation functionality fixed:\n  * Resolved API request format issue preventing invoice creation\n  * Removed redundant action buttons (send, download, menu) from invoice cards\n  * Replaced non-functional buttons with clean status badges showing invoice state\n  * Invoice creation now works seamlessly with contract data integration\n- July 02, 2025. Added comprehensive action buttons for contracts and invoices:\n  * Draft status: Edit, Preview, Send, Delete buttons\n  * Sent status: Preview, Download, Resend/Reminder buttons  \n  * Paid/Signed status: Preview, Download buttons\n  * Status badges with clear labels to distinguish from clickable actions\n  * Consistent UI design across both contracts and invoices pages\n- July 02, 2025. Implemented SaaS-friendly email system:\n  * Centralized SendGrid integration using platform owner's account\n  * Removed requirement for individual subscriber SendGrid subscriptions\n  * Added customizable \"Email From Name\" field in user settings\n  * Updated email sending to use format: \"Custom Name <business@email.com>\"\n  * Enhanced email personalization while maintaining centralized service delivery\n  * Users can now brand emails with their business identity without needing external accounts\n- July 02, 2025. Completed professional PDF generation and contract signing system:\n  * Fixed Puppeteer/Chromium configuration with proper system dependencies\n  * Implemented automatic PDF generation for all contracts with professional formatting\n  * Added PDF attachment delivery system for signed contract confirmations\n  * Created client-side PDF download functionality on signing completion page\n  * Full end-to-end workflow: contract creation ‚Üí email sending ‚Üí client signing ‚Üí PDF generation ‚Üí email delivery\n  * Both parties receive confirmation emails with signed contract PDF attachments\n  * System generates 41KB+ professional PDF documents with signatures and audit trails\n- July 02, 2025. Enhanced invoice management with complete automation:\n  * Implemented professional invoice PDF generation matching contract system\n  * Added PDF attachments to invoice emails via SendGrid integration\n  * Created PDF download functionality for all invoice statuses\n  * Added smart auto-filling system for invoice creation:\n    - Auto-generates sequential invoice numbers (INV-2025-001 format)\n    - Auto-calculates invoice amount from contract (fee minus deposit)\n    - Auto-fills client name and performance date from selected contract\n    - Auto-sets due date to 30 days from creation\n  * Complete invoice workflow automation reducing data entry by 80%\n- July 03, 2025. Fixed invoice creation and email sending functionality:\n  * Resolved API request parameter order issue preventing invoice creation\n  * Fixed validation schema integration for proper data transformation\n  * Corrected invoice email sending endpoint routing (send-email vs send)\n  * Invoice creation now works with complete validation and error handling\n  * Email sending functionality operational with PDF attachments and professional formatting\n  * Fixed PDF status consistency - email attachments now show \"sent\" instead of \"draft\"\n  * Implemented proper status update sequence: update to \"sent\" ‚Üí generate PDF ‚Üí send email\n- July 03, 2025. Comprehensive invoice management system implemented:\n  * Created automated overdue invoice detection with 3-day working grace period\n  * Added professional overdue reminder emails with urgent red styling and legal warnings\n  * Implemented \"Mark as Paid\" functionality for sent and overdue invoices\n  * Enhanced UI with status-specific action buttons (Mark Paid, Send Reminder, Download)\n  * Created bank account monitoring documentation covering Open Banking APIs, payment processors\n  * Overdue invoices display with red background and bold white text for visibility\n  * Complete payment tracking workflow from creation to collection\n- July 03, 2025. Manual booking enquiry intake system created:\n  * Built Quick Add form accessible at /quick-add for mobile enquiry entry\n  * Created email forwarding system for leads@musobuddy.app with intelligent parsing\n  * Added source tracking (WhatsApp, SMS, Phone, Email, etc.) for lead attribution\n  * Email parser extracts client details, event dates, venues automatically from forwarded messages\n  * Mobile-optimized form designed for home screen shortcuts on iOS/Android\n  * Complete instructions provided for both manual form entry and email forwarding workflows\n  * System processes voice notes, in-person conversations, and digital message forwards seamlessly\n- July 04, 2025. SendGrid domain authentication successfully completed:\n  * Resolved DNS conflicts by removing conflicting A records and URL redirects\n  * Properly configured 5 CNAME records and 1 TXT record for domain authentication\n  * Implemented link branding for professional email appearance\n  * Email forwarding system now fully operational at leads@musobuddy.com\n  * All emails sent from platform now appear from authenticated musobuddy.com domain\n  * Enhanced email deliverability through proper SPF, DKIM, and DMARC configuration\n- July 04, 2025. Email forwarding infrastructure deployment completed:\n  * Configured root domain MX record (@ ‚Üí mx.sendgrid.net) for catch-all email routing\n  * Set up SendGrid Inbound Parse with musobuddy.com domain configuration\n  * Deployed updated webhook endpoint with enhanced debugging and domain consistency fixes\n  * Email delivery now working (no bounce messages) - waiting for SendGrid processing activation\n  * Complete email forwarding pipeline: leads@musobuddy.com ‚Üí SendGrid ‚Üí webhook ‚Üí enquiry creation\n  * System ready for production use once SendGrid Inbound Parse becomes active (typically 15-30 minutes)\n- July 04, 2025. Authentication and email sending functionality fully restored:\n  * Resolved critical 401 Unauthorized errors that were causing infinite request loops\n  * Fixed session cookie configuration for proper deployment environment compatibility\n  * Removed problematic authentication middleware that was blocking email sending endpoints\n  * Invoice creation and email sending now working seamlessly in deployed environment\n  * Enhanced debugging logs for better troubleshooting of authentication and email processes\n  * System preference: deployed version required for full functionality integration\n- July 04, 2025. Email sending system fully operational:\n  * Identified and resolved PDF generation bottleneck that was causing email sending to hang\n  * Simplified email sending process to HTML-only format for reliable delivery\n  * Added comprehensive error handling and debug responses for troubleshooting\n  * Invoice emails now sending successfully with 200 status responses\n  * Complete workflow: invoice creation ‚Üí status update ‚Üí email delivery ‚Üí confirmation\n- July 04, 2025. Universal Gmail-compatible email system implemented:\n  * Resolved SPF authentication failures preventing Gmail/Yahoo/Outlook users from sending emails\n  * Smart email routing: FROM uses authenticated musobuddy.com domain, REPLY-TO uses user's actual email\n  * Universal compatibility with all email providers (Gmail, Yahoo, Outlook, AOL, iCloud, etc.)\n  * Professional email delivery: clients see business name, replies go to user's inbox\n  * Applied solution to both invoice and contract email sending workflows\n  * Eliminated email authentication barriers for all users regardless of email provider\n- July 04, 2025. Contract signing system fully completed and tested:\n  * Fixed public contract API to return both 'sent' and 'signed' status contracts for proper display\n  * Contract signing page now correctly shows success confirmation after signing\n  * Email delivery fully operational: both client and performer receive confirmation emails with PDF attachments\n  * PDF download functionality working correctly from success page\n  * Complete end-to-end workflow: contract creation ‚Üí email sending ‚Üí client signing ‚Üí PDF generation ‚Üí email delivery\n  * User confirmed: \"emails received and contact download link works fine\"\n  * System ready for production use with full email and document automation\n```\n\n## User Preferences\n\n```\nPreferred communication style: Simple, everyday language.\n```","size_bytes":14837},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/bank-monitoring.ts":{"content":"/**\n * Bank Account Monitoring Documentation\n * \n * This file outlines various approaches for monitoring bank accounts\n * to automatically detect invoice payments and update invoice status.\n */\n\n// Option 1: Open Banking APIs (UK)\n// Most comprehensive solution for UK banks\ninterface OpenBankingProvider {\n  name: string;\n  apiType: 'PSD2' | 'CMA9' | 'Open Banking';\n  supports: string[];\n  implementation: string;\n}\n\nconst ukOpenBankingOptions: OpenBankingProvider[] = [\n  {\n    name: 'TrueLayer',\n    apiType: 'Open Banking',\n    supports: ['Real-time transactions', 'Account balance', 'Payment initiation'],\n    implementation: 'RESTful API with OAuth2, webhook notifications for new transactions'\n  },\n  {\n    name: 'Yapily',\n    apiType: 'Open Banking', \n    supports: ['Transaction history', 'Account info', 'Payment status'],\n    implementation: 'REST API, covers 1500+ banks across Europe'\n  },\n  {\n    name: 'Plaid (Europe)',\n    apiType: 'Open Banking',\n    supports: ['Transaction data', 'Account verification', 'Real-time updates'],\n    implementation: 'Easy integration, webhook support for transaction updates'\n  }\n];\n\n// Option 2: Direct Bank APIs\ninterface BankAPI {\n  bank: string;\n  availability: 'Public' | 'Business' | 'Enterprise';\n  features: string[];\n  notes: string;\n}\n\nconst directBankAPIs: BankAPI[] = [\n  {\n    bank: 'Lloyds Bank',\n    availability: 'Business',\n    features: ['Transaction downloads', 'Account balance', 'Standing orders'],\n    notes: 'Requires business banking relationship and API agreement'\n  },\n  {\n    bank: 'Barclays',\n    availability: 'Enterprise',\n    features: ['Real-time notifications', 'Transaction details', 'Multi-account'],\n    notes: 'Enterprise-only, significant setup requirements'\n  },\n  {\n    bank: 'Starling Bank',\n    availability: 'Public',\n    features: ['Webhooks', 'Real-time transactions', 'Easy integration'],\n    notes: 'Developer-friendly API, good for small businesses'\n  }\n];\n\n// Option 3: Bank File Import Systems\ninterface FileImportMethod {\n  format: string;\n  description: string;\n  automation: 'Manual' | 'Semi-automatic' | 'Automatic';\n  implementation: string;\n}\n\nconst fileImportMethods: FileImportMethod[] = [\n  {\n    format: 'CSV Export',\n    description: 'Regular CSV downloads from online banking',\n    automation: 'Semi-automatic',\n    implementation: 'Scheduled download + parsing for payment matching'\n  },\n  {\n    format: 'OFX/QIF Files',\n    description: 'Standard banking data formats',\n    automation: 'Semi-automatic', \n    implementation: 'Better structure than CSV, easier to parse transactions'\n  },\n  {\n    format: 'Bank Email Notifications',\n    description: 'Parse payment notification emails',\n    automation: 'Automatic',\n    implementation: 'Email parsing service to extract payment details'\n  }\n];\n\n// Option 4: Third-party Payment Processing\ninterface PaymentProcessor {\n  service: string;\n  features: string[];\n  webhooks: boolean;\n  integration: string;\n}\n\nconst paymentProcessors: PaymentProcessor[] = [\n  {\n    service: 'Stripe',\n    features: ['Direct invoicing', 'Automatic reconciliation', 'Real-time updates'],\n    webhooks: true,\n    integration: 'Replace manual invoicing with Stripe-hosted payment pages'\n  },\n  {\n    service: 'GoCardless',\n    features: ['Direct Debit', 'Automatic collection', 'Failed payment handling'],\n    webhooks: true,\n    integration: 'Ideal for recurring payments, automatic retry on failures'\n  },\n  {\n    service: 'PayPal',\n    features: ['Invoice emails', 'Payment tracking', 'International payments'],\n    webhooks: true,\n    integration: 'Simple setup, good for international clients'\n  }\n];\n\n/**\n * Implementation Priority Recommendations:\n * \n * 1. IMMEDIATE (Low cost, quick setup):\n *    - Email notification parsing\n *    - Manual CSV import with automation\n *    - PayPal/Stripe integration for new invoices\n * \n * 2. SHORT TERM (1-3 months):\n *    - Open Banking API (TrueLayer/Yapily)\n *    - Automated payment matching system\n *    - Webhook-based real-time updates\n * \n * 3. LONG TERM (3-6 months):\n *    - Direct bank API integration\n *    - Multi-bank support\n *    - Advanced reconciliation algorithms\n */\n\nexport interface BankMonitoringConfig {\n  method: 'open_banking' | 'direct_api' | 'file_import' | 'payment_processor';\n  provider: string;\n  apiKey?: string;\n  webhookUrl?: string;\n  automationLevel: 'manual' | 'semi_automatic' | 'fully_automatic';\n}\n\nexport class BankMonitor {\n  private config: BankMonitoringConfig;\n  \n  constructor(config: BankMonitoringConfig) {\n    this.config = config;\n  }\n  \n  async checkForPayments(): Promise<void> {\n    switch (this.config.method) {\n      case 'open_banking':\n        await this.checkOpenBankingPayments();\n        break;\n      case 'payment_processor':\n        await this.checkPaymentProcessorWebhooks();\n        break;\n      default:\n        console.log(`Bank monitoring method ${this.config.method} not yet implemented`);\n    }\n  }\n  \n  private async checkOpenBankingPayments(): Promise<void> {\n    // Implementation would connect to TrueLayer/Yapily API\n    // Parse transactions and match against outstanding invoices\n    console.log('Checking Open Banking API for new payments...');\n  }\n  \n  private async checkPaymentProcessorWebhooks(): Promise<void> {\n    // Implementation would process Stripe/PayPal webhooks\n    // Automatically update invoice status when payments received\n    console.log('Processing payment processor webhooks...');\n  }\n}\n\n/**\n * Cost Analysis:\n * \n * Open Banking APIs:\n * - TrueLayer: ¬£0.01-0.05 per API call\n * - Yapily: ‚Ç¨0.02-0.10 per request\n * - Plaid: $0.60 per month per connected account\n * \n * Payment Processors:\n * - Stripe: 1.4% + 20p per transaction\n * - PayPal: 2.9% + 30p per transaction\n * - GoCardless: 1% + 20p per transaction (Direct Debit)\n * \n * File Import: Free (requires manual work)\n * Email Parsing: ~¬£10-50/month for email processing service\n */","size_bytes":5927},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/email-parser.ts":{"content":"/**\n * Email Parsing Service for MusoBuddy\n * Extracts booking enquiry information from forwarded emails\n */\n\ninterface ParsedEnquiry {\n  clientName: string;\n  clientEmail?: string;\n  clientPhone?: string;\n  eventDate?: Date;\n  venue?: string;\n  message: string;\n  title: string;\n}\n\n/**\n * Parse email enquiry and extract key booking information\n */\nexport async function parseEmailEnquiry(\n  from: string, \n  subject: string, \n  body: string\n): Promise<ParsedEnquiry> {\n  const parsedData: ParsedEnquiry = {\n    clientName: extractClientName(from, body),\n    clientEmail: extractEmail(from, body),\n    clientPhone: extractPhone(body),\n    eventDate: extractEventDate(body),\n    venue: extractVenue(body),\n    message: cleanEmailBody(body),\n    title: subject || \"Email Enquiry\"\n  };\n\n  return parsedData;\n}\n\n/**\n * Extract client name from email sender or body\n */\nfunction extractClientName(from: string, body: string): string {\n  // Try to extract name from email sender\n  const nameMatch = from.match(/^([^<]+?)\\s*<.*>$/);\n  if (nameMatch && nameMatch[1].trim()) {\n    return nameMatch[1].trim();\n  }\n\n  // Try to extract name from email address\n  const emailMatch = from.match(/<([^@]+)@/);\n  if (emailMatch) {\n    return emailMatch[1].replace(/[._]/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase());\n  }\n\n  // Try to find name patterns in body\n  const namePatterns = [\n    /my name is ([a-zA-Z\\s]+)/i,\n    /i'm ([a-zA-Z\\s]+)/i,\n    /this is ([a-zA-Z\\s]+)/i,\n    /from ([a-zA-Z\\s]+)/i\n  ];\n\n  for (const pattern of namePatterns) {\n    const match = body.match(pattern);\n    if (match && match[1].length < 50) {\n      return match[1].trim();\n    }\n  }\n\n  return from.split('@')[0] || 'Unknown Client';\n}\n\n/**\n * Extract email address from sender or body\n */\nfunction extractEmail(from: string, body: string): string | undefined {\n  // Extract from sender\n  const emailMatch = from.match(/<([^>]+)>/) || from.match(/([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})/);\n  if (emailMatch) {\n    return emailMatch[1];\n  }\n\n  // Look for additional email in body\n  const bodyEmailMatch = body.match(/([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})/);\n  return bodyEmailMatch ? bodyEmailMatch[1] : undefined;\n}\n\n/**\n * Extract phone number from email body\n */\nfunction extractPhone(body: string): string | undefined {\n  const phonePatterns = [\n    // UK formats\n    /(\\+44\\s?7\\d{3}\\s?\\d{3}\\s?\\d{3})/,\n    /(07\\d{3}\\s?\\d{3}\\s?\\d{3})/,\n    /(\\+44\\s?\\d{4}\\s?\\d{3}\\s?\\d{3})/,\n    /(0\\d{4}\\s?\\d{3}\\s?\\d{3})/,\n    // General formats\n    /(\\+\\d{1,3}\\s?\\d{3,4}\\s?\\d{3}\\s?\\d{3,4})/,\n    /(\\d{3,4}[-.\\s]?\\d{3}[-.\\s]?\\d{3,4})/\n  ];\n\n  for (const pattern of phonePatterns) {\n    const match = body.match(pattern);\n    if (match) {\n      return match[1].replace(/\\s+/g, ' ').trim();\n    }\n  }\n\n  return undefined;\n}\n\n/**\n * Extract event date from email body\n */\nfunction extractEventDate(body: string): Date | undefined {\n  const datePatterns = [\n    // DD/MM/YYYY or DD-MM-YYYY\n    /(\\d{1,2}[\\/\\-]\\d{1,2}[\\/\\-]\\d{4})/,\n    // Month DD, YYYY\n    /(january|february|march|april|may|june|july|august|september|october|november|december)\\s+(\\d{1,2}),?\\s+(\\d{4})/i,\n    // DD Month YYYY\n    /(\\d{1,2})\\s+(january|february|march|april|may|june|july|august|september|october|november|december)\\s+(\\d{4})/i,\n    // Next/this Saturday, Monday etc\n    /(next|this)\\s+(monday|tuesday|wednesday|thursday|friday|saturday|sunday)/i\n  ];\n\n  for (const pattern of datePatterns) {\n    const match = body.match(pattern);\n    if (match) {\n      try {\n        const dateStr = match[0];\n        const parsedDate = new Date(dateStr);\n        \n        // Check if date is valid and in the future\n        if (!isNaN(parsedDate.getTime()) && parsedDate > new Date()) {\n          return parsedDate;\n        }\n      } catch (error) {\n        continue;\n      }\n    }\n  }\n\n  return undefined;\n}\n\n/**\n * Extract venue from email body\n */\nfunction extractVenue(body: string): string | undefined {\n  const venuePatterns = [\n    /at\\s+([a-zA-Z\\s\\&\\'\\-]+(?:hall|centre|center|hotel|pub|club|venue|church|barn|manor|house|room))/i,\n    /venue:?\\s*([a-zA-Z\\s\\&\\'\\-]+)/i,\n    /location:?\\s*([a-zA-Z\\s\\&\\'\\-]+)/i,\n    /held at\\s+([a-zA-Z\\s\\&\\'\\-]+)/i\n  ];\n\n  for (const pattern of venuePatterns) {\n    const match = body.match(pattern);\n    if (match && match[1].length < 100) {\n      return match[1].trim();\n    }\n  }\n\n  return undefined;\n}\n\n/**\n * Clean email body by removing headers, signatures, and formatting\n */\nfunction cleanEmailBody(body: string): string {\n  let cleaned = body;\n\n  // Remove email headers\n  cleaned = cleaned.replace(/^(From|To|Subject|Date|Sent):.*$/gm, '');\n  \n  // Remove forward/reply indicators\n  cleaned = cleaned.replace(/^(>|\\|).*/gm, '');\n  cleaned = cleaned.replace(/On.*wrote:$/gm, '');\n  cleaned = cleaned.replace(/-----Original Message-----/g, '');\n  \n  // Remove common email signatures\n  cleaned = cleaned.replace(/--\\s*\\n[\\s\\S]*$/m, '');\n  cleaned = cleaned.replace(/Best regards[\\s\\S]*$/im, '');\n  cleaned = cleaned.replace(/Kind regards[\\s\\S]*$/im, '');\n  cleaned = cleaned.replace(/Thanks[\\s\\S]*$/im, '');\n  \n  // Remove excessive whitespace\n  cleaned = cleaned.replace(/\\n\\s*\\n/g, '\\n\\n');\n  cleaned = cleaned.trim();\n\n  return cleaned;\n}\n\n/**\n * Webhook endpoint for email service providers (like SendGrid, Mailgun)\n * This would be called when emails are sent to leads@musobuddy.com\n */\nexport interface EmailWebhookPayload {\n  from: string;\n  to: string;\n  subject: string;\n  text: string;\n  html?: string;\n  timestamp: number;\n}\n\nexport function processEmailWebhook(payload: EmailWebhookPayload): ParsedEnquiry {\n  return parseEmailEnquiry(payload.from, payload.subject, payload.text);\n}","size_bytes":5684},"server/email-webhook.ts":{"content":"/**\n * SendGrid Email Webhook Handler\n * Processes incoming emails sent to leads@musobuddy.com\n */\n\nimport { Request, Response } from 'express';\nimport { storage } from './storage';\nimport { parseEmailEnquiry } from './email-parser';\n\nexport interface SendGridWebhookPayload {\n  to: string;\n  from: string;\n  subject: string;\n  text: string;\n  html?: string;\n  envelope: {\n    to: string[];\n    from: string;\n  };\n  headers: {\n    [key: string]: string;\n  };\n}\n\n/**\n * SendGrid Inbound Email Webhook Handler\n * Receives emails sent to leads@musobuddy.com and processes them\n */\nexport async function handleSendGridWebhook(req: Request, res: Response) {\n  try {\n    console.log('=== SENDGRID WEBHOOK RECEIVED ===');\n    console.log('Headers:', req.headers);\n    console.log('Body:', req.body);\n    console.log('Method:', req.method);\n    console.log('URL:', req.url);\n    \n    // SendGrid sends email data as form data\n    const {\n      to,\n      from,\n      subject,\n      text,\n      html,\n      envelope\n    } = req.body;\n\n    // Validate this is for our leads email\n    if (!to || !to.includes('leads@musobuddy.com')) {\n      console.log('Email not for leads@musobuddy.com, ignoring');\n      return res.status(200).json({ message: 'Email ignored - not for leads' });\n    }\n\n    // Parse the email content\n    const enquiryData = await parseEmailEnquiry(from, subject, text || html || '');\n    \n    // Create enquiry in system - assign to main account owner\n    const enquiry = await storage.createEnquiry({\n      title: enquiryData.title,\n      clientName: enquiryData.clientName,\n      clientEmail: enquiryData.clientEmail || null,\n      clientPhone: enquiryData.clientPhone || null,\n      eventDate: enquiryData.eventDate || new Date(),\n      venue: enquiryData.venue || null,\n      notes: enquiryData.message,\n      userId: \"43963086\", // Main account owner\n      status: 'new',\n    });\n\n    console.log('Successfully created enquiry from email:', enquiry.id);\n    \n    // Send success response to SendGrid\n    res.status(200).json({ \n      message: 'Email processed successfully', \n      enquiryId: enquiry.id \n    });\n\n  } catch (error) {\n    console.error('Error processing SendGrid webhook:', error);\n    res.status(500).json({ message: 'Failed to process email' });\n  }\n}\n\n/**\n * Mailgun Webhook Handler (alternative option)\n */\nexport async function handleMailgunWebhook(req: Request, res: Response) {\n  try {\n    console.log('Received Mailgun webhook:', req.body);\n    \n    const {\n      recipient,\n      sender,\n      subject,\n      'body-plain': bodyPlain,\n      'body-html': bodyHtml\n    } = req.body;\n\n    // Validate this is for our leads email\n    if (!recipient || !recipient.includes('leads@musobuddy.com')) {\n      console.log('Email not for leads@musobuddy.com, ignoring');\n      return res.status(200).json({ message: 'Email ignored - not for leads' });\n    }\n\n    // Parse the email content\n    const enquiryData = await parseEmailEnquiry(sender, subject, bodyPlain || bodyHtml || '');\n    \n    // Create enquiry in system - assign to main account owner\n    const enquiry = await storage.createEnquiry({\n      title: enquiryData.title,\n      clientName: enquiryData.clientName,\n      clientEmail: enquiryData.clientEmail || null,\n      clientPhone: enquiryData.clientPhone || null,\n      eventDate: enquiryData.eventDate || new Date(),\n      venue: enquiryData.venue || null,\n      notes: enquiryData.message,\n      userId: \"43963086\", // Main account owner\n      status: 'new',\n    });\n\n    console.log('Successfully created enquiry from Mailgun email:', enquiry.id);\n    \n    res.status(200).json({ \n      message: 'Email processed successfully', \n      enquiryId: enquiry.id \n    });\n\n  } catch (error) {\n    console.error('Error processing Mailgun webhook:', error);\n    res.status(500).json({ message: 'Failed to process email' });\n  }\n}","size_bytes":3867},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"‚Ä¶\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":1921},"server/invoice-manager.ts":{"content":"import { storage } from './storage';\nimport type { Invoice } from '@shared/schema';\n\nexport class InvoiceManager {\n  \n  /**\n   * Check all invoices and update overdue status\n   * Called periodically to maintain invoice status accuracy\n   */\n  async updateOverdueInvoices(): Promise<void> {\n    console.log('Starting overdue invoice check...');\n    \n    try {\n      // Get all users to check their invoices\n      // Note: In a real system, you'd batch this or use a more efficient query\n      const allInvoices = await this.getAllSentInvoices();\n      \n      const currentDate = new Date();\n      const overdueThreshold = 3; // 3 working days grace period\n      \n      for (const invoice of allInvoices) {\n        if (invoice.status === 'sent' && invoice.dueDate) {\n          const dueDate = new Date(invoice.dueDate);\n          const workingDaysOverdue = this.calculateWorkingDays(dueDate, currentDate);\n          \n          if (workingDaysOverdue >= overdueThreshold) {\n            console.log(`Marking invoice ${invoice.invoiceNumber} as overdue`);\n            await storage.updateInvoice(invoice.id, { status: 'overdue' }, invoice.userId);\n          }\n        }\n      }\n      \n      console.log('Overdue invoice check completed');\n    } catch (error) {\n      console.error('Error updating overdue invoices:', error);\n    }\n  }\n  \n  /**\n   * Calculate working days between two dates (excluding weekends)\n   */\n  private calculateWorkingDays(startDate: Date, endDate: Date): number {\n    if (endDate <= startDate) return 0;\n    \n    let workingDays = 0;\n    const currentDate = new Date(startDate);\n    \n    while (currentDate < endDate) {\n      currentDate.setDate(currentDate.getDate() + 1);\n      const dayOfWeek = currentDate.getDay();\n      \n      // Skip weekends (0 = Sunday, 6 = Saturday)\n      if (dayOfWeek !== 0 && dayOfWeek !== 6) {\n        workingDays++;\n      }\n    }\n    \n    return workingDays;\n  }\n  \n  /**\n   * Get all sent invoices across all users\n   * In production, this would be optimized with proper database queries\n   */\n  private async getAllSentInvoices(): Promise<Invoice[]> {\n    // This is a simplified approach - in production you'd use a more efficient query\n    // For now, we'll need to extend the storage interface\n    return [];\n  }\n  \n  /**\n   * Mark an invoice as paid\n   */\n  async markInvoiceAsPaid(invoiceId: number, userId: string, paidDate?: Date): Promise<boolean> {\n    try {\n      const paidAt = paidDate || new Date();\n      const updatedInvoice = await storage.updateInvoice(\n        invoiceId, \n        { status: 'paid', paidAt }, \n        userId\n      );\n      \n      if (updatedInvoice) {\n        console.log(`Invoice ${updatedInvoice.invoiceNumber} marked as paid`);\n        return true;\n      }\n      \n      return false;\n    } catch (error) {\n      console.error('Error marking invoice as paid:', error);\n      return false;\n    }\n  }\n  \n  /**\n   * Generate overdue invoice reminder\n   */\n  async generateOverdueReminder(invoiceId: number, userId: string): Promise<boolean> {\n    try {\n      const invoice = await storage.getInvoice(invoiceId, userId);\n      if (!invoice || invoice.status !== 'overdue') {\n        return false;\n      }\n      \n      // Get related contract for client details\n      let contract = null;\n      if (invoice.contractId) {\n        contract = await storage.getContract(invoice.contractId, userId);\n      }\n      \n      if (!contract?.clientEmail) {\n        console.log('No client email found for overdue reminder');\n        return false;\n      }\n      \n      // Import email functions\n      const { sendEmail } = await import('./sendgrid');\n      const { generateInvoicePDF } = await import('./pdf-generator');\n      \n      // Get user settings\n      const userSettings = await storage.getUserSettings(userId);\n      \n      // Generate PDF with overdue status\n      const pdfBuffer = await generateInvoicePDF(invoice, contract, userSettings);\n      const pdfBase64 = pdfBuffer.toString('base64');\n      \n      // Send overdue reminder email\n      const fromEmail = userSettings?.businessEmail || 'noreply@musobuddy.com';\n      const fromName = userSettings?.emailFromName || userSettings?.businessName || 'MusoBuddy';\n      \n      const daysOverdue = Math.ceil((Date.now() - new Date(invoice.dueDate).getTime()) / (1000 * 60 * 60 * 24));\n      \n      const emailSent = await sendEmail({\n        to: contract.clientEmail,\n        from: `${fromName} <${fromEmail}>`,\n        subject: `OVERDUE: Invoice ${invoice.invoiceNumber} - Payment Required`,\n        html: this.generateOverdueEmailHtml(invoice, contract, userSettings, daysOverdue),\n        text: `PAYMENT OVERDUE: Invoice ${invoice.invoiceNumber} for ¬£${invoice.amount} was due ${daysOverdue} days ago. Please arrange payment immediately to avoid further action.`,\n        attachments: [{\n          content: pdfBase64,\n          filename: `OVERDUE-Invoice-${invoice.invoiceNumber}.pdf`,\n          type: 'application/pdf',\n          disposition: 'attachment'\n        }]\n      });\n      \n      if (emailSent) {\n        console.log(`Overdue reminder sent for invoice ${invoice.invoiceNumber}`);\n        return true;\n      }\n      \n      return false;\n    } catch (error) {\n      console.error('Error sending overdue reminder:', error);\n      return false;\n    }\n  }\n  \n  /**\n   * Generate HTML for overdue email reminder\n   */\n  private generateOverdueEmailHtml(invoice: any, contract: any, userSettings: any, daysOverdue: number): string {\n    const businessName = userSettings?.businessName || 'Your Business';\n    const businessEmail = userSettings?.businessEmail || 'noreply@musobuddy.com';\n    const businessPhone = userSettings?.phone || '';\n    \n    return `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <style>\n          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\n          .header { background-color: #dc2626; color: white; padding: 20px; text-align: center; }\n          .content { padding: 30px; background-color: #fff; }\n          .warning { background-color: #fef2f2; border-left: 4px solid #dc2626; padding: 15px; margin: 20px 0; }\n          .invoice-details { background-color: #f9fafb; padding: 20px; border-radius: 8px; margin: 20px 0; }\n          .amount { font-size: 24px; font-weight: bold; color: #dc2626; }\n          .footer { background-color: #f3f4f6; padding: 20px; text-align: center; font-size: 14px; }\n        </style>\n      </head>\n      <body>\n        <div class=\"header\">\n          <h1>PAYMENT OVERDUE</h1>\n          <p>Invoice ${invoice.invoiceNumber}</p>\n        </div>\n        \n        <div class=\"content\">\n          <p>Dear ${contract.clientName},</p>\n          \n          <div class=\"warning\">\n            <strong>‚ö†Ô∏è URGENT ACTION REQUIRED</strong><br>\n            Your payment is now <strong>${daysOverdue} days overdue</strong>. Immediate payment is required to avoid further action.\n          </div>\n          \n          <div class=\"invoice-details\">\n            <h3>Invoice Details:</h3>\n            <p><strong>Invoice Number:</strong> ${invoice.invoiceNumber}</p>\n            <p><strong>Amount Due:</strong> <span class=\"amount\">¬£${invoice.amount}</span></p>\n            <p><strong>Original Due Date:</strong> ${new Date(invoice.dueDate).toLocaleDateString('en-GB')}</p>\n            <p><strong>Days Overdue:</strong> ${daysOverdue} days</p>\n            <p><strong>Event:</strong> ${new Date(invoice.performanceDate).toLocaleDateString('en-GB')}</p>\n          </div>\n          \n          <p><strong>Please arrange payment immediately using one of the following methods:</strong></p>\n          <ul>\n            <li>Bank Transfer: ${userSettings?.bankDetails || 'Contact us for bank details'}</li>\n            <li>Contact us directly: ${businessEmail}</li>\n            ${businessPhone ? `<li>Phone: ${businessPhone}</li>` : ''}\n          </ul>\n          \n          <p>If payment is not received within 7 days, we may be forced to take further action including:</p>\n          <ul>\n            <li>Additional late payment charges</li>\n            <li>Referral to debt collection</li>\n            <li>Legal action</li>\n          </ul>\n          \n          <p>If you have already made payment, please disregard this notice and contact us immediately with proof of payment.</p>\n          \n          <p>Thank you for your immediate attention to this matter.</p>\n          \n          <p>Best regards,<br>${businessName}</p>\n        </div>\n        \n        <div class=\"footer\">\n          <p>${businessName} | ${businessEmail} ${businessPhone ? `| ${businessPhone}` : ''}</p>\n          <p>This is an automated reminder. Please contact us if you have any questions.</p>\n        </div>\n      </body>\n      </html>\n    `;\n  }\n}\n\nexport const invoiceManager = new InvoiceManager();","size_bytes":8788},"server/pdf-generator.ts":{"content":"import puppeteer from 'puppeteer';\nimport type { Contract, UserSettings, Invoice } from '@shared/schema';\n\nexport async function generateContractPDF(\n  contract: Contract,\n  userSettings: UserSettings | null,\n  signatureDetails?: {\n    signedAt: Date;\n    signatureName?: string;\n    clientIpAddress?: string;\n  }\n): Promise<Buffer> {\n  const browser = await puppeteer.launch({\n    headless: true,\n    executablePath: '/nix/store/zi4f80l169xlmivz8vja8wlphq74qqk0-chromium-125.0.6422.141/bin/chromium',\n    args: [\n      '--no-sandbox', \n      '--disable-setuid-sandbox',\n      '--disable-dev-shm-usage',\n      '--disable-gpu',\n      '--no-first-run',\n      '--no-zygote',\n      '--single-process'\n    ]\n  });\n  \n  try {\n    const page = await browser.newPage();\n    \n    // Generate HTML content for the contract\n    const html = generateContractHTML(contract, userSettings, signatureDetails);\n    \n    await page.setContent(html, { waitUntil: 'networkidle0' });\n    \n    // Generate PDF\n    const pdf = await page.pdf({\n      format: 'A4',\n      printBackground: true,\n      margin: {\n        top: '1cm',\n        bottom: '1cm',\n        left: '1cm',\n        right: '1cm'\n      }\n    });\n    \n    return Buffer.from(pdf);\n  } finally {\n    await browser.close();\n  }\n}\n\nexport async function generateInvoicePDF(\n  invoice: Invoice,\n  contract: Contract | null,\n  userSettings: UserSettings | null\n): Promise<Buffer> {\n  const browser = await puppeteer.launch({\n    headless: true,\n    executablePath: '/nix/store/zi4f80l169xlmivz8vja8wlphq74qqk0-chromium-125.0.6422.141/bin/chromium',\n    args: [\n      '--no-sandbox', \n      '--disable-setuid-sandbox',\n      '--disable-dev-shm-usage',\n      '--disable-gpu',\n      '--no-first-run',\n      '--no-zygote',\n      '--single-process'\n    ]\n  });\n  \n  try {\n    const page = await browser.newPage();\n    \n    // Generate HTML content for the invoice\n    const html = generateInvoiceHTML(invoice, contract, userSettings);\n    \n    await page.setContent(html, { waitUntil: 'networkidle0' });\n    \n    // Generate PDF\n    const pdf = await page.pdf({\n      format: 'A4',\n      printBackground: true,\n      margin: {\n        top: '20px',\n        right: '20px',\n        bottom: '20px',\n        left: '20px'\n      }\n    });\n    \n    return Buffer.from(pdf);\n  } finally {\n    await browser.close();\n  }\n}\n\nfunction generateInvoiceHTML(\n  invoice: Invoice,\n  contract: Contract | null,\n  userSettings: UserSettings | null\n): string {\n  const businessName = userSettings?.businessName || 'MusoBuddy';\n  \n  return `\n    <!DOCTYPE html>\n    <html>\n    <head>\n      <meta charset=\"utf-8\">\n      <title>Invoice ${invoice.invoiceNumber}</title>\n      <style>\n        body {\n          font-family: 'Arial', sans-serif;\n          margin: 0;\n          padding: 20px;\n          color: #333;\n          line-height: 1.6;\n        }\n        .header {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          margin-bottom: 40px;\n          border-bottom: 3px solid #0EA5E9;\n          padding-bottom: 20px;\n        }\n        .logo {\n          font-size: 32px;\n          font-weight: bold;\n          color: #0EA5E9;\n        }\n        .invoice-details {\n          text-align: right;\n        }\n        .invoice-number {\n          font-size: 24px;\n          font-weight: bold;\n          color: #333;\n          margin-bottom: 5px;\n        }\n        .invoice-date {\n          color: #666;\n          font-size: 14px;\n        }\n        .billing-section {\n          display: flex;\n          justify-content: space-between;\n          margin-bottom: 40px;\n        }\n        .billing-info {\n          width: 45%;\n        }\n        .billing-info h3 {\n          color: #333;\n          margin-bottom: 15px;\n          font-size: 16px;\n          text-transform: uppercase;\n          letter-spacing: 1px;\n        }\n        .billing-info p {\n          margin: 5px 0;\n          color: #666;\n        }\n        .billing-info strong {\n          color: #333;\n        }\n        .items-table {\n          width: 100%;\n          border-collapse: collapse;\n          margin-bottom: 30px;\n        }\n        .items-table th {\n          background-color: #f8f9fa;\n          padding: 15px;\n          text-align: left;\n          border-bottom: 2px solid #dee2e6;\n          font-weight: bold;\n          color: #333;\n        }\n        .items-table td {\n          padding: 15px;\n          border-bottom: 1px solid #dee2e6;\n        }\n        .items-table .amount {\n          text-align: right;\n          font-weight: bold;\n        }\n        .total-section {\n          text-align: right;\n          margin-top: 30px;\n        }\n        .total-row {\n          display: flex;\n          justify-content: flex-end;\n          margin-bottom: 8px;\n        }\n        .total-label {\n          width: 150px;\n          text-align: right;\n          padding-right: 20px;\n          color: #666;\n        }\n        .total-amount {\n          width: 100px;\n          text-align: right;\n          font-weight: bold;\n        }\n        .grand-total {\n          font-size: 20px;\n          color: #0EA5E9;\n          border-top: 2px solid #0EA5E9;\n          padding-top: 15px;\n          margin-top: 15px;\n        }\n        .payment-info {\n          margin-top: 40px;\n          padding: 20px;\n          background-color: #f8f9fa;\n          border-radius: 8px;\n        }\n        .payment-info h3 {\n          color: #333;\n          margin-bottom: 15px;\n        }\n        .payment-info p {\n          margin: 5px 0;\n          color: #666;\n        }\n        .terms {\n          margin-top: 30px;\n          padding-top: 20px;\n          border-top: 1px solid #dee2e6;\n        }\n        .terms h3 {\n          color: #333;\n          margin-bottom: 10px;\n        }\n        .terms p {\n          color: #666;\n          line-height: 1.5;\n        }\n        .status-badge {\n          display: inline-block;\n          padding: 5px 12px;\n          border-radius: 20px;\n          font-size: 12px;\n          font-weight: bold;\n          text-transform: uppercase;\n          letter-spacing: 1px;\n        }\n        .status-draft {\n          background-color: #fef3c7;\n          color: #92400e;\n        }\n        .status-sent {\n          background-color: #dbeafe;\n          color: #1e40af;\n        }\n        .status-paid {\n          background-color: #d1fae5;\n          color: #065f46;\n        }\n      </style>\n    </head>\n    <body>\n      <div class=\"header\">\n        <div class=\"logo\">${businessName}</div>\n        <div class=\"invoice-details\">\n          <div class=\"invoice-number\">Invoice ${invoice.invoiceNumber}</div>\n          <div class=\"invoice-date\">${new Date(invoice.createdAt || '').toLocaleDateString('en-GB')}</div>\n          <div style=\"margin-top: 10px;\">\n            <span class=\"status-badge status-${invoice.status}\">${invoice.status}</span>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"billing-section\">\n        <div class=\"billing-info\">\n          <h3>From:</h3>\n          <p><strong>${businessName}</strong></p>\n          ${userSettings?.businessAddress ? `<p>${userSettings.businessAddress.replace(/\\n/g, '<br>')}</p>` : ''}\n          ${userSettings?.phone ? `<p>Phone: ${userSettings.phone}</p>` : ''}\n          ${userSettings?.businessEmail ? `<p>Email: ${userSettings.businessEmail}</p>` : ''}\n          ${userSettings?.website ? `<p>Website: ${userSettings.website}</p>` : ''}\n        </div>\n        <div class=\"billing-info\">\n          <h3>Bill To:</h3>\n          <p><strong>${invoice.clientName}</strong></p>\n          ${contract?.clientEmail ? `<p>${contract.clientEmail}</p>` : ''}\n          ${contract?.clientPhone ? `<p>${contract.clientPhone}</p>` : ''}\n          ${invoice.businessAddress ? `<p>${invoice.businessAddress.replace(/\\n/g, '<br>')}</p>` : ''}\n        </div>\n      </div>\n\n      <table class=\"items-table\">\n        <thead>\n          <tr>\n            <th>Description</th>\n            <th>Event Date</th>\n            <th>Performance Fee</th>\n            <th>Deposit Paid</th>\n            <th class=\"amount\">Amount Due</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>Music Performance - ${invoice.clientName}</td>\n            <td>${invoice.performanceDate ? new Date(invoice.performanceDate).toLocaleDateString('en-GB') : 'TBD'}</td>\n            <td>¬£${parseFloat(invoice.performanceFee || '0').toFixed(2)}</td>\n            <td>¬£${parseFloat(invoice.depositPaid || '0').toFixed(2)}</td>\n            <td class=\"amount\">¬£${parseFloat(invoice.amount).toFixed(2)}</td>\n          </tr>\n        </tbody>\n      </table>\n\n      <div class=\"total-section\">\n        <div class=\"total-row\">\n          <div class=\"total-label\">Performance Fee:</div>\n          <div class=\"total-amount\">¬£${parseFloat(invoice.performanceFee || '0').toFixed(2)}</div>\n        </div>\n        <div class=\"total-row\">\n          <div class=\"total-label\">Deposit Paid:</div>\n          <div class=\"total-amount\">-¬£${parseFloat(invoice.depositPaid || '0').toFixed(2)}</div>\n        </div>\n        <div class=\"total-row grand-total\">\n          <div class=\"total-label\">Total Due:</div>\n          <div class=\"total-amount\">¬£${parseFloat(invoice.amount).toFixed(2)}</div>\n        </div>\n      </div>\n\n      <div class=\"payment-info\">\n        <h3>Payment Information</h3>\n        <p><strong>Due Date:</strong> ${new Date(invoice.dueDate).toLocaleDateString('en-GB')}</p>\n        ${userSettings?.bankDetails ? `<p><strong>Bank Details:</strong><br>${userSettings.bankDetails.replace(/\\n/g, '<br>')}</p>` : ''}\n      </div>\n\n      <div class=\"terms\">\n        <h3>Terms & Conditions</h3>\n        <p>${userSettings?.defaultTerms || 'Payment is due within 30 days of the invoice date. Thank you for your business!'}</p>\n      </div>\n    </body>\n    </html>\n  `;\n}\n\nfunction generateContractHTML(\n  contract: Contract,\n  userSettings: UserSettings | null,\n  signatureDetails?: {\n    signedAt: Date;\n    signatureName?: string;\n    clientIpAddress?: string;\n  }\n): string {\n  const businessName = userSettings?.businessName || 'MusoBuddy';\n  const businessAddress = userSettings?.businessAddress || '';\n  const businessPhone = userSettings?.phone || '';\n  const businessEmail = userSettings?.businessEmail || '';\n  \n  return `\n    <!DOCTYPE html>\n    <html>\n    <head>\n      <meta charset=\"utf-8\">\n      <title>Performance Contract ${contract.contractNumber}</title>\n      <style>\n        body {\n          font-family: Arial, sans-serif;\n          line-height: 1.6;\n          color: #333;\n          max-width: 800px;\n          margin: 0 auto;\n          padding: 20px;\n        }\n        .header {\n          text-align: center;\n          border-bottom: 2px solid #333;\n          padding-bottom: 20px;\n          margin-bottom: 30px;\n        }\n        .business-details {\n          margin-bottom: 30px;\n        }\n        .contract-details {\n          margin-bottom: 30px;\n        }\n        .terms {\n          margin-bottom: 30px;\n        }\n        .signature-section {\n          margin-top: 50px;\n          border-top: 1px solid #ccc;\n          padding-top: 30px;\n        }\n        .signature-box {\n          border: 1px solid #333;\n          padding: 20px;\n          margin: 20px 0;\n          background-color: #f9f9f9;\n        }\n        .signed-box {\n          border: 2px solid #4CAF50;\n          background-color: #e8f5e8;\n        }\n        .party-section {\n          margin-bottom: 30px;\n        }\n        table {\n          width: 100%;\n          border-collapse: collapse;\n          margin-bottom: 20px;\n        }\n        th, td {\n          border: 1px solid #ddd;\n          padding: 12px;\n          text-align: left;\n        }\n        th {\n          background-color: #f4f4f4;\n          font-weight: bold;\n        }\n        .amount {\n          font-weight: bold;\n          color: #2563eb;\n        }\n        .status-badge {\n          display: inline-block;\n          padding: 4px 12px;\n          border-radius: 20px;\n          font-size: 12px;\n          font-weight: bold;\n          text-transform: uppercase;\n        }\n        .status-signed {\n          background-color: #dcfce7;\n          color: #166534;\n        }\n        .status-sent {\n          background-color: #fef3c7;\n          color: #92400e;\n        }\n      </style>\n    </head>\n    <body>\n      <div class=\"header\">\n        <h1>Performance Contract</h1>\n        <h2>${contract.contractNumber}</h2>\n        <div class=\"status-badge ${contract.status === 'signed' ? 'status-signed' : 'status-sent'}\">\n          ${contract.status.toUpperCase()}\n        </div>\n      </div>\n\n      <div class=\"business-details\">\n        <h3>Performer Details</h3>\n        <p><strong>${businessName}</strong></p>\n        ${businessAddress ? `<p>${businessAddress}</p>` : ''}\n        ${businessPhone ? `<p>Phone: ${businessPhone}</p>` : ''}\n        ${businessEmail ? `<p>Email: ${businessEmail}</p>` : ''}\n      </div>\n\n      <div class=\"contract-details\">\n        <h3>Event Details</h3>\n        <table>\n          <tr>\n            <th>Client Name</th>\n            <td>${contract.clientName}</td>\n          </tr>\n          <tr>\n            <th>Client Email</th>\n            <td>${contract.clientEmail}</td>\n          </tr>\n          <tr>\n            <th>Event Date</th>\n            <td>${new Date(contract.eventDate).toLocaleDateString('en-GB', { \n              weekday: 'long', \n              year: 'numeric', \n              month: 'long', \n              day: 'numeric' \n            })}</td>\n          </tr>\n          <tr>\n            <th>Event Time</th>\n            <td>${contract.eventTime}</td>\n          </tr>\n          <tr>\n            <th>Venue</th>\n            <td>${contract.venue}</td>\n          </tr>\n          <tr>\n            <th>Performance Fee</th>\n            <td class=\"amount\">¬£${contract.fee}</td>\n          </tr>\n        </table>\n      </div>\n\n      <div class=\"terms\">\n        <h3>Terms and Conditions</h3>\n        <div style=\"white-space: pre-wrap; padding: 15px; background-color: #f9f9f9; border-radius: 5px;\">\n${contract.terms}\n        </div>\n      </div>\n\n      <div class=\"signature-section\">\n        <h3>Signatures</h3>\n        \n        <div class=\"party-section\">\n          <h4>Performer</h4>\n          <div class=\"signature-box signed-box\">\n            <p><strong>Signed by:</strong> ${businessName}</p>\n            <p><strong>Date:</strong> ${new Date(contract.createdAt).toLocaleDateString('en-GB')}</p>\n            <p><strong>Status:</strong> Agreed by sending contract</p>\n          </div>\n        </div>\n\n        <div class=\"party-section\">\n          <h4>Client</h4>\n          <div class=\"signature-box ${contract.status === 'signed' ? 'signed-box' : ''}\">\n            ${contract.status === 'signed' && signatureDetails ? `\n              <p><strong>Signed by:</strong> ${signatureDetails.signatureName || 'Digital Signature'}</p>\n              <p><strong>Date:</strong> ${signatureDetails.signedAt.toLocaleDateString('en-GB')} at ${signatureDetails.signedAt.toLocaleTimeString('en-GB')}</p>\n              <p><strong>Status:</strong> Digitally Signed</p>\n            ` : `\n              <p><strong>Status:</strong> Awaiting Signature</p>\n              <p>This contract has been sent to ${contract.clientEmail} for digital signature.</p>\n            `}\n          </div>\n        </div>\n      </div>\n\n      <div style=\"margin-top: 50px; padding: 20px; background-color: #f0f0f0; border-radius: 5px; font-size: 12px; color: #666;\">\n        <p><strong>Document Information:</strong></p>\n        <p>Contract Number: ${contract.contractNumber}</p>\n        <p>Generated: ${new Date().toLocaleDateString('en-GB')} at ${new Date().toLocaleTimeString('en-GB')}</p>\n        <p>This is a legally binding agreement between the parties named above.</p>\n      </div>\n    </body>\n    </html>\n  `;\n}","size_bytes":15799},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user?.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4255},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { insertEnquirySchema, insertContractSchema, insertInvoiceSchema, insertBookingSchema, insertComplianceDocumentSchema } from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Dashboard stats\n  app.get('/api/dashboard/stats', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const stats = await storage.getDashboardStats(userId);\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching dashboard stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  // Public quick-add endpoint for mobile access (no auth required) - MUST BE FIRST\n  app.post('/api/enquiries/quick-add', async (req: any, res) => {\n    try {\n      console.log(\"Quick-add endpoint hit with data:\", req.body);\n      // For quick-add, we need to associate with the account owner\n      // In a real app, this would be configurable or have a different approach\n      const userId = \"43963086\"; // Your user ID from auth logs\n      const data = { ...req.body, userId };\n      \n      // Convert eventDate string to Date if present\n      if (data.eventDate && typeof data.eventDate === 'string') {\n        data.eventDate = new Date(data.eventDate);\n      }\n      \n      const enquiryData = insertEnquirySchema.parse(data);\n      const enquiry = await storage.createEnquiry(enquiryData);\n      console.log(\"Quick-add enquiry created:\", enquiry);\n      res.status(201).json(enquiry);\n    } catch (error) {\n      console.error(\"Error creating enquiry via quick-add:\", error);\n      res.status(500).json({ message: \"Failed to create enquiry\", error: error.message });\n    }\n  });\n\n  // Enquiry routes\n  app.get('/api/enquiries', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const enquiries = await storage.getEnquiries(userId);\n      res.json(enquiries);\n    } catch (error) {\n      console.error(\"Error fetching enquiries:\", error);\n      res.status(500).json({ message: \"Failed to fetch enquiries\" });\n    }\n  });\n\n  app.get('/api/enquiries/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const id = parseInt(req.params.id);\n      const enquiry = await storage.getEnquiry(id, userId);\n      if (!enquiry) {\n        return res.status(404).json({ message: \"Enquiry not found\" });\n      }\n      res.json(enquiry);\n    } catch (error) {\n      console.error(\"Error fetching enquiry:\", error);\n      res.status(500).json({ message: \"Failed to fetch enquiry\" });\n    }\n  });\n\n  app.post('/api/enquiries', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const data = { ...req.body, userId };\n      \n      // Convert eventDate string to Date if present\n      if (data.eventDate && typeof data.eventDate === 'string') {\n        data.eventDate = new Date(data.eventDate);\n      }\n      \n      const enquiryData = insertEnquirySchema.parse(data);\n      const enquiry = await storage.createEnquiry(enquiryData);\n      res.status(201).json(enquiry);\n    } catch (error) {\n      console.error(\"Error creating enquiry:\", error);\n      res.status(500).json({ message: \"Failed to create enquiry\" });\n    }\n  });\n\n  app.patch('/api/enquiries/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const id = parseInt(req.params.id);\n      const updates = req.body;\n      const enquiry = await storage.updateEnquiry(id, updates, userId);\n      if (!enquiry) {\n        return res.status(404).json({ message: \"Enquiry not found\" });\n      }\n      res.json(enquiry);\n    } catch (error) {\n      console.error(\"Error updating enquiry:\", error);\n      res.status(500).json({ message: \"Failed to update enquiry\" });\n    }\n  });\n\n  app.delete('/api/enquiries/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const id = parseInt(req.params.id);\n      const success = await storage.deleteEnquiry(id, userId);\n      if (!success) {\n        return res.status(404).json({ message: \"Enquiry not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting enquiry:\", error);\n      res.status(500).json({ message: \"Failed to delete enquiry\" });\n    }\n  });\n\n  // Contract PDF download route\n  app.get('/api/contracts/:id/pdf', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const contractId = parseInt(req.params.id);\n      \n      const contract = await storage.getContract(contractId, userId);\n      if (!contract) {\n        return res.status(404).json({ message: \"Contract not found\" });\n      }\n      \n      const userSettings = await storage.getUserSettings(userId);\n      const { generateContractPDF } = await import('./pdf-generator');\n      \n      const signatureDetails = contract.signedAt ? {\n        signedAt: contract.signedAt,\n        signatureName: contract.clientName, // We'll store this properly later\n        clientIpAddress: 'Digital signature'\n      } : undefined;\n      \n      const pdfBuffer = await generateContractPDF(contract, userSettings, signatureDetails);\n      \n      res.setHeader('Content-Type', 'application/pdf');\n      res.setHeader('Content-Disposition', `attachment; filename=\"Contract-${contract.contractNumber}.pdf\"`);\n      res.send(pdfBuffer);\n      \n    } catch (error) {\n      console.error(\"Error generating contract PDF:\", error);\n      res.status(500).json({ message: \"Failed to generate PDF\" });\n    }\n  });\n\n  // Public contract PDF download (for clients)\n  app.get('/api/contracts/public/:id/pdf', async (req, res) => {\n    try {\n      const contractId = parseInt(req.params.id);\n      \n      const contract = await storage.getContractById(contractId);\n      if (!contract) {\n        return res.status(404).json({ message: \"Contract not found\" });\n      }\n      \n      // Only allow PDF download for signed contracts\n      if (contract.status !== 'signed') {\n        return res.status(403).json({ message: \"Contract must be signed to download PDF\" });\n      }\n      \n      const userSettings = await storage.getUserSettings(contract.userId);\n      const { generateContractPDF } = await import('./pdf-generator');\n      \n      const signatureDetails = contract.signedAt ? {\n        signedAt: contract.signedAt,\n        signatureName: contract.clientName,\n        clientIpAddress: 'Digital signature'\n      } : undefined;\n      \n      const pdfBuffer = await generateContractPDF(contract, userSettings, signatureDetails);\n      \n      res.setHeader('Content-Type', 'application/pdf');\n      res.setHeader('Content-Disposition', `attachment; filename=\"Contract-${contract.contractNumber}.pdf\"`);\n      res.send(pdfBuffer);\n      \n    } catch (error) {\n      console.error(\"Error generating public contract PDF:\", error);\n      res.status(500).json({ message: \"Failed to generate PDF\" });\n    }\n  });\n\n  // Invoice PDF download route\n  app.get('/api/invoices/:id/pdf', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const invoiceId = parseInt(req.params.id);\n      \n      const invoice = await storage.getInvoice(invoiceId, userId);\n      if (!invoice) {\n        return res.status(404).json({ message: \"Invoice not found\" });\n      }\n      \n      // Get related contract for client details\n      let contract = null;\n      if (invoice.contractId) {\n        contract = await storage.getContract(invoice.contractId, userId);\n      }\n      \n      const userSettings = await storage.getUserSettings(userId);\n      const { generateInvoicePDF } = await import('./pdf-generator');\n      \n      const pdfBuffer = await generateInvoicePDF(invoice, contract, userSettings);\n      \n      res.setHeader('Content-Type', 'application/pdf');\n      res.setHeader('Content-Disposition', `attachment; filename=\"Invoice-${invoice.invoiceNumber}.pdf\"`);\n      res.send(pdfBuffer);\n      \n    } catch (error) {\n      console.error(\"Error generating invoice PDF:\", error);\n      res.status(500).json({ message: \"Failed to generate PDF\" });\n    }\n  });\n\n  // Contract routes\n  app.get('/api/contracts', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const contracts = await storage.getContracts(userId);\n      res.json(contracts);\n    } catch (error) {\n      console.error(\"Error fetching contracts:\", error);\n      res.status(500).json({ message: \"Failed to fetch contracts\" });\n    }\n  });\n\n  app.post('/api/contracts', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const data = { ...req.body, userId };\n      \n      // Convert eventDate string to Date if present\n      if (data.eventDate && typeof data.eventDate === 'string') {\n        data.eventDate = new Date(data.eventDate);\n      }\n      \n      const contractData = insertContractSchema.parse(data);\n      const contract = await storage.createContract(contractData);\n      res.status(201).json(contract);\n    } catch (error) {\n      console.error(\"Error creating contract:\", error);\n      res.status(500).json({ message: \"Failed to create contract\" });\n    }\n  });\n\n\n\n  // Invoice routes\n  app.get('/api/invoices', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const invoices = await storage.getInvoices(userId);\n      res.json(invoices);\n    } catch (error) {\n      console.error(\"Error fetching invoices:\", error);\n      res.status(500).json({ message: \"Failed to fetch invoices\" });\n    }\n  });\n\n  app.post('/api/invoices', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      console.log(\"Received invoice data:\", req.body);\n      \n      // Prepare the invoice data with all required fields\n      const invoiceData = {\n        userId,\n        invoiceNumber: req.body.invoiceNumber,\n        contractId: parseInt(req.body.contractId.toString()),\n        clientName: req.body.clientName,\n        businessAddress: req.body.businessAddress || null,\n        amount: req.body.amount.toString(),\n        dueDate: new Date(req.body.dueDate),\n        performanceDate: req.body.performanceDate ? new Date(req.body.performanceDate) : null,\n        performanceFee: req.body.performanceFee || \"0\",\n        depositPaid: req.body.depositPaid || \"0\",\n        status: \"draft\",\n      };\n      \n      console.log(\"Processed invoice data:\", invoiceData);\n      \n      // Validate against schema\n      console.log(\"Validating invoice data...\");\n      const validatedData = insertInvoiceSchema.parse(invoiceData);\n      console.log(\"Validation successful:\", validatedData);\n      \n      const invoice = await storage.createInvoice(validatedData);\n      console.log(\"Invoice created successfully:\", invoice);\n      res.status(201).json(invoice);\n    } catch (error: any) {\n      console.error(\"Error creating invoice:\", error);\n      if (error.name === 'ZodError') {\n        console.error(\"Validation errors:\", error.errors);\n        console.error(\"Full error details:\", JSON.stringify(error, null, 2));\n        res.status(400).json({ message: \"Validation failed\", errors: error.errors });\n      } else {\n        console.error(\"Other error:\", error.message, error.stack);\n        res.status(500).json({ message: \"Failed to create invoice\", error: error.message });\n      }\n    }\n  });\n\n  // Update invoice\n  app.patch('/api/invoices/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const invoiceId = parseInt(req.params.id);\n      \n      const updatedInvoice = await storage.updateInvoice(invoiceId, req.body, userId);\n      if (!updatedInvoice) {\n        return res.status(404).json({ message: \"Invoice not found\" });\n      }\n      \n      res.json(updatedInvoice);\n    } catch (error) {\n      console.error(\"Error updating invoice:\", error);\n      res.status(500).json({ message: \"Failed to update invoice\" });\n    }\n  });\n\n  // Test endpoint for debugging\n  app.post('/api/test-email', async (req: any, res) => {\n    console.log('TEST EMAIL ENDPOINT REACHED');\n    res.json({ success: true, message: 'Test endpoint working' });\n  });\n\n  // Send invoice email\n  app.post('/api/invoices/send-email', isAuthenticated, async (req: any, res) => {\n    try {\n      console.log('=== INVOICE EMAIL SEND REQUEST ===');\n      console.log('Request body:', req.body);\n      const userId = req.user.claims.sub;\n      const { invoiceId } = req.body;\n      \n      // Get the invoice details\n      const invoice = await storage.getInvoice(invoiceId, userId);\n      if (!invoice) {\n        return res.status(404).json({ message: \"Invoice not found\" });\n      }\n\n      // Get related contract for client email\n      let contract = null;\n      if (invoice.contractId) {\n        contract = await storage.getContract(invoice.contractId, userId);\n      }\n\n      // Get user settings for business details\n      const userSettings = await storage.getUserSettings(userId);\n\n      if (!contract?.clientEmail) {\n        return res.status(400).json({ message: \"Client email not found. Please add client email to the contract.\" });\n      }\n\n      // First update invoice status to sent\n      const updatedInvoice = await storage.updateInvoice(invoiceId, { status: \"sent\" }, userId);\n      if (!updatedInvoice) {\n        return res.status(404).json({ message: \"Failed to update invoice status\" });\n      }\n\n      // Import SendGrid functions\n      const { sendEmail } = await import('./sendgrid');\n      \n      // Smart email handling - use authenticated domain for sending, Gmail for replies\n      const userBusinessEmail = userSettings?.businessEmail;\n      const fromName = userSettings?.emailFromName || userSettings?.businessName || 'MusoBuddy User';\n      \n      // Always use authenticated domain for FROM to avoid SPF issues\n      const fromEmail = 'noreply@musobuddy.com';\n      \n      // If user has Gmail (or other non-authenticated domain), use it as reply-to\n      const replyToEmail = userBusinessEmail && !userBusinessEmail.includes('@musobuddy.com') ? userBusinessEmail : null;\n      \n      console.log('=== EMAIL DETAILS ===');\n      console.log('To:', contract.clientEmail);\n      console.log('From:', `${fromName} <${fromEmail}>`);\n      console.log('Reply-To:', replyToEmail);\n      console.log('Subject:', `Invoice ${updatedInvoice.invoiceNumber} from ${fromName}`);\n      \n      const emailData: any = {\n        to: contract.clientEmail,\n        from: `${fromName} <${fromEmail}>`,\n        subject: `Invoice ${updatedInvoice.invoiceNumber} from ${fromName}`,\n        html: `<h1>Invoice ${updatedInvoice.invoiceNumber}</h1><p>Amount: ¬£${updatedInvoice.amount}</p><p>Due Date: ${new Date(updatedInvoice.dueDate).toLocaleDateString('en-GB')}</p>`,\n        text: `Invoice ${updatedInvoice.invoiceNumber}. Amount: ¬£${updatedInvoice.amount}. Due date: ${new Date(updatedInvoice.dueDate).toLocaleDateString('en-GB')}.`\n      };\n      \n      // Add reply-to if user has Gmail or other external email\n      if (replyToEmail) {\n        emailData.replyTo = replyToEmail;\n      }\n      \n      const emailSent = await sendEmail(emailData);\n\n      if (emailSent) {\n        console.log(`Invoice ${updatedInvoice.invoiceNumber} sent successfully to ${contract.clientEmail}`);\n        res.json({ \n          message: \"Invoice sent successfully via email\",\n          debug: {\n            invoiceId: invoiceId,\n            clientEmail: contract.clientEmail,\n            invoiceNumber: updatedInvoice.invoiceNumber,\n            emailSent: true\n          }\n        });\n      } else {\n        // If email failed, revert status back to draft\n        await storage.updateInvoice(invoiceId, { status: \"draft\" }, userId);\n        res.status(500).json({ \n          message: \"Failed to send email. Please check your email settings.\",\n          debug: {\n            invoiceId: invoiceId,\n            clientEmail: contract.clientEmail,\n            invoiceNumber: updatedInvoice.invoiceNumber,\n            emailSent: false\n          }\n        });\n      }\n    } catch (error: any) {\n      console.error(\"Error sending invoice email:\", error);\n      res.status(500).json({ \n        message: \"Failed to send invoice email\", \n        error: error.message || \"Unknown error\",\n        debug: { invoiceId: req.body.invoiceId }\n      });\n    }\n  });\n\n  // Send contract email\n  app.post('/api/contracts/send-email', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { contractId } = req.body;\n      \n      // Get the contract details\n      const contract = await storage.getContract(contractId, userId);\n      if (!contract) {\n        return res.status(404).json({ message: \"Contract not found\" });\n      }\n\n      // Get user settings for business details\n      const userSettings = await storage.getUserSettings(userId);\n\n      if (!contract?.clientEmail) {\n        return res.status(400).json({ message: \"Client email not found. Please add client email to the contract.\" });\n      }\n\n      // Import SendGrid functions\n      const { sendEmail, generateContractHtml } = await import('./sendgrid');\n      \n      // Generate HTML content\n      const htmlContent = generateContractHtml(contract, userSettings);\n      \n      // Smart email handling - use authenticated domain for sending, Gmail for replies\n      const userBusinessEmail = userSettings?.businessEmail;\n      const fromName = userSettings?.emailFromName || userSettings?.businessName || 'MusoBuddy User';\n      \n      // Always use authenticated domain for FROM to avoid SPF issues\n      const fromEmail = 'noreply@musobuddy.com';\n      \n      // If user has Gmail (or other non-authenticated domain), use it as reply-to\n      const replyToEmail = userBusinessEmail && !userBusinessEmail.includes('@musobuddy.com') ? userBusinessEmail : null;\n      \n      console.log('=== CONTRACT EMAIL DETAILS ===');\n      console.log('To:', contract.clientEmail);\n      console.log('From:', `${fromName} <${fromEmail}>`);\n      console.log('Reply-To:', replyToEmail);\n      console.log('Subject:', `Performance Contract ${contract.contractNumber} from ${fromName}`);\n      \n      const emailData: any = {\n        to: contract.clientEmail,\n        from: `${fromName} <${fromEmail}>`,\n        subject: `Performance Contract ${contract.contractNumber} from ${fromName}`,\n        html: htmlContent,\n        text: `Please find attached your performance contract ${contract.contractNumber}. Event date: ${new Date(contract.eventDate).toLocaleDateString('en-GB')}. Fee: ¬£${contract.fee}.`\n      };\n      \n      // Add reply-to if user has Gmail or other external email\n      if (replyToEmail) {\n        emailData.replyTo = replyToEmail;\n      }\n      \n      const emailSent = await sendEmail(emailData);\n\n      if (emailSent) {\n        // Update contract status to sent\n        await storage.updateContract(contractId, { status: \"sent\" }, userId);\n        console.log(`Contract ${contract.contractNumber} sent successfully to ${contract.clientEmail}`);\n        res.json({ message: \"Contract sent successfully via email\" });\n      } else {\n        res.status(500).json({ message: \"Failed to send email. Please check your email settings.\" });\n      }\n    } catch (error) {\n      console.error(\"Error sending contract email:\", error);\n      res.status(500).json({ message: \"Failed to send contract email\" });\n    }\n  });\n\n  // Public contract routes for signing (no authentication required)\n  app.get('/api/contracts/public/:id', async (req, res) => {\n    try {\n      const contractId = parseInt(req.params.id);\n      \n      // Get contract without user authentication\n      const contract = await storage.getContractById(contractId);\n      if (!contract) {\n        return res.status(404).json({ message: \"Contract not found\" });\n      }\n      \n      // Only return contracts that are sent (ready for signing) or already signed (for confirmation)\n      if (contract.status !== 'sent' && contract.status !== 'signed') {\n        return res.status(404).json({ message: \"Contract not available for signing\" });\n      }\n      \n      res.json(contract);\n    } catch (error) {\n      console.error(\"Error fetching public contract:\", error);\n      res.status(500).json({ message: \"Failed to fetch contract\" });\n    }\n  });\n\n  app.get('/api/settings/public/:userId', async (req, res) => {\n    try {\n      const userId = req.params.userId;\n      const settings = await storage.getUserSettings(userId);\n      \n      // Return only business-facing settings for contract display\n      const publicSettings = settings ? {\n        businessName: settings.businessName,\n        businessEmail: settings.businessEmail,\n        businessAddress: settings.businessAddress,\n        phone: settings.phone,\n        website: settings.website\n      } : null;\n      \n      res.json(publicSettings);\n    } catch (error) {\n      console.error(\"Error fetching public settings:\", error);\n      res.status(500).json({ message: \"Failed to fetch settings\" });\n    }\n  });\n\n  app.post('/api/contracts/sign/:id', async (req, res) => {\n    try {\n      const contractId = parseInt(req.params.id);\n      const { signatureName } = req.body;\n      \n      console.log('=== CONTRACT SIGNING ATTEMPT ===');\n      console.log('Contract ID:', contractId);\n      console.log('Signature name:', signatureName);\n      \n      if (!signatureName || !signatureName.trim()) {\n        console.log('ERROR: Missing signature name');\n        return res.status(400).json({ message: \"Signature name is required\" });\n      }\n      \n      // Get contract\n      const contract = await storage.getContractById(contractId);\n      console.log('Contract found:', contract ? 'YES' : 'NO');\n      console.log('Contract status:', contract?.status);\n      console.log('Contract data:', contract);\n      \n      if (!contract) {\n        console.log('ERROR: Contract not found');\n        return res.status(404).json({ message: \"Contract not found\" });\n      }\n      \n      if (contract.status !== 'sent') {\n        console.log('ERROR: Contract not in sent status. Current status:', contract.status);\n        return res.status(400).json({ message: `Contract is not available for signing. Current status: ${contract.status}` });\n      }\n      \n      // Get client IP for audit trail\n      const clientIP = req.ip || req.connection.remoteAddress || 'unknown';\n      \n      // Update contract with signature\n      const signedContract = await storage.signContract(contractId, {\n        signatureName: signatureName.trim(),\n        clientIP,\n        signedAt: new Date()\n      });\n      \n      if (!signedContract) {\n        return res.status(500).json({ message: \"Failed to sign contract\" });\n      }\n      \n      // Generate PDF and send confirmation emails with attachments\n      try {\n        const userSettings = await storage.getUserSettings(contract.userId);\n        const { sendEmail } = await import('./sendgrid');\n        const { generateContractPDF } = await import('./pdf-generator');\n        \n        // Smart email handling - use authenticated domain for sending, Gmail for replies\n        const userBusinessEmail = userSettings?.businessEmail;\n        const fromName = userSettings?.emailFromName || userSettings?.businessName || 'MusoBuddy User';\n        \n        // Always use authenticated domain for FROM to avoid SPF issues\n        const fromEmail = 'noreply@musobuddy.com';\n        \n        // If user has Gmail (or other non-authenticated domain), use it as reply-to\n        const replyToEmail = userBusinessEmail && !userBusinessEmail.includes('@musobuddy.com') ? userBusinessEmail : null;\n        \n        console.log('=== CONTRACT SIGNING EMAIL DETAILS ===');\n        console.log('To:', contract.clientEmail);\n        console.log('From:', `${fromName} <${fromEmail}>`);\n        console.log('Reply-To:', replyToEmail);\n        console.log('Subject:', `Contract ${contract.contractNumber} Successfully Signed - Copy Attached`);\n        \n        // Generate signed contract PDF\n        const signatureDetails = {\n          signedAt: new Date(),\n          signatureName: signatureName.trim(),\n          clientIpAddress: clientIP\n        };\n        \n        const pdfBuffer = await generateContractPDF(signedContract, userSettings || null, signatureDetails);\n        const pdfBase64 = pdfBuffer.toString('base64');\n        \n        // Email to client with PDF attachment\n        const clientEmailData: any = {\n          to: contract.clientEmail,\n          from: `${fromName} <${fromEmail}>`,\n          subject: `Contract ${contract.contractNumber} Successfully Signed - Copy Attached`,\n          html: `\n            <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n              <h2 style=\"color: #4CAF50;\">Contract Signed Successfully ‚úì</h2>\n              <p>Dear ${contract.clientName},</p>\n              <p>Your performance contract <strong>${contract.contractNumber}</strong> has been successfully signed.</p>\n              \n              <div style=\"background-color: #f9f9f9; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n                <h3 style=\"margin-top: 0; color: #333;\">Event Details</h3>\n                <ul style=\"list-style: none; padding: 0;\">\n                  <li><strong>Date:</strong> ${new Date(contract.eventDate).toLocaleDateString('en-GB')}</li>\n                  <li><strong>Time:</strong> ${contract.eventTime}</li>\n                  <li><strong>Venue:</strong> ${contract.venue}</li>\n                  <li><strong>Fee:</strong> ¬£${contract.fee}</li>\n                </ul>\n              </div>\n              \n              <p style=\"background-color: #e8f5e8; padding: 15px; border-radius: 5px; border-left: 4px solid #4CAF50;\">\n                üìé <strong>Your signed contract is attached as a PDF for your records.</strong>\n              </p>\n              \n              <p>We look forward to performing at your event!</p>\n              <p>Best regards,<br><strong>${userSettings?.businessName || 'MusoBuddy'}</strong></p>\n            </div>\n          `,\n          text: `Contract ${contract.contractNumber} has been successfully signed. Event: ${new Date(contract.eventDate).toLocaleDateString('en-GB')} at ${contract.venue}. Signed contract PDF is attached.`,\n          attachments: [{\n            content: pdfBase64,\n            filename: `Contract-${contract.contractNumber}-Signed.pdf`,\n            type: 'application/pdf',\n            disposition: 'attachment'\n          }]\n        };\n        \n        // Add reply-to if user has Gmail or other external email\n        if (replyToEmail) {\n          clientEmailData.replyTo = replyToEmail;\n        }\n        \n        await sendEmail(clientEmailData);\n        \n        // Email to performer (business owner) with PDF attachment\n        if (userSettings?.businessEmail) {\n          const performerEmailData: any = {\n            to: userSettings.businessEmail,\n            from: `${fromName} <${fromEmail}>`,\n            subject: `Contract ${contract.contractNumber} Signed by Client - Copy Attached`,\n            html: `\n              <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n                <h2 style=\"color: #4CAF50;\">Contract Signed! ‚úì</h2>\n                <p>Great news! Contract <strong>${contract.contractNumber}</strong> has been signed by ${contract.clientName}.</p>\n                \n                <div style=\"background-color: #f9f9f9; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n                  <h3 style=\"margin-top: 0; color: #333;\">Event Details</h3>\n                  <ul style=\"list-style: none; padding: 0;\">\n                    <li><strong>Date:</strong> ${new Date(contract.eventDate).toLocaleDateString('en-GB')}</li>\n                    <li><strong>Time:</strong> ${contract.eventTime}</li>\n                    <li><strong>Venue:</strong> ${contract.venue}</li>\n                    <li><strong>Fee:</strong> ¬£${contract.fee}</li>\n                  </ul>\n                </div>\n                \n                <div style=\"background-color: #e3f2fd; padding: 15px; border-radius: 5px; border-left: 4px solid #2196F3;\">\n                  <p style=\"margin: 0;\"><strong>Signature Details:</strong></p>\n                  <p style=\"margin: 5px 0;\">Signed by: ${signatureName}</p>\n                  <p style=\"margin: 5px 0;\">Time: ${new Date().toLocaleString('en-GB')}</p>\n                </div>\n                \n                <p style=\"background-color: #e8f5e8; padding: 15px; border-radius: 5px; border-left: 4px solid #4CAF50;\">\n                  üìé <strong>The signed contract PDF is attached for your records.</strong>\n                </p>\n              </div>\n            `,\n            text: `Contract ${contract.contractNumber} signed by ${signatureName} on ${new Date().toLocaleString('en-GB')}. Signed contract PDF is attached.`,\n            attachments: [{\n              content: pdfBase64,\n              filename: `Contract-${contract.contractNumber}-Signed.pdf`,\n              type: 'application/pdf',\n              disposition: 'attachment'\n            }]\n          };\n          \n          // Add reply-to for performer email too\n          if (replyToEmail) {\n            performerEmailData.replyTo = replyToEmail;\n          }\n          \n          await sendEmail(performerEmailData);\n        }\n      } catch (emailError) {\n        console.error(\"Error sending confirmation emails:\", emailError);\n        // Don't fail the signing process if email fails\n      }\n      \n      res.json({ \n        message: \"Contract signed successfully\",\n        contract: signedContract \n      });\n      \n    } catch (error) {\n      console.error(\"Error signing contract:\", error);\n      res.status(500).json({ message: \"Failed to sign contract\" });\n    }\n  });\n\n  // Invoice management routes\n  app.post('/api/invoices/:id/mark-paid', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const invoiceId = parseInt(req.params.id);\n      const { paidDate } = req.body;\n      \n      const { invoiceManager } = await import('./invoice-manager');\n      const success = await invoiceManager.markInvoiceAsPaid(invoiceId, userId, paidDate ? new Date(paidDate) : undefined);\n      \n      if (success) {\n        res.json({ message: \"Invoice marked as paid successfully\" });\n      } else {\n        res.status(404).json({ message: \"Invoice not found or could not be updated\" });\n      }\n    } catch (error) {\n      console.error(\"Error marking invoice as paid:\", error);\n      res.status(500).json({ message: \"Failed to mark invoice as paid\" });\n    }\n  });\n\n  app.post('/api/invoices/:id/send-reminder', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const invoiceId = parseInt(req.params.id);\n      \n      const { invoiceManager } = await import('./invoice-manager');\n      const success = await invoiceManager.generateOverdueReminder(invoiceId, userId);\n      \n      if (success) {\n        res.json({ message: \"Overdue reminder sent successfully\" });\n      } else {\n        res.status(400).json({ message: \"Could not send reminder. Invoice may not be overdue or client email missing.\" });\n      }\n    } catch (error) {\n      console.error(\"Error sending overdue reminder:\", error);\n      res.status(500).json({ message: \"Failed to send overdue reminder\" });\n    }\n  });\n\n  app.post('/api/invoices/check-overdue', isAuthenticated, async (req: any, res) => {\n    try {\n      const { invoiceManager } = await import('./invoice-manager');\n      await invoiceManager.updateOverdueInvoices();\n      res.json({ message: \"Overdue invoices updated successfully\" });\n    } catch (error) {\n      console.error(\"Error checking overdue invoices:\", error);\n      res.status(500).json({ message: \"Failed to update overdue invoices\" });\n    }\n  });\n\n  // Email enquiry intake route (manual testing)\n  app.post('/api/enquiries/email-intake', async (req, res) => {\n    try {\n      const { from, subject, body, receivedAt } = req.body;\n      \n      // Extract key information from email\n      const { parseEmailEnquiry } = await import('./email-parser');\n      const enquiryData = await parseEmailEnquiry(from, subject, body);\n      \n      // Create enquiry with extracted data\n      const enquiry = await storage.createEnquiry({\n        title: enquiryData.title,\n        clientName: enquiryData.clientName,\n        clientEmail: enquiryData.clientEmail || null,\n        clientPhone: enquiryData.clientPhone || null,\n        eventDate: enquiryData.eventDate || new Date(),\n        venue: enquiryData.venue || null,\n        notes: enquiryData.message,\n        userId: \"43963086\", // Main account owner\n        status: 'new',\n      });\n      \n      res.json({ message: \"Email enquiry processed successfully\", enquiry });\n    } catch (error) {\n      console.error(\"Error processing email enquiry:\", error);\n      res.status(500).json({ message: \"Failed to process email enquiry\" });\n    }\n  });\n\n  // SendGrid Email Webhook (for leads@musobuddy.com)\n  app.post('/api/webhook/sendgrid', async (req, res) => {\n    try {\n      console.log('=== SENDGRID WEBHOOK RECEIVED ===');\n      console.log('Request method:', req.method);\n      console.log('Request URL:', req.url);\n      console.log('Request headers:', req.headers);\n      console.log('Request body:', req.body);\n      \n      const { handleSendGridWebhook } = await import('./email-webhook');\n      await handleSendGridWebhook(req, res);\n    } catch (error) {\n      console.error(\"Error in SendGrid webhook:\", error);\n      res.status(500).json({ message: \"Failed to process SendGrid webhook\" });\n    }\n  });\n\n  // Test endpoint to create a fresh contract for testing\n  app.post('/api/test-create-contract', async (req, res) => {\n    try {\n      console.log('=== CREATING TEST CONTRACT ===');\n      \n      // Create a fresh contract for testing\n      const testContract = {\n        userId: \"43963086\",\n        enquiryId: 1,\n        contractNumber: `TEST-${Date.now()}`,\n        clientName: \"Test Client\",\n        clientEmail: \"test@example.com\",\n        clientPhone: \"07123456789\",\n        eventDate: new Date(\"2025-12-01\"),\n        eventTime: \"7pm\",\n        venue: \"Test Venue\",\n        fee: \"500.00\",\n        deposit: \"100.00\",\n        terms: \"Test terms and conditions\",\n        status: \"sent\"\n      };\n      \n      const contract = await storage.createContract(testContract);\n      console.log('Test contract created:', contract);\n      \n      res.json({ \n        message: 'Test contract created successfully', \n        contractId: contract.id,\n        signingUrl: `https://musobuddy.replit.app/sign-contract/${contract.id}`\n      });\n      \n    } catch (error) {\n      console.error(\"Error creating test contract:\", error);\n      res.status(500).json({ message: \"Failed to create test contract\" });\n    }\n  });\n\n  // Test endpoint to simulate email forwarding\n  app.post('/api/test-email-forwarding', async (req, res) => {\n    try {\n      console.log('=== TESTING EMAIL FORWARDING ===');\n      \n      // Simulate SendGrid webhook payload\n      const testPayload = {\n        to: 'leads@musobuddy.com',\n        from: 'potential.client@gmail.com',\n        subject: 'Wedding Booking Inquiry',\n        text: `Hi there,\n        \nI'm interested in booking you for my wedding on September 15th, 2025. \nThe venue is The Grand Hotel in Manchester. \nWe're looking for acoustic guitar performance for the ceremony and reception.\n\nPlease let me know your availability and rates.\n\nBest regards,\nSarah Johnson\nPhone: 07123456789\nEmail: sarah.johnson@gmail.com`,\n        html: null,\n        envelope: {\n          to: ['leads@musobuddy.com'],\n          from: 'potential.client@gmail.com'\n        },\n        headers: {\n          'Content-Type': 'text/plain'\n        }\n      };\n      \n      const { handleSendGridWebhook } = await import('./email-webhook');\n      \n      // Create a mock request/response to test the webhook handler\n      const mockReq = {\n        body: testPayload,\n        headers: { 'content-type': 'application/json' },\n        method: 'POST',\n        url: '/api/webhook/sendgrid'\n      } as any;\n      \n      const mockRes = {\n        status: (code: number) => ({\n          json: (data: any) => {\n            console.log('Mock response:', code, data);\n            return { status: code, data };\n          }\n        })\n      } as any;\n      \n      await handleSendGridWebhook(mockReq, mockRes);\n      \n      res.json({ message: 'Email forwarding test completed - check logs for results' });\n    } catch (error) {\n      console.error(\"Error testing email forwarding:\", error);\n      res.status(500).json({ message: \"Failed to test email forwarding\" });\n    }\n  });\n\n  // Mailgun Email Webhook (alternative)\n  app.post('/api/webhook/mailgun', async (req, res) => {\n    try {\n      const { handleMailgunWebhook } = await import('./email-webhook');\n      await handleMailgunWebhook(req, res);\n    } catch (error) {\n      console.error(\"Error in Mailgun webhook:\", error);\n      res.status(500).json({ message: \"Failed to process Mailgun webhook\" });\n    }\n  });\n\n  // Booking routes\n  app.get('/api/bookings', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const bookings = await storage.getBookings(userId);\n      res.json(bookings);\n    } catch (error) {\n      console.error(\"Error fetching bookings:\", error);\n      res.status(500).json({ message: \"Failed to fetch bookings\" });\n    }\n  });\n\n  app.get('/api/bookings/upcoming', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const bookings = await storage.getUpcomingBookings(userId);\n      res.json(bookings);\n    } catch (error) {\n      console.error(\"Error fetching upcoming bookings:\", error);\n      res.status(500).json({ message: \"Failed to fetch upcoming bookings\" });\n    }\n  });\n\n  app.post('/api/bookings', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const data = { ...req.body, userId };\n      \n      // Convert eventDate string to Date if present\n      if (data.eventDate && typeof data.eventDate === 'string') {\n        data.eventDate = new Date(data.eventDate);\n      }\n      \n      const bookingData = insertBookingSchema.parse(data);\n      const booking = await storage.createBooking(bookingData);\n      res.status(201).json(booking);\n    } catch (error) {\n      console.error(\"Error creating booking:\", error);\n      res.status(500).json({ message: \"Failed to create booking\" });\n    }\n  });\n\n  // Compliance document routes\n  app.get('/api/compliance', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const documents = await storage.getComplianceDocuments(userId);\n      res.json(documents);\n    } catch (error) {\n      console.error(\"Error fetching compliance documents:\", error);\n      res.status(500).json({ message: \"Failed to fetch compliance documents\" });\n    }\n  });\n\n  app.post('/api/compliance', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const documentData = insertComplianceDocumentSchema.parse({ ...req.body, userId });\n      const document = await storage.createComplianceDocument(documentData);\n      res.status(201).json(document);\n    } catch (error) {\n      console.error(\"Error creating compliance document:\", error);\n      res.status(500).json({ message: \"Failed to create compliance document\" });\n    }\n  });\n\n  // User settings routes\n  app.get('/api/settings', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const settings = await storage.getUserSettings(userId);\n      res.json(settings || {});\n    } catch (error) {\n      console.error(\"Error fetching user settings:\", error);\n      res.status(500).json({ message: \"Failed to fetch settings\" });\n    }\n  });\n\n  app.post('/api/settings', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      console.log(\"Saving settings for user:\", userId);\n      console.log(\"Request body:\", req.body);\n      \n      const settingsData = { ...req.body, userId };\n      console.log(\"Settings data to save:\", settingsData);\n      \n      const settings = await storage.upsertUserSettings(settingsData);\n      console.log(\"Settings saved successfully:\", settings);\n      res.json(settings);\n    } catch (error) {\n      console.error(\"Error saving user settings:\", error);\n      console.error(\"Error details:\", error.message);\n      console.error(\"Error stack:\", error.stack);\n      res.status(500).json({ message: \"Failed to save settings\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":41521},"server/sendgrid.ts":{"content":"import { MailService } from '@sendgrid/mail';\n\nif (!process.env.SENDGRID_API_KEY) {\n  throw new Error(\"SENDGRID_API_KEY environment variable must be set\");\n}\n\nconst mailService = new MailService();\nmailService.setApiKey(process.env.SENDGRID_API_KEY);\n\ninterface EmailAttachment {\n  content: string; // Base64 encoded content\n  filename: string;\n  type: string;\n  disposition: string;\n}\n\ninterface EmailParams {\n  to: string;\n  from: string;\n  subject: string;\n  text?: string;\n  html?: string;\n  attachments?: EmailAttachment[];\n  replyTo?: string;\n}\n\nexport async function sendEmail(params: EmailParams): Promise<boolean> {\n  try {\n    console.log('=== SENDING EMAIL ===');\n    console.log('Email params:', {\n      to: params.to,\n      from: params.from,\n      subject: params.subject,\n      hasText: !!params.text,\n      hasHtml: !!params.html,\n      hasAttachments: !!params.attachments?.length\n    });\n    \n    // Validate required parameters\n    if (!params.to || !params.from || !params.subject) {\n      console.error('Missing required email parameters:', { to: !!params.to, from: !!params.from, subject: !!params.subject });\n      return false;\n    }\n    \n    const emailData: any = {\n      to: params.to,\n      from: params.from,\n      subject: params.subject,\n      text: params.text,\n      html: params.html,\n    };\n\n    // Add reply-to if provided\n    if (params.replyTo) {\n      emailData.replyTo = params.replyTo;\n      console.log('Setting reply-to:', params.replyTo);\n    }\n\n    // Add attachments if provided\n    if (params.attachments && params.attachments.length > 0) {\n      emailData.attachments = params.attachments;\n      console.log(`Adding ${params.attachments.length} attachments`);\n    }\n    \n    console.log('Calling SendGrid API...');\n    const result = await mailService.send(emailData);\n    \n    console.log('SendGrid response:', result);\n    console.log('=== EMAIL SENT SUCCESSFULLY ===');\n    return true;\n  } catch (error: any) {\n    console.error('=== EMAIL SENDING FAILED ===');\n    console.error('SendGrid email error:', error);\n    if (error.response) {\n      console.error('SendGrid error status:', error.response.status);\n      console.error('SendGrid error body:', error.response.body);\n    }\n    if (error.message) {\n      console.error('Error message:', error.message);\n    }\n    console.error('=== END EMAIL ERROR ===');\n    return false;\n  }\n}\n\nexport function generateInvoiceHtml(invoice: any, contract: any, userSettings: any): string {\n  return `\n    <!DOCTYPE html>\n    <html>\n    <head>\n      <meta charset=\"utf-8\">\n      <title>Invoice ${invoice.invoiceNumber}</title>\n      <style>\n        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f9f9f9; }\n        .container { max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }\n        .header { display: flex; justify-content: space-between; align-items: start; margin-bottom: 30px; border-bottom: 2px solid #0EA5E9; padding-bottom: 20px; }\n        .logo { font-size: 24px; font-weight: bold; color: #0EA5E9; }\n        .invoice-title { text-align: right; }\n        .invoice-number { font-size: 20px; font-weight: bold; color: #333; }\n        .invoice-date { color: #666; margin-top: 5px; }\n        .billing-section { display: flex; justify-content: space-between; margin-bottom: 30px; }\n        .billing-info { flex: 1; }\n        .billing-info h3 { color: #333; margin-bottom: 10px; font-size: 14px; text-transform: uppercase; }\n        .billing-info p { margin: 3px 0; color: #666; }\n        .items-table { width: 100%; border-collapse: collapse; margin-bottom: 30px; }\n        .items-table th { background-color: #f8f9fa; padding: 12px; text-align: left; border-bottom: 2px solid #dee2e6; }\n        .items-table td { padding: 12px; border-bottom: 1px solid #dee2e6; }\n        .items-table .amount { text-align: right; font-weight: bold; }\n        .total-section { text-align: right; }\n        .total-row { display: flex; justify-content: flex-end; margin-bottom: 5px; }\n        .total-label { width: 150px; text-align: right; padding-right: 20px; }\n        .total-amount { width: 100px; text-align: right; font-weight: bold; }\n        .grand-total { font-size: 18px; color: #0EA5E9; border-top: 2px solid #0EA5E9; padding-top: 10px; margin-top: 10px; }\n        .terms { margin-top: 30px; padding-top: 20px; border-top: 1px solid #dee2e6; }\n        .terms h3 { color: #333; margin-bottom: 10px; }\n        .terms p { color: #666; line-height: 1.5; }\n      </style>\n    </head>\n    <body>\n      <div class=\"container\">\n        <div class=\"header\">\n          <div class=\"logo\">${userSettings?.businessName || 'MusoBuddy'}</div>\n          <div class=\"invoice-title\">\n            <div class=\"invoice-number\">Invoice ${invoice.invoiceNumber}</div>\n            <div class=\"invoice-date\">${new Date(invoice.createdAt).toLocaleDateString('en-GB')}</div>\n          </div>\n        </div>\n\n        <div class=\"billing-section\">\n          <div class=\"billing-info\">\n            <h3>From:</h3>\n            <p><strong>${userSettings?.businessName || 'Your Business'}</strong></p>\n            ${userSettings?.businessAddress ? `<p>${userSettings.businessAddress.replace(/\\n/g, '<br>')}</p>` : ''}\n            ${userSettings?.phone ? `<p>Phone: ${userSettings.phone}</p>` : ''}\n            ${userSettings?.website ? `<p>Website: ${userSettings.website}</p>` : ''}\n          </div>\n          <div class=\"billing-info\">\n            <h3>To:</h3>\n            <p><strong>${contract?.clientName || 'Client'}</strong></p>\n            ${contract?.clientEmail ? `<p>${contract.clientEmail}</p>` : ''}\n            ${contract?.clientPhone ? `<p>${contract.clientPhone}</p>` : ''}\n            ${contract?.eventVenue ? `<p>${contract.eventVenue}</p>` : ''}\n          </div>\n        </div>\n\n        <table class=\"items-table\">\n          <thead>\n            <tr>\n              <th>Description</th>\n              <th>Event Date</th>\n              <th>Amount</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>${contract?.eventType || 'Music Performance'} - ${contract?.clientName || 'Client'}</td>\n              <td>${contract?.eventDate ? new Date(contract.eventDate).toLocaleDateString('en-GB') : ''}</td>\n              <td class=\"amount\">¬£${Number(invoice.amount).toFixed(2)}</td>\n            </tr>\n          </tbody>\n        </table>\n\n        <div class=\"total-section\">\n          <div class=\"total-row\">\n            <div class=\"total-label\">Subtotal:</div>\n            <div class=\"total-amount\">¬£${Number(invoice.amount).toFixed(2)}</div>\n          </div>\n          <div class=\"total-row grand-total\">\n            <div class=\"total-label\">Total:</div>\n            <div class=\"total-amount\">¬£${Number(invoice.amount).toFixed(2)}</div>\n          </div>\n        </div>\n\n        ${invoice.terms || userSettings?.defaultTerms ? `\n        <div class=\"terms\">\n          <h3>Payment Terms</h3>\n          <p>${invoice.terms || userSettings?.defaultTerms || 'Payment due within 30 days of invoice date.'}</p>\n        </div>\n        ` : ''}\n      </div>\n    </body>\n    </html>\n  `;\n}\n\nexport function generateContractHtml(contract: any, userSettings: any): string {\n  return `\n    <!DOCTYPE html>\n    <html>\n    <head>\n      <meta charset=\"utf-8\">\n      <title>Contract ${contract.contractNumber}</title>\n      <style>\n        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f9f9f9; }\n        .container { max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }\n        .header { text-align: center; margin-bottom: 30px; border-bottom: 2px solid #0EA5E9; padding-bottom: 20px; }\n        .title { font-size: 24px; font-weight: bold; color: #0EA5E9; margin-bottom: 10px; }\n        .contract-number { color: #666; }\n        .section { margin-bottom: 25px; }\n        .section h3 { color: #333; margin-bottom: 10px; font-size: 16px; border-bottom: 1px solid #dee2e6; padding-bottom: 5px; }\n        .details-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-bottom: 20px; }\n        .detail-item { margin-bottom: 10px; }\n        .detail-label { font-weight: bold; color: #333; }\n        .detail-value { color: #666; margin-top: 2px; }\n        .terms-text { line-height: 1.6; color: #555; white-space: pre-line; }\n        .signature-section { display: grid; grid-template-columns: 1fr 1fr; gap: 40px; margin-top: 40px; padding-top: 20px; border-top: 1px solid #dee2e6; }\n        .signature-box { text-align: center; }\n        .signature-line { border-bottom: 1px solid #333; margin-bottom: 10px; height: 40px; }\n        .signature-label { color: #666; font-size: 14px; }\n        .cta-section { background: linear-gradient(135deg, #0EA5E9, #3B82F6); color: white; padding: 30px; border-radius: 8px; text-align: center; margin: 30px 0; }\n        .cta-title { font-size: 24px; font-weight: bold; margin-bottom: 10px; }\n        .cta-text { font-size: 16px; margin-bottom: 20px; opacity: 0.9; }\n        .cta-button { display: inline-block; background: white; color: #0EA5E9; padding: 15px 30px; border-radius: 5px; text-decoration: none; font-weight: bold; font-size: 16px; }\n        .footer { margin-top: 30px; padding-top: 20px; border-top: 1px solid #dee2e6; text-align: center; color: #666; font-size: 14px; }\n      </style>\n    </head>\n    <body>\n      <div class=\"container\">\n        <div class=\"header\">\n          <div class=\"title\">Performance Contract</div>\n          <div class=\"contract-number\">Contract ${contract.contractNumber}</div>\n        </div>\n\n        <div class=\"section\">\n          <h3>Performer Details</h3>\n          <div class=\"detail-item\">\n            <div class=\"detail-label\">${userSettings?.businessName || 'Performer Name'}</div>\n            ${userSettings?.businessAddress ? `<div class=\"detail-value\">${userSettings.businessAddress.replace(/\\n/g, '<br>')}</div>` : ''}\n            ${userSettings?.phone ? `<div class=\"detail-value\">Phone: ${userSettings.phone}</div>` : ''}\n          </div>\n        </div>\n\n        <div class=\"section\">\n          <h3>Client Details</h3>\n          <div class=\"detail-item\">\n            <div class=\"detail-label\">${contract.clientName}</div>\n            ${contract.clientEmail ? `<div class=\"detail-value\">Email: ${contract.clientEmail}</div>` : ''}\n            ${contract.clientPhone ? `<div class=\"detail-value\">Phone: ${contract.clientPhone}</div>` : ''}\n          </div>\n        </div>\n\n        <div class=\"section\">\n          <h3>Event Details</h3>\n          <div class=\"details-grid\">\n            <div class=\"detail-item\">\n              <div class=\"detail-label\">Event Type</div>\n              <div class=\"detail-value\">${contract.eventType}</div>\n            </div>\n            <div class=\"detail-item\">\n              <div class=\"detail-label\">Event Date</div>\n              <div class=\"detail-value\">${new Date(contract.eventDate).toLocaleDateString('en-GB')}</div>\n            </div>\n            <div class=\"detail-item\">\n              <div class=\"detail-label\">Start Time</div>\n              <div class=\"detail-value\">${contract.startTime}</div>\n            </div>\n            <div class=\"detail-item\">\n              <div class=\"detail-label\">Duration</div>\n              <div class=\"detail-value\">${contract.duration}</div>\n            </div>\n            <div class=\"detail-item\">\n              <div class=\"detail-label\">Venue</div>\n              <div class=\"detail-value\">${contract.eventVenue}</div>\n            </div>\n            <div class=\"detail-item\">\n              <div class=\"detail-label\">Fee</div>\n              <div class=\"detail-value\">¬£${Number(contract.fee).toFixed(2)}</div>\n            </div>\n          </div>\n        </div>\n\n        ${contract.terms ? `\n        <div class=\"section\">\n          <h3>Terms and Conditions</h3>\n          <div class=\"terms-text\">${contract.terms}</div>\n        </div>\n        ` : ''}\n\n        <div class=\"cta-section\">\n          <div class=\"cta-title\">Ready to Confirm?</div>\n          <div class=\"cta-text\">Click the button below to digitally sign this contract</div>\n          <a href=\"${process.env.REPLIT_DOMAINS?.split(',')[0] ? `https://${process.env.REPLIT_DOMAINS.split(',')[0]}` : 'http://localhost:5000'}/sign-contract/${contract.id}\" class=\"cta-button\">\n            Sign Contract Online\n          </a>\n        </div>\n\n        <div class=\"signature-section\">\n          <div class=\"signature-box\">\n            <div class=\"signature-line\"></div>\n            <div class=\"signature-label\">Performer Signature</div>\n            <div class=\"signature-label\">Date: ___________</div>\n          </div>\n          <div class=\"signature-box\">\n            <div class=\"signature-line\"></div>\n            <div class=\"signature-label\">Client Signature</div>\n            <div class=\"signature-label\">Date: ___________</div>\n          </div>\n        </div>\n\n        <div class=\"footer\">\n          <p>This contract was generated by ${userSettings?.businessName || 'MusoBuddy'}</p>\n          <p>For questions, please contact ${userSettings?.businessEmail || userSettings?.phone || 'the performer directly'}</p>\n        </div>\n      </div>\n    </body>\n    </html>\n  `;\n}","size_bytes":13321},"server/storage.ts":{"content":"import {\n  users,\n  enquiries,\n  contracts,\n  invoices,\n  bookings,\n  complianceDocuments,\n  userSettings,\n  type User,\n  type UpsertUser,\n  type Enquiry,\n  type InsertEnquiry,\n  type Contract,\n  type InsertContract,\n  type Invoice,\n  type InsertInvoice,\n  type Booking,\n  type InsertBooking,\n  type ComplianceDocument,\n  type InsertComplianceDocument,\n  type UserSettings,\n  type InsertUserSettings,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, gte, lte } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations - mandatory for Replit Auth\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  \n  // Enquiry operations\n  getEnquiries(userId: string): Promise<Enquiry[]>;\n  getEnquiry(id: number, userId: string): Promise<Enquiry | undefined>;\n  createEnquiry(enquiry: InsertEnquiry): Promise<Enquiry>;\n  updateEnquiry(id: number, enquiry: Partial<InsertEnquiry>, userId: string): Promise<Enquiry | undefined>;\n  deleteEnquiry(id: number, userId: string): Promise<boolean>;\n  \n  // Contract operations\n  getContracts(userId: string): Promise<Contract[]>;\n  getContract(id: number, userId: string): Promise<Contract | undefined>;\n  getContractById(id: number): Promise<Contract | undefined>; // Public access for signing\n  createContract(contract: InsertContract): Promise<Contract>;\n  updateContract(id: number, contract: Partial<InsertContract>, userId: string): Promise<Contract | undefined>;\n  signContract(id: number, signatureData: { signatureName: string; clientIP: string; signedAt: Date }): Promise<Contract | undefined>;\n  \n  // Invoice operations\n  getInvoices(userId: string): Promise<Invoice[]>;\n  getInvoice(id: number, userId: string): Promise<Invoice | undefined>;\n  createInvoice(invoice: InsertInvoice): Promise<Invoice>;\n  updateInvoice(id: number, invoice: Partial<InsertInvoice>, userId: string): Promise<Invoice | undefined>;\n  \n  // Booking operations\n  getBookings(userId: string): Promise<Booking[]>;\n  getUpcomingBookings(userId: string): Promise<Booking[]>;\n  getBooking(id: number, userId: string): Promise<Booking | undefined>;\n  createBooking(booking: InsertBooking): Promise<Booking>;\n  updateBooking(id: number, booking: Partial<InsertBooking>, userId: string): Promise<Booking | undefined>;\n  \n  // Compliance operations\n  getComplianceDocuments(userId: string): Promise<ComplianceDocument[]>;\n  getComplianceDocument(id: number, userId: string): Promise<ComplianceDocument | undefined>;\n  createComplianceDocument(document: InsertComplianceDocument): Promise<ComplianceDocument>;\n  updateComplianceDocument(id: number, document: Partial<InsertComplianceDocument>, userId: string): Promise<ComplianceDocument | undefined>;\n  \n  // Dashboard stats\n  getDashboardStats(userId: string): Promise<{\n    monthlyRevenue: number;\n    activeBookings: number;\n    pendingInvoices: number;\n    conversionRate: number;\n  }>;\n  \n  // User settings operations\n  getUserSettings(userId: string): Promise<UserSettings | undefined>;\n  upsertUserSettings(settings: InsertUserSettings): Promise<UserSettings>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Enquiry operations\n  async getEnquiries(userId: string): Promise<Enquiry[]> {\n    return await db\n      .select()\n      .from(enquiries)\n      .where(eq(enquiries.userId, userId))\n      .orderBy(desc(enquiries.createdAt));\n  }\n\n  async getEnquiry(id: number, userId: string): Promise<Enquiry | undefined> {\n    const [enquiry] = await db\n      .select()\n      .from(enquiries)\n      .where(and(eq(enquiries.id, id), eq(enquiries.userId, userId)));\n    return enquiry;\n  }\n\n  async createEnquiry(enquiry: InsertEnquiry): Promise<Enquiry> {\n    const [newEnquiry] = await db\n      .insert(enquiries)\n      .values(enquiry)\n      .returning();\n    return newEnquiry;\n  }\n\n  async updateEnquiry(id: number, enquiry: Partial<InsertEnquiry>, userId: string): Promise<Enquiry | undefined> {\n    const [updatedEnquiry] = await db\n      .update(enquiries)\n      .set({ ...enquiry, updatedAt: new Date() })\n      .where(and(eq(enquiries.id, id), eq(enquiries.userId, userId)))\n      .returning();\n    return updatedEnquiry;\n  }\n\n  async deleteEnquiry(id: number, userId: string): Promise<boolean> {\n    const result = await db\n      .delete(enquiries)\n      .where(and(eq(enquiries.id, id), eq(enquiries.userId, userId)));\n    return result.rowCount > 0;\n  }\n\n  // Contract operations\n  async getContracts(userId: string): Promise<Contract[]> {\n    return await db\n      .select()\n      .from(contracts)\n      .where(eq(contracts.userId, userId))\n      .orderBy(desc(contracts.createdAt));\n  }\n\n  async getContract(id: number, userId: string): Promise<Contract | undefined> {\n    const [contract] = await db\n      .select()\n      .from(contracts)\n      .where(and(eq(contracts.id, id), eq(contracts.userId, userId)));\n    return contract;\n  }\n\n  async createContract(contract: InsertContract): Promise<Contract> {\n    const [newContract] = await db\n      .insert(contracts)\n      .values(contract)\n      .returning();\n    return newContract;\n  }\n\n  async updateContract(id: number, contract: Partial<InsertContract>, userId: string): Promise<Contract | undefined> {\n    const [updatedContract] = await db\n      .update(contracts)\n      .set({ ...contract, updatedAt: new Date() })\n      .where(and(eq(contracts.id, id), eq(contracts.userId, userId)))\n      .returning();\n    return updatedContract;\n  }\n\n  async getContractById(id: number): Promise<Contract | undefined> {\n    const [contract] = await db\n      .select()\n      .from(contracts)\n      .where(eq(contracts.id, id));\n    return contract;\n  }\n\n  async signContract(id: number, signatureData: { signatureName: string; clientIP: string; signedAt: Date }): Promise<Contract | undefined> {\n    const [signedContract] = await db\n      .update(contracts)\n      .set({\n        status: 'signed',\n        signedAt: signatureData.signedAt,\n        updatedAt: new Date()\n      })\n      .where(eq(contracts.id, id))\n      .returning();\n    return signedContract;\n  }\n\n  // Invoice operations\n  async getInvoices(userId: string): Promise<Invoice[]> {\n    return await db\n      .select()\n      .from(invoices)\n      .where(eq(invoices.userId, userId))\n      .orderBy(desc(invoices.createdAt));\n  }\n\n  async getInvoice(id: number, userId: string): Promise<Invoice | undefined> {\n    const [invoice] = await db\n      .select()\n      .from(invoices)\n      .where(and(eq(invoices.id, id), eq(invoices.userId, userId)));\n    return invoice;\n  }\n\n  async createInvoice(invoice: InsertInvoice): Promise<Invoice> {\n    const [newInvoice] = await db\n      .insert(invoices)\n      .values(invoice)\n      .returning();\n    return newInvoice;\n  }\n\n  async updateInvoice(id: number, invoice: Partial<InsertInvoice>, userId: string): Promise<Invoice | undefined> {\n    const [updatedInvoice] = await db\n      .update(invoices)\n      .set({ ...invoice, updatedAt: new Date() })\n      .where(and(eq(invoices.id, id), eq(invoices.userId, userId)))\n      .returning();\n    return updatedInvoice;\n  }\n\n  // Booking operations\n  async getBookings(userId: string): Promise<Booking[]> {\n    return await db\n      .select()\n      .from(bookings)\n      .where(eq(bookings.userId, userId))\n      .orderBy(desc(bookings.eventDate));\n  }\n\n  async getUpcomingBookings(userId: string): Promise<Booking[]> {\n    const now = new Date();\n    return await db\n      .select()\n      .from(bookings)\n      .where(and(eq(bookings.userId, userId), gte(bookings.eventDate, now)))\n      .orderBy(bookings.eventDate)\n      .limit(10);\n  }\n\n  async getBooking(id: number, userId: string): Promise<Booking | undefined> {\n    const [booking] = await db\n      .select()\n      .from(bookings)\n      .where(and(eq(bookings.id, id), eq(bookings.userId, userId)));\n    return booking;\n  }\n\n  async createBooking(booking: InsertBooking): Promise<Booking> {\n    const [newBooking] = await db\n      .insert(bookings)\n      .values(booking)\n      .returning();\n    return newBooking;\n  }\n\n  async updateBooking(id: number, booking: Partial<InsertBooking>, userId: string): Promise<Booking | undefined> {\n    const [updatedBooking] = await db\n      .update(bookings)\n      .set({ ...booking, updatedAt: new Date() })\n      .where(and(eq(bookings.id, id), eq(bookings.userId, userId)))\n      .returning();\n    return updatedBooking;\n  }\n\n  // Compliance operations\n  async getComplianceDocuments(userId: string): Promise<ComplianceDocument[]> {\n    return await db\n      .select()\n      .from(complianceDocuments)\n      .where(eq(complianceDocuments.userId, userId))\n      .orderBy(complianceDocuments.expiryDate);\n  }\n\n  async getComplianceDocument(id: number, userId: string): Promise<ComplianceDocument | undefined> {\n    const [document] = await db\n      .select()\n      .from(complianceDocuments)\n      .where(and(eq(complianceDocuments.id, id), eq(complianceDocuments.userId, userId)));\n    return document;\n  }\n\n  async createComplianceDocument(document: InsertComplianceDocument): Promise<ComplianceDocument> {\n    const [newDocument] = await db\n      .insert(complianceDocuments)\n      .values(document)\n      .returning();\n    return newDocument;\n  }\n\n  async updateComplianceDocument(id: number, document: Partial<InsertComplianceDocument>, userId: string): Promise<ComplianceDocument | undefined> {\n    const [updatedDocument] = await db\n      .update(complianceDocuments)\n      .set({ ...document, updatedAt: new Date() })\n      .where(and(eq(complianceDocuments.id, id), eq(complianceDocuments.userId, userId)))\n      .returning();\n    return updatedDocument;\n  }\n\n  // Dashboard stats\n  async getDashboardStats(userId: string): Promise<{\n    monthlyRevenue: number;\n    activeBookings: number;\n    pendingInvoices: number;\n    conversionRate: number;\n  }> {\n    const now = new Date();\n    const firstDayOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);\n    const lastDayOfMonth = new Date(now.getFullYear(), now.getMonth() + 1, 0);\n\n    // Monthly revenue from paid invoices\n    const monthlyInvoices = await db\n      .select()\n      .from(invoices)\n      .where(\n        and(\n          eq(invoices.userId, userId),\n          eq(invoices.status, \"paid\"),\n          gte(invoices.paidAt, firstDayOfMonth),\n          lte(invoices.paidAt, lastDayOfMonth)\n        )\n      );\n\n    const monthlyRevenue = monthlyInvoices.reduce((sum, invoice) => sum + Number(invoice.amount), 0);\n\n    // Active bookings (upcoming)\n    const activeBookingsCount = await db\n      .select()\n      .from(bookings)\n      .where(\n        and(\n          eq(bookings.userId, userId),\n          eq(bookings.status, \"confirmed\"),\n          gte(bookings.eventDate, now)\n        )\n      );\n\n    // Pending invoices\n    const pendingInvoicesData = await db\n      .select()\n      .from(invoices)\n      .where(\n        and(\n          eq(invoices.userId, userId),\n          eq(invoices.status, \"sent\")\n        )\n      );\n\n    const pendingInvoices = pendingInvoicesData.reduce((sum, invoice) => sum + Number(invoice.amount), 0);\n\n    // Conversion rate (confirmed bookings / total enquiries)\n    const totalEnquiries = await db\n      .select()\n      .from(enquiries)\n      .where(eq(enquiries.userId, userId));\n\n    const confirmedBookingsCount = await db\n      .select()\n      .from(enquiries)\n      .where(\n        and(\n          eq(enquiries.userId, userId),\n          eq(enquiries.status, \"confirmed\")\n        )\n      );\n\n    const conversionRate = totalEnquiries.length > 0 \n      ? (confirmedBookingsCount.length / totalEnquiries.length) * 100 \n      : 0;\n\n    return {\n      monthlyRevenue,\n      activeBookings: activeBookingsCount.length,\n      pendingInvoices,\n      conversionRate: Math.round(conversionRate),\n    };\n  }\n\n  // User settings operations\n  async getUserSettings(userId: string): Promise<UserSettings | undefined> {\n    const [settings] = await db\n      .select()\n      .from(userSettings)\n      .where(eq(userSettings.userId, userId));\n    return settings;\n  }\n\n  async upsertUserSettings(settings: InsertUserSettings): Promise<UserSettings> {\n    // First try to find existing settings\n    const [existingSettings] = await db\n      .select()\n      .from(userSettings)\n      .where(eq(userSettings.userId, settings.userId));\n\n    if (existingSettings) {\n      // Update existing settings\n      const [updatedSettings] = await db\n        .update(userSettings)\n        .set({\n          ...settings,\n          updatedAt: new Date(),\n        })\n        .where(eq(userSettings.userId, settings.userId))\n        .returning();\n      return updatedSettings;\n    } else {\n      // Insert new settings\n      const [newSettings] = await db\n        .insert(userSettings)\n        .values({\n          ...settings,\n          createdAt: new Date(),\n          updatedAt: new Date(),\n        })\n        .returning();\n      return newSettings;\n    }\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":13441},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2254},"shared/schema.ts":{"content":"import { pgTable, text, varchar, timestamp, jsonb, index, serial, integer, decimal, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\nimport { relations } from \"drizzle-orm\";\n\n// Session storage table - mandatory for Replit Auth\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table - mandatory for Replit Auth\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().notNull(),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Enquiries table\nexport const enquiries = pgTable(\"enquiries\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull(),\n  title: varchar(\"title\").notNull(),\n  clientName: varchar(\"client_name\").notNull(),\n  clientEmail: varchar(\"client_email\"),\n  clientPhone: varchar(\"client_phone\"),\n  eventDate: timestamp(\"event_date\"),\n  eventTime: varchar(\"event_time\"),\n  venue: varchar(\"venue\"),\n  eventType: varchar(\"event_type\"),\n  estimatedValue: decimal(\"estimated_value\", { precision: 10, scale: 2 }),\n  status: varchar(\"status\").notNull().default(\"new\"), // new, qualified, contract_sent, confirmed, rejected\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Contracts table\nexport const contracts = pgTable(\"contracts\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull(),\n  enquiryId: integer(\"enquiry_id\").notNull(),\n  contractNumber: varchar(\"contract_number\").notNull().unique(),\n  clientName: varchar(\"client_name\").notNull(),\n  clientEmail: varchar(\"client_email\"),\n  clientPhone: varchar(\"client_phone\"),\n  eventDate: timestamp(\"event_date\").notNull(),\n  eventTime: varchar(\"event_time\").notNull(),\n  venue: varchar(\"venue\").notNull(),\n  fee: decimal(\"fee\", { precision: 10, scale: 2 }).notNull(),\n  deposit: decimal(\"deposit\", { precision: 10, scale: 2 }),\n  terms: text(\"terms\"),\n  status: varchar(\"status\").notNull().default(\"draft\"), // draft, sent, signed, completed\n  signedAt: timestamp(\"signed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Invoices table\nexport const invoices = pgTable(\"invoices\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull(),\n  contractId: integer(\"contract_id\").notNull(),\n  invoiceNumber: varchar(\"invoice_number\").notNull().unique(),\n  clientName: varchar(\"client_name\").notNull(),\n  businessAddress: varchar(\"business_address\"), // Musician's business address\n  performanceDate: timestamp(\"performance_date\"),\n  performanceFee: decimal(\"performance_fee\", { precision: 10, scale: 2 }),\n  depositPaid: decimal(\"deposit_paid\", { precision: 10, scale: 2 }).default(\"0\"),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(), // Amount due (fee minus deposit)\n  dueDate: timestamp(\"due_date\").notNull(),\n  status: varchar(\"status\").notNull().default(\"draft\"), // draft, sent, paid, overdue\n  paidAt: timestamp(\"paid_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Bookings/Gigs table\nexport const bookings = pgTable(\"bookings\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull(),\n  contractId: integer(\"contract_id\").notNull(),\n  title: varchar(\"title\").notNull(),\n  clientName: varchar(\"client_name\").notNull(),\n  eventDate: timestamp(\"event_date\").notNull(),\n  eventTime: varchar(\"event_time\").notNull(),\n  venue: varchar(\"venue\").notNull(),\n  fee: decimal(\"fee\", { precision: 10, scale: 2 }).notNull(),\n  status: varchar(\"status\").notNull().default(\"confirmed\"), // confirmed, completed, cancelled\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Compliance documents table\nexport const complianceDocuments = pgTable(\"compliance_documents\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull(),\n  type: varchar(\"type\").notNull(), // public_liability, pat_testing, music_license\n  name: varchar(\"name\").notNull(),\n  expiryDate: timestamp(\"expiry_date\"),\n  status: varchar(\"status\").notNull().default(\"valid\"), // valid, expiring, expired\n  documentUrl: varchar(\"document_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// User settings/profile table for business details\nexport const userSettings = pgTable(\"user_settings\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull().unique(),\n  businessName: varchar(\"business_name\"),\n  businessEmail: varchar(\"business_email\"),\n  businessAddress: text(\"business_address\"),\n  phone: varchar(\"phone\"),\n  website: varchar(\"website\"),\n  taxNumber: varchar(\"tax_number\"),\n  bankDetails: text(\"bank_details\"),\n  defaultTerms: text(\"default_terms\"),\n  emailFromName: varchar(\"email_from_name\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ one, many }) => ({\n  enquiries: many(enquiries),\n  contracts: many(contracts),\n  invoices: many(invoices),\n  bookings: many(bookings),\n  complianceDocuments: many(complianceDocuments),\n  settings: one(userSettings, {\n    fields: [users.id],\n    references: [userSettings.userId],\n  }),\n}));\n\nexport const enquiriesRelations = relations(enquiries, ({ one, many }) => ({\n  user: one(users, {\n    fields: [enquiries.userId],\n    references: [users.id],\n  }),\n  contracts: many(contracts),\n}));\n\nexport const contractsRelations = relations(contracts, ({ one, many }) => ({\n  user: one(users, {\n    fields: [contracts.userId],\n    references: [users.id],\n  }),\n  enquiry: one(enquiries, {\n    fields: [contracts.enquiryId],\n    references: [enquiries.id],\n  }),\n  invoices: many(invoices),\n  bookings: many(bookings),\n}));\n\nexport const invoicesRelations = relations(invoices, ({ one }) => ({\n  user: one(users, {\n    fields: [invoices.userId],\n    references: [users.id],\n  }),\n  contract: one(contracts, {\n    fields: [invoices.contractId],\n    references: [contracts.id],\n  }),\n}));\n\nexport const bookingsRelations = relations(bookings, ({ one }) => ({\n  user: one(users, {\n    fields: [bookings.userId],\n    references: [users.id],\n  }),\n  contract: one(contracts, {\n    fields: [bookings.contractId],\n    references: [contracts.id],\n  }),\n}));\n\nexport const complianceDocumentsRelations = relations(complianceDocuments, ({ one }) => ({\n  user: one(users, {\n    fields: [complianceDocuments.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const userSettingsRelations = relations(userSettings, ({ one }) => ({\n  user: one(users, {\n    fields: [userSettings.userId],\n    references: [users.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertEnquirySchema = createInsertSchema(enquiries).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertContractSchema = createInsertSchema(contracts).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertInvoiceSchema = createInsertSchema(invoices).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertBookingSchema = createInsertSchema(bookings).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertComplianceDocumentSchema = createInsertSchema(complianceDocuments).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertUserSettingsSchema = createInsertSchema(userSettings).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type InsertEnquiry = z.infer<typeof insertEnquirySchema>;\nexport type Enquiry = typeof enquiries.$inferSelect;\nexport type InsertContract = z.infer<typeof insertContractSchema>;\nexport type Contract = typeof contracts.$inferSelect;\nexport type InsertInvoice = z.infer<typeof insertInvoiceSchema>;\nexport type Invoice = typeof invoices.$inferSelect;\nexport type InsertBooking = z.infer<typeof insertBookingSchema>;\nexport type Booking = typeof bookings.$inferSelect;\nexport type InsertComplianceDocument = z.infer<typeof insertComplianceDocumentSchema>;\nexport type ComplianceDocument = typeof complianceDocuments.$inferSelect;\nexport type InsertUserSettings = z.infer<typeof insertUserSettingsSchema>;\nexport type UserSettings = typeof userSettings.$inferSelect;\n","size_bytes":8880},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/landing\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Enquiries from \"@/pages/enquiries\";\nimport Contracts from \"@/pages/contracts\";\nimport Invoices from \"@/pages/invoices\";\nimport Calendar from \"@/pages/calendar\";\nimport Compliance from \"@/pages/compliance\";\nimport Settings from \"@/pages/settings\";\nimport SignContract from \"@/pages/sign-contract\";\nimport QuickAdd from \"@/pages/quick-add\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <Switch>\n      {/* Public routes - no authentication required */}\n      <Route path=\"/sign-contract/:id\" component={SignContract} />\n      <Route path=\"/quick-add\" component={QuickAdd} />\n      \n      {isLoading || !isAuthenticated ? (\n        <Route path=\"/\" component={Landing} />\n      ) : (\n        <>\n          <Route path=\"/\" component={Dashboard} />\n          <Route path=\"/enquiries\" component={Enquiries} />\n          <Route path=\"/contracts\" component={Contracts} />\n          <Route path=\"/invoices\" component={Invoices} />\n          <Route path=\"/calendar\" component={Calendar} />\n          <Route path=\"/compliance\" component={Compliance} />\n          <Route path=\"/settings\" component={Settings} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1873},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(271, 81%, 56%);\n  --primary-foreground: hsl(0, 0%, 98%);\n  --secondary: hsl(60, 4.8%, 95.9%);\n  --secondary-foreground: hsl(24, 9.8%, 10%);\n  --accent: hsl(60, 4.8%, 95.9%);\n  --accent-foreground: hsl(24, 9.8%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(271, 81%, 56%);\n  --radius: 0.5rem;\n  --chart-1: hsl(12, 76%, 61%);\n  --chart-2: hsl(173, 58%, 39%);\n  --chart-3: hsl(197, 37%, 24%);\n  --chart-4: hsl(43, 74%, 66%);\n  --chart-5: hsl(27, 87%, 67%);\n  --sidebar-background: hsl(0, 0%, 98%);\n  --sidebar-foreground: hsl(240, 5.3%, 26.1%);\n  --sidebar-primary: hsl(271, 81%, 56%);\n  --sidebar-primary-foreground: hsl(0, 0%, 98%);\n  --sidebar-accent: hsl(60, 4.8%, 95.9%);\n  --sidebar-accent-foreground: hsl(240, 5.9%, 10%);\n  --sidebar-border: hsl(220, 13%, 91%);\n  --sidebar-ring: hsl(271, 81%, 56%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(271, 81%, 56%);\n  --primary-foreground: hsl(0, 0%, 98%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(271, 81%, 56%);\n  --chart-1: hsl(220, 70%, 50%);\n  --chart-2: hsl(160, 60%, 45%);\n  --chart-3: hsl(30, 80%, 55%);\n  --chart-4: hsl(280, 65%, 60%);\n  --chart-5: hsl(340, 75%, 55%);\n  --sidebar-background: hsl(240, 5.9%, 10%);\n  --sidebar-foreground: hsl(240, 4.8%, 95.9%);\n  --sidebar-primary: hsl(271, 81%, 56%);\n  --sidebar-primary-foreground: hsl(0, 0%, 98%);\n  --sidebar-accent: hsl(240, 3.7%, 15.9%);\n  --sidebar-accent-foreground: hsl(240, 4.8%, 95.9%);\n  --sidebar-border: hsl(240, 3.7%, 15.9%);\n  --sidebar-ring: hsl(271, 81%, 56%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/* Custom styles for MusoBuddy */\n.glass-effect {\n  background: rgba(255, 255, 255, 0.1);\n  backdrop-filter: blur(10px);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.sidebar-transition {\n  transition: transform 0.3s ease-in-out;\n}\n\n@media (max-width: 768px) {\n  .sidebar-hidden {\n    transform: translateX(-100%);\n  }\n}\n\n/* Gradient backgrounds for musician theme */\n.musician-gradient {\n  background: linear-gradient(135deg, hsl(271, 81%, 56%) 0%, hsl(262, 83%, 58%) 100%);\n}\n\n.music-card-hover {\n  transition: all 0.3s ease;\n}\n\n.music-card-hover:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n}\n\n/* Custom scrollbar for webkit browsers */\n::-webkit-scrollbar {\n  width: 6px;\n}\n\n::-webkit-scrollbar-track {\n  background: hsl(60, 4.8%, 95.9%);\n}\n\n::-webkit-scrollbar-thumb {\n  background: hsl(271, 81%, 56%);\n  border-radius: 3px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: hsl(262, 83%, 58%);\n}\n","size_bytes":3676},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/calendar-widget.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowRight } from \"lucide-react\";\nimport type { Booking } from \"@shared/schema\";\n\nexport default function CalendarWidget() {\n  const { data: bookings = [], isLoading } = useQuery({\n    queryKey: [\"/api/bookings/upcoming\"],\n  });\n\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    return {\n      month: date.toLocaleDateString(\"en-GB\", { month: \"short\" }).toUpperCase(),\n      day: date.getDate().toString(),\n    };\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"confirmed\": return \"bg-green-50 text-green-900\";\n      case \"pending\": return \"bg-blue-50 text-blue-900\";\n      default: return \"bg-gray-50 text-gray-900\";\n    }\n  };\n\n  const getStatusBadgeColor = (status: string) => {\n    switch (status) {\n      case \"confirmed\": return \"text-green-600\";\n      case \"pending\": return \"text-blue-600\";\n      default: return \"text-gray-600\";\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Upcoming Gigs</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"animate-pulse space-y-4\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"flex items-center space-x-3 p-3 rounded-lg\">\n                <div className=\"w-12 h-12 bg-gray-200 rounded\"></div>\n                <div className=\"flex-1 space-y-2\">\n                  <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n                  <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Upcoming Gigs</CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {bookings.slice(0, 3).map((booking: Booking) => {\n          const dateInfo = formatDate(booking.eventDate);\n          return (\n            <div key={booking.id} className={`flex items-center space-x-3 p-3 rounded-lg ${getStatusColor(booking.status)}`}>\n              <div className=\"text-center\">\n                <div className={`text-xs font-medium ${getStatusBadgeColor(booking.status)}`}>\n                  {dateInfo.month}\n                </div>\n                <div className=\"text-lg font-bold\">\n                  {dateInfo.day}\n                </div>\n              </div>\n              <div className=\"flex-1\">\n                <h4 className=\"font-medium\">{booking.title}</h4>\n                <p className=\"text-sm opacity-75\">{booking.venue} ‚Ä¢ {booking.eventTime}</p>\n                <p className={`text-xs ${getStatusBadgeColor(booking.status)}`}>\n                  ¬£{booking.fee} ‚Ä¢ {booking.status === \"confirmed\" ? \"Confirmed\" : \"Pending\"}\n                </p>\n              </div>\n            </div>\n          );\n        })}\n\n        {bookings.length === 0 && (\n          <div className=\"text-center py-8 text-gray-500\">\n            <p>No upcoming gigs</p>\n            <p className=\"text-sm\">New bookings will appear here</p>\n          </div>\n        )}\n\n        <Button variant=\"ghost\" className=\"w-full justify-center\">\n          View Full Calendar <ArrowRight className=\"w-4 h-4 ml-1\" />\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3466},"client/src/components/compliance-alerts.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Shield, Zap, Music, ArrowRight } from \"lucide-react\";\nimport type { ComplianceDocument } from \"@shared/schema\";\n\nexport default function ComplianceAlerts() {\n  const { data: documents = [], isLoading } = useQuery({\n    queryKey: [\"/api/compliance\"],\n  });\n\n  const getIcon = (type: string) => {\n    switch (type) {\n      case \"public_liability\": return <Shield className=\"w-5 h-5\" />;\n      case \"pat_testing\": return <Zap className=\"w-5 h-5\" />;\n      case \"music_license\": return <Music className=\"w-5 h-5\" />;\n      default: return <Shield className=\"w-5 h-5\" />;\n    }\n  };\n\n  const getTypeLabel = (type: string) => {\n    switch (type) {\n      case \"public_liability\": return \"Public Liability\";\n      case \"pat_testing\": return \"PAT Testing\";\n      case \"music_license\": return \"Music License\";\n      default: return type;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"valid\": return \"bg-green-50 text-green-600\";\n      case \"expiring\": return \"bg-orange-50 text-orange-600\";\n      case \"expired\": return \"bg-red-50 text-red-600\";\n      default: return \"bg-gray-50 text-gray-600\";\n    }\n  };\n\n  const getStatusBadge = (status: string, expiryDate?: string) => {\n    if (status === \"valid\") {\n      return <Badge className=\"bg-green-100 text-green-800\">Valid</Badge>;\n    } else if (status === \"expiring\") {\n      const days = expiryDate ? Math.ceil((new Date(expiryDate).getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24)) : 0;\n      return <Badge className=\"bg-orange-100 text-orange-800\">{days} days</Badge>;\n    } else {\n      return <Badge variant=\"destructive\">Expired</Badge>;\n    }\n  };\n\n  // Default compliance items if no data\n  const defaultCompliance = [\n    { type: \"public_liability\", status: \"valid\" },\n    { type: \"pat_testing\", status: \"expiring\", expiryDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString() },\n    { type: \"music_license\", status: \"valid\" },\n  ];\n\n  const complianceToShow = documents.length > 0 ? documents : defaultCompliance;\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Compliance Status</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"animate-pulse space-y-3\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"flex items-center justify-between p-3 rounded-lg\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-5 h-5 bg-gray-200 rounded\"></div>\n                  <div className=\"h-4 bg-gray-200 rounded w-24\"></div>\n                </div>\n                <div className=\"h-5 bg-gray-200 rounded w-12\"></div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Compliance Status</CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-3\">\n        {complianceToShow.map((doc: ComplianceDocument | any, index: number) => (\n          <div key={doc.id || index} className={`flex items-center justify-between p-3 rounded-lg ${getStatusColor(doc.status)}`}>\n            <div className=\"flex items-center space-x-3\">\n              {getIcon(doc.type)}\n              <span className=\"font-medium\">{getTypeLabel(doc.type)}</span>\n            </div>\n            {getStatusBadge(doc.status, doc.expiryDate)}\n          </div>\n        ))}\n\n        <Button variant=\"ghost\" className=\"w-full justify-center\">\n          Manage Documents <ArrowRight className=\"w-4 h-4 ml-1\" />\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3845},"client/src/components/dashboard-header.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Bell, Search, Plus } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function DashboardHeader() {\n  const { user } = useAuth();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  return (\n    <header className=\"bg-white border-b border-gray-200 px-6 py-4\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <h2 className=\"text-2xl font-bold text-gray-900\">Dashboard</h2>\n          <div className=\"hidden md:flex items-center space-x-2 text-sm text-gray-500\">\n            <span>Welcome back, <span className=\"font-medium text-gray-900\">{user?.firstName || \"User\"}</span></span>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center space-x-4\">\n          {/* Search */}\n          <div className=\"hidden md:block relative\">\n            <Input \n              type=\"text\" \n              placeholder=\"Search enquiries...\" \n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"w-64 pl-10\"\n            />\n            <Search className=\"absolute left-3 top-3 w-4 h-4 text-gray-400\" />\n          </div>\n          \n          {/* Notifications */}\n          <button className=\"relative p-2 text-gray-400 hover:text-gray-600\">\n            <Bell className=\"w-6 h-6\" />\n            <span className=\"absolute -top-1 -right-1 w-5 h-5 bg-red-500 text-white text-xs rounded-full flex items-center justify-center\">\n              3\n            </span>\n          </button>\n          \n          {/* Quick Actions */}\n          <Link href=\"/enquiries?action=new\">\n            <Button className=\"bg-purple-600 hover:bg-purple-700\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              New Enquiry\n            </Button>\n          </Link>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":2048},"client/src/components/kanban-board.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { DollarSign, Clock, MoreHorizontal, Filter } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport type { Enquiry } from \"@shared/schema\";\n\nexport default function KanbanBoard() {\n  const { data: enquiries = [], isLoading } = useQuery({\n    queryKey: [\"/api/enquiries\"],\n  });\n\n  const groupedEnquiries = {\n    new: enquiries.filter((e: Enquiry) => e.status === \"new\"),\n    qualified: enquiries.filter((e: Enquiry) => e.status === \"qualified\"),\n    contract_sent: enquiries.filter((e: Enquiry) => e.status === \"contract_sent\"),\n    confirmed: enquiries.filter((e: Enquiry) => e.status === \"confirmed\"),\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"new\": return \"bg-gray-50 border-l-gray-300\";\n      case \"qualified\": return \"bg-blue-50 border-l-blue-400\";\n      case \"contract_sent\": return \"bg-purple-50 border-l-purple-400\";\n      case \"confirmed\": return \"bg-green-50 border-l-green-400\";\n      default: return \"bg-gray-50 border-l-gray-300\";\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"new\": return <Badge variant=\"secondary\">NEW</Badge>;\n      case \"qualified\": return <Badge className=\"bg-blue-100 text-blue-800\">QUALIFIED</Badge>;\n      case \"contract_sent\": return <Badge className=\"bg-purple-100 text-purple-800\">PENDING</Badge>;\n      case \"confirmed\": return <Badge className=\"bg-green-100 text-green-800\">CONFIRMED</Badge>;\n      default: return <Badge variant=\"secondary\">NEW</Badge>;\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    if (!dateString) return \"\";\n    const date = new Date(dateString);\n    return date.toLocaleDateString(\"en-GB\", { day: \"numeric\", month: \"short\" });\n  };\n\n  const formatTime = (dateString: string) => {\n    if (!dateString) return \"\";\n    const date = new Date(dateString);\n    const now = new Date();\n    const diffHours = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60));\n    \n    if (diffHours < 24) {\n      return `${diffHours} hours ago`;\n    } else {\n      const diffDays = Math.floor(diffHours / 24);\n      return `${diffDays} day${diffDays > 1 ? 's' : ''} ago`;\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Enquiry Pipeline</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"animate-pulse space-y-4\">\n            <div className=\"h-4 bg-gray-200 rounded w-1/4\"></div>\n            <div className=\"space-y-3\">\n              {[...Array(3)].map((_, i) => (\n                <div key={i} className=\"h-32 bg-gray-200 rounded\"></div>\n              ))}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle>Enquiry Pipeline</CardTitle>\n          <div className=\"flex items-center space-x-2\">\n            <Button variant=\"ghost\" size=\"sm\">\n              <Filter className=\"w-4 h-4\" />\n            </Button>\n            <Button variant=\"ghost\" size=\"sm\">\n              <MoreHorizontal className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n      \n      <CardContent>\n        <div className=\"overflow-x-auto\">\n          <div className=\"flex space-x-6 min-w-max\">\n            {/* New Enquiries Column */}\n            <div className=\"w-80\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h4 className=\"font-medium text-gray-900\">New Enquiries</h4>\n                <Badge variant=\"secondary\">{groupedEnquiries.new.length}</Badge>\n              </div>\n              <div className=\"space-y-3\">\n                {groupedEnquiries.new.map((enquiry: Enquiry) => (\n                  <div key={enquiry.id} className={`p-4 rounded-lg border-l-4 hover:shadow-md transition-shadow cursor-pointer ${getStatusColor(enquiry.status)}`}>\n                    <div className=\"flex items-start justify-between mb-2\">\n                      <h5 className=\"font-medium text-gray-900\">{enquiry.title}</h5>\n                      {getStatusBadge(enquiry.status)}\n                    </div>\n                    <p className=\"text-sm text-gray-600 mb-2\">{enquiry.clientName}</p>\n                    <div className=\"flex items-center justify-between text-xs text-gray-500\">\n                      <span className=\"flex items-center\">\n                        <DollarSign className=\"w-3 h-3 mr-1\" />\n                        ¬£{enquiry.estimatedValue || \"TBC\"}\n                      </span>\n                      <span className=\"flex items-center\">\n                        <Clock className=\"w-3 h-3 mr-1\" />\n                        {formatTime(enquiry.createdAt!)}\n                      </span>\n                    </div>\n                  </div>\n                ))}\n                {groupedEnquiries.new.length === 0 && (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    <p>No new enquiries</p>\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* Qualified Column */}\n            <div className=\"w-80\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h4 className=\"font-medium text-gray-900\">Qualified</h4>\n                <Badge className=\"bg-blue-100 text-blue-600\">{groupedEnquiries.qualified.length}</Badge>\n              </div>\n              <div className=\"space-y-3\">\n                {groupedEnquiries.qualified.map((enquiry: Enquiry) => (\n                  <div key={enquiry.id} className={`p-4 rounded-lg border-l-4 hover:shadow-md transition-shadow cursor-pointer ${getStatusColor(enquiry.status)}`}>\n                    <div className=\"flex items-start justify-between mb-2\">\n                      <h5 className=\"font-medium text-gray-900\">{enquiry.title}</h5>\n                      {getStatusBadge(enquiry.status)}\n                    </div>\n                    <p className=\"text-sm text-gray-600 mb-2\">{enquiry.clientName}</p>\n                    <div className=\"flex items-center justify-between text-xs text-gray-500\">\n                      <span className=\"flex items-center\">\n                        <DollarSign className=\"w-3 h-3 mr-1\" />\n                        ¬£{enquiry.estimatedValue || \"TBC\"}\n                      </span>\n                      <span className=\"flex items-center\">\n                        <Clock className=\"w-3 h-3 mr-1\" />\n                        {formatTime(enquiry.createdAt!)}\n                      </span>\n                    </div>\n                    {enquiry.eventDate && (\n                      <div className=\"mt-2 text-xs text-blue-600\">\n                        Event: {formatDate(enquiry.eventDate)}\n                      </div>\n                    )}\n                  </div>\n                ))}\n                {groupedEnquiries.qualified.length === 0 && (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    <p>No qualified enquiries</p>\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* Contract Sent Column */}\n            <div className=\"w-80\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h4 className=\"font-medium text-gray-900\">Contract Sent</h4>\n                <Badge className=\"bg-purple-100 text-purple-600\">{groupedEnquiries.contract_sent.length}</Badge>\n              </div>\n              <div className=\"space-y-3\">\n                {groupedEnquiries.contract_sent.map((enquiry: Enquiry) => (\n                  <div key={enquiry.id} className={`p-4 rounded-lg border-l-4 hover:shadow-md transition-shadow cursor-pointer ${getStatusColor(enquiry.status)}`}>\n                    <div className=\"flex items-start justify-between mb-2\">\n                      <h5 className=\"font-medium text-gray-900\">{enquiry.title}</h5>\n                      {getStatusBadge(enquiry.status)}\n                    </div>\n                    <p className=\"text-sm text-gray-600 mb-2\">{enquiry.clientName}</p>\n                    <div className=\"flex items-center justify-between text-xs text-gray-500\">\n                      <span className=\"flex items-center\">\n                        <DollarSign className=\"w-3 h-3 mr-1\" />\n                        ¬£{enquiry.estimatedValue || \"TBC\"}\n                      </span>\n                      <span className=\"flex items-center\">\n                        <Clock className=\"w-3 h-3 mr-1\" />\n                        {formatTime(enquiry.createdAt!)}\n                      </span>\n                    </div>\n                    <div className=\"mt-2 text-xs text-purple-600\">\n                      Contract sent, awaiting signature\n                    </div>\n                  </div>\n                ))}\n                {groupedEnquiries.contract_sent.length === 0 && (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    <p>No pending contracts</p>\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* Confirmed Column */}\n            <div className=\"w-80\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h4 className=\"font-medium text-gray-900\">Confirmed</h4>\n                <Badge className=\"bg-green-100 text-green-600\">{groupedEnquiries.confirmed.length}</Badge>\n              </div>\n              <div className=\"space-y-3\">\n                {groupedEnquiries.confirmed.map((enquiry: Enquiry) => (\n                  <div key={enquiry.id} className={`p-4 rounded-lg border-l-4 hover:shadow-md transition-shadow cursor-pointer ${getStatusColor(enquiry.status)}`}>\n                    <div className=\"flex items-start justify-between mb-2\">\n                      <h5 className=\"font-medium text-gray-900\">{enquiry.title}</h5>\n                      {getStatusBadge(enquiry.status)}\n                    </div>\n                    <p className=\"text-sm text-gray-600 mb-2\">{enquiry.clientName}</p>\n                    <div className=\"flex items-center justify-between text-xs text-gray-500\">\n                      <span className=\"flex items-center\">\n                        <DollarSign className=\"w-3 h-3 mr-1\" />\n                        ¬£{enquiry.estimatedValue || \"TBC\"}\n                      </span>\n                      {enquiry.venue && (\n                        <span className=\"flex items-center\">\n                          {enquiry.venue}\n                        </span>\n                      )}\n                    </div>\n                    <div className=\"mt-2 text-xs text-green-600\">\n                      All documents signed, ready to perform\n                    </div>\n                  </div>\n                ))}\n                {groupedEnquiries.confirmed.length === 0 && (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    <p>No confirmed bookings</p>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":11291},"client/src/components/mobile-nav.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Home, Inbox, Calendar, DollarSign, User } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\nexport default function MobileNav() {\n  const [location] = useLocation();\n\n  const isActive = (path: string) => {\n    return location === path;\n  };\n\n  return (\n    <div className=\"md:hidden fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 px-4 py-2 z-40\">\n      <div className=\"flex justify-around\">\n        <Link href=\"/\" className={cn(\n          \"flex flex-col items-center space-y-1 py-2\",\n          isActive(\"/\") ? \"text-purple-600\" : \"text-gray-400\"\n        )}>\n          <Home className=\"w-6 h-6\" />\n          <span className={cn(\"text-xs\", isActive(\"/\") && \"font-medium\")}>Dashboard</span>\n        </Link>\n        <Link href=\"/enquiries\" className={cn(\n          \"flex flex-col items-center space-y-1 py-2\",\n          isActive(\"/enquiries\") ? \"text-purple-600\" : \"text-gray-400\"\n        )}>\n          <Inbox className=\"w-6 h-6\" />\n          <span className={cn(\"text-xs\", isActive(\"/enquiries\") && \"font-medium\")}>Enquiries</span>\n        </Link>\n        <Link href=\"/calendar\" className={cn(\n          \"flex flex-col items-center space-y-1 py-2\",\n          isActive(\"/calendar\") ? \"text-purple-600\" : \"text-gray-400\"\n        )}>\n          <Calendar className=\"w-6 h-6\" />\n          <span className={cn(\"text-xs\", isActive(\"/calendar\") && \"font-medium\")}>Calendar</span>\n        </Link>\n        <Link href=\"/invoices\" className={cn(\n          \"flex flex-col items-center space-y-1 py-2\",\n          isActive(\"/invoices\") ? \"text-purple-600\" : \"text-gray-400\"\n        )}>\n          <DollarSign className=\"w-6 h-6\" />\n          <span className={cn(\"text-xs\", isActive(\"/invoices\") && \"font-medium\")}>Invoices</span>\n        </Link>\n        <Link href=\"/compliance\" className={cn(\n          \"flex flex-col items-center space-y-1 py-2\",\n          isActive(\"/compliance\") ? \"text-purple-600\" : \"text-gray-400\"\n        )}>\n          <User className=\"w-6 h-6\" />\n          <span className={cn(\"text-xs\", isActive(\"/compliance\") && \"font-medium\")}>Profile</span>\n        </Link>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2175},"client/src/components/quick-actions.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Plus, FileText, DollarSign, CalendarPlus } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function QuickActions() {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Quick Actions</CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-3\">\n        <Link href=\"/enquiries?action=new\">\n          <Button \n            variant=\"outline\" \n            className=\"w-full justify-start bg-purple-50 text-purple-700 border-purple-200 hover:bg-purple-100\"\n          >\n            <Plus className=\"w-4 h-4 mr-3\" />\n            New Enquiry\n          </Button>\n        </Link>\n        <Link href=\"/contracts?action=new\">\n          <Button variant=\"outline\" className=\"w-full justify-start hover:bg-gray-50\">\n            <FileText className=\"w-4 h-4 mr-3\" />\n            Generate Contract\n          </Button>\n        </Link>\n        <Link href=\"/invoices?action=new\">\n          <Button variant=\"outline\" className=\"w-full justify-start hover:bg-gray-50\">\n            <DollarSign className=\"w-4 h-4 mr-3\" />\n            Create Invoice\n          </Button>\n        </Link>\n        <Link href=\"/calendar?action=block\">\n          <Button variant=\"outline\" className=\"w-full justify-start hover:bg-gray-50\">\n            <CalendarPlus className=\"w-4 h-4 mr-3\" />\n            Block Calendar\n          </Button>\n        </Link>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1529},"client/src/components/sidebar.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { cn } from \"@/lib/utils\";\nimport { Link, useLocation } from \"wouter\";\nimport { \n  Home, \n  Inbox, \n  FileText, \n  DollarSign, \n  Calendar, \n  Shield, \n  BarChart3, \n  Music,\n  Settings,\n  X\n} from \"lucide-react\";\n\ninterface SidebarProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function Sidebar({ isOpen, onClose }: SidebarProps) {\n  const { user } = useAuth();\n  const [location] = useLocation();\n\n  const handleLogout = () => {\n    window.location.href = \"/api/logout\";\n  };\n\n  const isActive = (path: string) => {\n    return location === path;\n  };\n\n  return (\n    <>\n      {/* Backdrop */}\n      {isOpen && (\n        <div \n          className=\"fixed inset-0 bg-black bg-opacity-50 z-40 md:hidden\"\n          onClick={onClose}\n        />\n      )}\n\n      {/* Sidebar */}\n      <div className={cn(\n        \"fixed left-0 top-0 h-full w-64 bg-white shadow-xl z-50 transition-transform duration-300 ease-in-out\",\n        \"md:translate-x-0\",\n        isOpen ? \"translate-x-0\" : \"-translate-x-full\"\n      )}>\n        {/* Close button for mobile */}\n        <button\n          onClick={onClose}\n          className=\"absolute top-4 right-4 p-2 rounded-lg hover:bg-gray-100 md:hidden\"\n        >\n          <X className=\"w-5 h-5 text-gray-600\" />\n        </button>\n\n        {/* Header */}\n        <div className=\"p-6 border-b border-gray-200\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-gradient-to-r from-purple-500 to-purple-600 rounded-xl flex items-center justify-center\">\n              <Music className=\"w-6 h-6 text-white\" />\n            </div>\n            <div>\n              <h1 className=\"text-xl font-bold text-gray-900\">MusoBuddy</h1>\n              <p className=\"text-sm text-gray-500\">Admin made easy</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Navigation */}\n        <nav className=\"p-4 space-y-2\">\n          <Link href=\"/\" onClick={onClose} className={cn(\n            \"flex items-center space-x-3 px-4 py-3 rounded-lg font-medium transition-colors\",\n            isActive(\"/\") \n              ? \"bg-purple-50 text-purple-700\" \n              : \"text-gray-600 hover:bg-gray-50\"\n          )}>\n            <Home className=\"w-5 h-5\" />\n            <span>Dashboard</span>\n          </Link>\n          <Link href=\"/enquiries\" onClick={onClose} className={cn(\n            \"flex items-center space-x-3 px-4 py-3 rounded-lg transition-colors\",\n            isActive(\"/enquiries\") \n              ? \"bg-purple-50 text-purple-700 font-medium\" \n              : \"text-gray-600 hover:bg-gray-50\"\n          )}>\n            <Inbox className=\"w-5 h-5\" />\n            <span>Enquiries</span>\n          </Link>\n          <Link href=\"/contracts\" onClick={onClose} className={cn(\n            \"flex items-center space-x-3 px-4 py-3 rounded-lg transition-colors\",\n            isActive(\"/contracts\") \n              ? \"bg-purple-50 text-purple-700 font-medium\" \n              : \"text-gray-600 hover:bg-gray-50\"\n          )}>\n            <FileText className=\"w-5 h-5\" />\n            <span>Contracts</span>\n          </Link>\n          <Link href=\"/invoices\" onClick={onClose} className={cn(\n            \"flex items-center space-x-3 px-4 py-3 rounded-lg transition-colors\",\n            isActive(\"/invoices\") \n              ? \"bg-purple-50 text-purple-700 font-medium\" \n              : \"text-gray-600 hover:bg-gray-50\"\n          )}>\n            <DollarSign className=\"w-5 h-5\" />\n            <span>Invoices</span>\n          </Link>\n          <Link href=\"/calendar\" onClick={onClose} className={cn(\n            \"flex items-center space-x-3 px-4 py-3 rounded-lg transition-colors\",\n            isActive(\"/calendar\") \n              ? \"bg-purple-50 text-purple-700 font-medium\" \n              : \"text-gray-600 hover:bg-gray-50\"\n          )}>\n            <Calendar className=\"w-5 h-5\" />\n            <span>Calendar</span>\n          </Link>\n          <Link href=\"/compliance\" onClick={onClose} className={cn(\n            \"flex items-center space-x-3 px-4 py-3 rounded-lg transition-colors\",\n            isActive(\"/compliance\") \n              ? \"bg-purple-50 text-purple-700 font-medium\" \n              : \"text-gray-600 hover:bg-gray-50\"\n          )}>\n            <Shield className=\"w-5 h-5\" />\n            <span>Compliance</span>\n          </Link>\n          <Link href=\"/settings\" onClick={onClose} className={cn(\n            \"flex items-center space-x-3 px-4 py-3 rounded-lg transition-colors\",\n            isActive(\"/settings\") \n              ? \"bg-purple-50 text-purple-700 font-medium\" \n              : \"text-gray-600 hover:bg-gray-50\"\n          )}>\n            <Settings className=\"w-5 h-5\" />\n            <span>Settings</span>\n          </Link>\n        </nav>\n\n        {/* User Profile */}\n        <div className=\"absolute bottom-0 left-0 right-0 p-4 border-t border-gray-200\">\n          <div className=\"flex items-center space-x-3\">\n            {user?.profileImageUrl ? (\n              <img \n                src={user.profileImageUrl} \n                alt=\"Profile\" \n                className=\"w-10 h-10 rounded-full object-cover\"\n              />\n            ) : (\n              <div className=\"w-10 h-10 bg-gradient-to-r from-purple-500 to-purple-600 rounded-full flex items-center justify-center\">\n                <Music className=\"w-5 h-5 text-white\" />\n              </div>\n            )}\n            <div className=\"flex-1\">\n              <p className=\"text-sm font-medium text-gray-900\">\n                {user?.firstName || user?.email || \"User\"}\n              </p>\n              <p className=\"text-xs text-gray-500\">Musician</p>\n            </div>\n            <button \n              onClick={handleLogout}\n              className=\"text-gray-400 hover:text-gray-600\"\n            >\n              <Settings className=\"w-5 h-5\" />\n            </button>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","size_bytes":5934},"client/src/components/stats-cards.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { DollarSign, Calendar, FileText, TrendingUp, ArrowUp, Clock } from \"lucide-react\";\n\nexport default function StatsCards() {\n  const { data: stats, isLoading } = useQuery({\n    queryKey: [\"/api/dashboard/stats\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {[...Array(4)].map((_, i) => (\n          <Card key={i}>\n            <CardContent className=\"p-6\">\n              <div className=\"animate-pulse\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-2\">\n                    <div className=\"h-4 bg-gray-200 rounded w-20\"></div>\n                    <div className=\"h-8 bg-gray-200 rounded w-16\"></div>\n                    <div className=\"h-3 bg-gray-200 rounded w-24\"></div>\n                  </div>\n                  <div className=\"w-12 h-12 bg-gray-200 rounded-lg\"></div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">This Month</p>\n              <p className=\"text-3xl font-bold text-gray-900\">\n                ¬£{stats?.monthlyRevenue?.toLocaleString() || \"0\"}\n              </p>\n              <p className=\"text-sm text-green-600 mt-1 flex items-center\">\n                <ArrowUp className=\"w-4 h-4 mr-1\" />\n                12% vs last month\n              </p>\n            </div>\n            <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n              <DollarSign className=\"w-6 h-6 text-green-600\" />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n      \n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Active Bookings</p>\n              <p className=\"text-3xl font-bold text-gray-900\">\n                {stats?.activeBookings || 0}\n              </p>\n              <p className=\"text-sm text-blue-600 mt-1 flex items-center\">\n                <Calendar className=\"w-4 h-4 mr-1\" />\n                Next: Tomorrow\n              </p>\n            </div>\n            <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n              <Calendar className=\"w-6 h-6 text-blue-600\" />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n      \n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Pending Invoices</p>\n              <p className=\"text-3xl font-bold text-gray-900\">\n                ¬£{stats?.pendingInvoices?.toLocaleString() || \"0\"}\n              </p>\n              <p className=\"text-sm text-orange-600 mt-1 flex items-center\">\n                <Clock className=\"w-4 h-4 mr-1\" />\n                5 overdue\n              </p>\n            </div>\n            <div className=\"w-12 h-12 bg-orange-100 rounded-lg flex items-center justify-center\">\n              <FileText className=\"w-6 h-6 text-orange-600\" />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n      \n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Conversion Rate</p>\n              <p className=\"text-3xl font-bold text-gray-900\">\n                {stats?.conversionRate || 0}%\n              </p>\n              <p className=\"text-sm text-green-600 mt-1 flex items-center\">\n                <ArrowUp className=\"w-4 h-4 mr-1\" />\n                Above target (70%)\n              </p>\n            </div>\n            <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center\">\n              <TrendingUp className=\"w-6 h-6 text-purple-600\" />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4412},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":257},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey[0] as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1376},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/calendar.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Calendar as CalendarIcon, Clock, MapPin, User, Plus, Filter, ArrowLeft } from \"lucide-react\";\nimport { Calendar as CalendarComponent } from \"@/components/ui/calendar\";\nimport { insertBookingSchema, type Booking } from \"@shared/schema\";\nimport { Link, useLocation } from \"wouter\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { z } from \"zod\";\n\nconst bookingFormSchema = insertBookingSchema.extend({\n  eventDate: z.string(),\n});\n\nexport default function Calendar() {\n  const [selectedDate, setSelectedDate] = useState<Date | undefined>(new Date());\n  const [viewMode, setViewMode] = useState<\"month\" | \"week\" | \"day\">(\"month\");\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [location, navigate] = useLocation();\n  const { toast } = useToast();\n\n  // Check URL parameters to auto-open dialog\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    if (urlParams.get('action') === 'block') {\n      setIsDialogOpen(true);\n      window.history.replaceState({}, document.title, window.location.pathname);\n    }\n  }, [location]);\n\n  const form = useForm<z.infer<typeof bookingFormSchema>>({\n    resolver: zodResolver(bookingFormSchema),\n    defaultValues: {\n      title: \"\",\n      clientName: \"\",\n      eventDate: \"\",\n      eventTime: \"\",\n      venue: \"\",\n      fee: \"\",\n      contractId: 0,\n    },\n  });\n\n  const { data: bookings = [], isLoading } = useQuery({\n    queryKey: [\"/api/bookings\"],\n  });\n\n  const createBookingMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof bookingFormSchema>) => {\n      const bookingData = {\n        ...data,\n        eventDate: new Date(data.eventDate).toISOString(),\n        fee: parseFloat(data.fee) || 0,\n        contractId: data.contractId === 0 ? null : data.contractId,\n      };\n      return apiRequest(\"/api/bookings\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(bookingData),\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/bookings\"] });\n      toast({\n        title: \"Success\",\n        description: \"Time blocked successfully\",\n      });\n      setIsDialogOpen(false);\n      form.reset();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to block time. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDialogClose = (open: boolean) => {\n    setIsDialogOpen(open);\n    if (!open) {\n      form.reset();\n    }\n  };\n\n  const onSubmit = (data: z.infer<typeof bookingFormSchema>) => {\n    createBookingMutation.mutate(data);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"confirmed\": return \"bg-green-100 text-green-800 border-green-200\";\n      case \"pending\": return \"bg-blue-100 text-blue-800 border-blue-200\";\n      case \"cancelled\": return \"bg-red-100 text-red-800 border-red-200\";\n      default: return \"bg-gray-100 text-gray-800 border-gray-200\";\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString(\"en-GB\", {\n      weekday: \"long\",\n      year: \"numeric\",\n      month: \"long\",\n      day: \"numeric\",\n    });\n  };\n\n  const formatTime = (timeString: string) => {\n    return timeString || \"Time TBC\";\n  };\n\n  const getBookingsForDate = (date: Date) => {\n    return bookings.filter((booking: Booking) => {\n      const bookingDate = new Date(booking.eventDate);\n      return bookingDate.toDateString() === date.toDateString();\n    });\n  };\n\n  const selectedDateBookings = selectedDate ? getBookingsForDate(selectedDate) : [];\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 p-6\">\n        <div className=\"animate-pulse space-y-6\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/4\"></div>\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            <div className=\"lg:col-span-2 h-96 bg-gray-200 rounded\"></div>\n            <div className=\"h-96 bg-gray-200 rounded\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-6\">\n      <div className=\"max-w-7xl mx-auto space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Link href=\"/\">\n              <Button variant=\"outline\" size=\"sm\" className=\"bg-white border-purple-200 text-purple-700 hover:bg-purple-50 hover:border-purple-300\">\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Dashboard\n              </Button>\n            </Link>\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900\">Calendar</h1>\n              <p className=\"text-gray-600\">View and manage your performance schedule</p>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-3\">\n            <div className=\"flex items-center space-x-1 bg-white rounded-lg border p-1\">\n              <Button\n                variant={viewMode === \"month\" ? \"default\" : \"ghost\"}\n                size=\"sm\"\n                onClick={() => setViewMode(\"month\")}\n              >\n                Month\n              </Button>\n              <Button\n                variant={viewMode === \"week\" ? \"default\" : \"ghost\"}\n                size=\"sm\"\n                onClick={() => setViewMode(\"week\")}\n              >\n                Week\n              </Button>\n              <Button\n                variant={viewMode === \"day\" ? \"default\" : \"ghost\"}\n                size=\"sm\"\n                onClick={() => setViewMode(\"day\")}\n              >\n                Day\n              </Button>\n            </div>\n            \n            <Button \n              className=\"bg-purple-600 hover:bg-purple-700\"\n              onClick={() => setIsDialogOpen(true)}\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Block Time\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Calendar */}\n          <Card className=\"lg:col-span-2\">\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle>Performance Calendar</CardTitle>\n                <Button variant=\"outline\" size=\"sm\">\n                  <Filter className=\"w-4 h-4 mr-2\" />\n                  Sync with Google\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <CalendarComponent\n                mode=\"single\"\n                selected={selectedDate}\n                onSelect={setSelectedDate}\n                className=\"rounded-md border\"\n                modifiers={{\n                  booked: bookings.map((booking: Booking) => new Date(booking.eventDate)),\n                }}\n                modifiersClassNames={{\n                  booked: \"bg-purple-100 text-purple-900 font-semibold\",\n                }}\n              />\n              \n              <div className=\"mt-4 flex items-center space-x-4 text-sm text-gray-600\">\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"w-3 h-3 bg-purple-100 border border-purple-300 rounded\"></div>\n                  <span>Booked dates</span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"w-3 h-3 bg-green-100 border border-green-300 rounded\"></div>\n                  <span>Confirmed gigs</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Selected Date Details */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <CalendarIcon className=\"w-5 h-5\" />\n                <span>\n                  {selectedDate ? \n                    selectedDate.toLocaleDateString(\"en-GB\", { month: \"short\", day: \"numeric\" }) :\n                    \"Select Date\"\n                  }\n                </span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {selectedDate && (\n                <div className=\"text-sm text-gray-600 mb-4\">\n                  {formatDate(selectedDate.toISOString())}\n                </div>\n              )}\n\n              {selectedDateBookings.length === 0 ? (\n                <div className=\"text-center py-8 text-gray-500\">\n                  <CalendarIcon className=\"w-12 h-12 text-gray-300 mx-auto mb-3\" />\n                  <p>No bookings on this date</p>\n                  <p className=\"text-sm\">Available for new gigs</p>\n                </div>\n              ) : (\n                selectedDateBookings.map((booking: Booking) => (\n                  <div key={booking.id} className={`p-4 rounded-lg border-2 ${getStatusColor(booking.status)}`}>\n                    <div className=\"flex items-start justify-between mb-2\">\n                      <h4 className=\"font-semibold\">{booking.title}</h4>\n                      <Badge className={getStatusColor(booking.status).replace('border-', '').replace('bg-', 'bg-').replace('text-', 'text-')}>\n                        {booking.status}\n                      </Badge>\n                    </div>\n                    \n                    <div className=\"space-y-2 text-sm\">\n                      <div className=\"flex items-center space-x-2 text-gray-600\">\n                        <User className=\"w-4 h-4\" />\n                        <span>{booking.clientName}</span>\n                      </div>\n                      \n                      <div className=\"flex items-center space-x-2 text-gray-600\">\n                        <Clock className=\"w-4 h-4\" />\n                        <span>{formatTime(booking.eventTime)}</span>\n                      </div>\n                      \n                      <div className=\"flex items-center space-x-2 text-gray-600\">\n                        <MapPin className=\"w-4 h-4\" />\n                        <span>{booking.venue}</span>\n                      </div>\n                      \n                      <div className=\"flex items-center justify-between mt-3 pt-2 border-t\">\n                        <span className=\"font-semibold text-green-600\">\n                          ¬£{Number(booking.fee).toLocaleString()}\n                        </span>\n                        <Button size=\"sm\" variant=\"outline\">\n                          View Details\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                ))\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Upcoming Gigs Summary */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Upcoming Performances</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {bookings.slice(0, 5).map((booking: Booking) => (\n                <div key={booking.id} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"text-center\">\n                      <div className=\"text-sm font-medium text-purple-600\">\n                        {new Date(booking.eventDate).toLocaleDateString(\"en-GB\", { month: \"short\" }).toUpperCase()}\n                      </div>\n                      <div className=\"text-lg font-bold\">\n                        {new Date(booking.eventDate).getDate()}\n                      </div>\n                    </div>\n                    \n                    <div>\n                      <h4 className=\"font-medium\">{booking.title}</h4>\n                      <p className=\"text-sm text-gray-600\">{booking.venue} ‚Ä¢ {booking.eventTime}</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"text-right\">\n                    <p className=\"font-semibold text-green-600\">¬£{Number(booking.fee).toLocaleString()}</p>\n                    <Badge className={getStatusColor(booking.status).replace('border-', '').replace('bg-', 'bg-').replace('text-', 'text-')}>\n                      {booking.status}\n                    </Badge>\n                  </div>\n                </div>\n              ))}\n              \n              {bookings.length === 0 && (\n                <div className=\"text-center py-8 text-gray-500\">\n                  <CalendarIcon className=\"w-16 h-16 text-gray-300 mx-auto mb-4\" />\n                  <p className=\"text-lg\">No upcoming performances</p>\n                  <p>Your confirmed bookings will appear here</p>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Block Time Dialog */}\n      <Dialog open={isDialogOpen} onOpenChange={handleDialogClose}>\n        <DialogContent className=\"max-w-lg\">\n          <DialogHeader>\n            <DialogTitle>Block Time</DialogTitle>\n          </DialogHeader>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"title\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Event Title</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"e.g., Wedding Reception, Private Party\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"clientName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Client Name</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter client name\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"eventDate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Event Date</FormLabel>\n                      <FormControl>\n                        <Input type=\"date\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"eventTime\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Event Time</FormLabel>\n                      <FormControl>\n                        <Input type=\"time\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n              \n              <FormField\n                control={form.control}\n                name=\"venue\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Venue</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter venue address\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"fee\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Fee (¬£)</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"number\" \n                        step=\"0.01\" \n                        placeholder=\"0.00\" \n                        {...field} \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"flex justify-end space-x-2 pt-4\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => handleDialogClose(false)}\n                >\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  className=\"bg-purple-600 hover:bg-purple-700\"\n                  disabled={createBookingMutation.isPending}\n                >\n                  {createBookingMutation.isPending ? \"Blocking...\" : \"Block Time\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":17775},"client/src/pages/compliance.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertComplianceDocumentSchema, type ComplianceDocument } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Plus, Search, Shield, Zap, Music, Upload, Download, AlertTriangle, CheckCircle, Clock, ArrowLeft } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { z } from \"zod\";\n\nconst complianceFormSchema = insertComplianceDocumentSchema.extend({\n  expiryDate: z.string().optional(),\n});\n\nexport default function Compliance() {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const { toast } = useToast();\n\n  const { data: documents = [], isLoading } = useQuery({\n    queryKey: [\"/api/compliance\"],\n  });\n\n  const createDocumentMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof complianceFormSchema>) => {\n      const documentData = {\n        ...data,\n        expiryDate: data.expiryDate ? new Date(data.expiryDate) : null,\n      };\n      return await apiRequest(\"/api/compliance\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(documentData),\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/compliance\"] });\n      setIsDialogOpen(false);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Compliance document added successfully!\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add document. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const form = useForm<z.infer<typeof complianceFormSchema>>({\n    resolver: zodResolver(complianceFormSchema),\n    defaultValues: {\n      type: \"\",\n      name: \"\",\n      expiryDate: \"\",\n      status: \"valid\",\n      documentUrl: \"\",\n    },\n  });\n\n  const onSubmit = (data: z.infer<typeof complianceFormSchema>) => {\n    createDocumentMutation.mutate(data);\n  };\n\n  const getIcon = (type: string) => {\n    switch (type) {\n      case \"public_liability\": return <Shield className=\"w-6 h-6\" />;\n      case \"pat_testing\": return <Zap className=\"w-6 h-6\" />;\n      case \"music_license\": return <Music className=\"w-6 h-6\" />;\n      default: return <Shield className=\"w-6 h-6\" />;\n    }\n  };\n\n  const getTypeLabel = (type: string) => {\n    switch (type) {\n      case \"public_liability\": return \"Public Liability Insurance\";\n      case \"pat_testing\": return \"PAT Testing Certificate\";\n      case \"music_license\": return \"Music Performance License\";\n      default: return type;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"valid\": return \"bg-green-50 text-green-600 border-green-200\";\n      case \"expiring\": return \"bg-orange-50 text-orange-600 border-orange-200\";\n      case \"expired\": return \"bg-red-50 text-red-600 border-red-200\";\n      default: return \"bg-gray-50 text-gray-600 border-gray-200\";\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"valid\": return <CheckCircle className=\"w-5 h-5 text-green-600\" />;\n      case \"expiring\": return <Clock className=\"w-5 h-5 text-orange-600\" />;\n      case \"expired\": return <AlertTriangle className=\"w-5 h-5 text-red-600\" />;\n      default: return <CheckCircle className=\"w-5 h-5 text-gray-600\" />;\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    if (!dateString) return \"No expiry date\";\n    return new Date(dateString).toLocaleDateString(\"en-GB\");\n  };\n\n  const getDaysUntilExpiry = (expiryDateString: string) => {\n    if (!expiryDateString) return null;\n    const expiryDate = new Date(expiryDateString);\n    const today = new Date();\n    const diffTime = expiryDate.getTime() - today.getTime();\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    return diffDays;\n  };\n\n  const getComplianceStatus = () => {\n    const expired = documents.filter((doc: ComplianceDocument) => doc.status === \"expired\").length;\n    const expiring = documents.filter((doc: ComplianceDocument) => doc.status === \"expiring\").length;\n    const valid = documents.filter((doc: ComplianceDocument) => doc.status === \"valid\").length;\n\n    return { expired, expiring, valid, total: documents.length };\n  };\n\n  const status = getComplianceStatus();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 p-6\">\n        <div className=\"animate-pulse space-y-6\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/4\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"h-32 bg-gray-200 rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-6\">\n      <div className=\"max-w-7xl mx-auto space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Link href=\"/\">\n              <Button variant=\"outline\" size=\"sm\" className=\"bg-white border-purple-200 text-purple-700 hover:bg-purple-50 hover:border-purple-300\">\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Dashboard\n              </Button>\n            </Link>\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900\">Compliance</h1>\n              <p className=\"text-gray-600\">Manage your insurance, licenses, and certifications</p>\n            </div>\n          </div>\n          \n          <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"bg-purple-600 hover:bg-purple-700\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add Document\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Add Compliance Document</DialogTitle>\n              </DialogHeader>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"type\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Document Type</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select document type\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"public_liability\">Public Liability Insurance</SelectItem>\n                            <SelectItem value=\"pat_testing\">PAT Testing Certificate</SelectItem>\n                            <SelectItem value=\"music_license\">Music Performance License</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Document Name</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"e.g., 2024 Public Liability Certificate\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"expiryDate\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Expiry Date</FormLabel>\n                        <FormControl>\n                          <Input type=\"date\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"documentUrl\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Document URL (Optional)</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"https://...\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"flex justify-end space-x-3\">\n                    <Button type=\"button\" variant=\"outline\" onClick={() => setIsDialogOpen(false)}>\n                      Cancel\n                    </Button>\n                    <Button type=\"submit\" disabled={createDocumentMutation.isPending}>\n                      {createDocumentMutation.isPending ? \"Adding...\" : \"Add Document\"}\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {/* Status Overview */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center\">\n                  <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                </div>\n                <div>\n                  <p className=\"text-sm text-gray-600\">Valid Documents</p>\n                  <p className=\"text-xl font-bold text-green-600\">{status.valid}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-10 h-10 bg-orange-100 rounded-lg flex items-center justify-center\">\n                  <Clock className=\"w-5 h-5 text-orange-600\" />\n                </div>\n                <div>\n                  <p className=\"text-sm text-gray-600\">Expiring Soon</p>\n                  <p className=\"text-xl font-bold text-orange-600\">{status.expiring}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-10 h-10 bg-red-100 rounded-lg flex items-center justify-center\">\n                  <AlertTriangle className=\"w-5 h-5 text-red-600\" />\n                </div>\n                <div>\n                  <p className=\"text-sm text-gray-600\">Expired</p>\n                  <p className=\"text-xl font-bold text-red-600\">{status.expired}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-10 h-10 bg-purple-100 rounded-lg flex items-center justify-center\">\n                  <Shield className=\"w-5 h-5 text-purple-600\" />\n                </div>\n                <div>\n                  <p className=\"text-sm text-gray-600\">Total Documents</p>\n                  <p className=\"text-xl font-bold text-purple-600\">{status.total}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Documents List */}\n        <div className=\"space-y-4\">\n          {documents.length === 0 ? (\n            <Card>\n              <CardContent className=\"p-12 text-center\">\n                <Shield className=\"w-16 h-16 text-gray-300 mx-auto mb-4\" />\n                <p className=\"text-gray-500 text-lg\">No compliance documents</p>\n                <p className=\"text-gray-400\">Add your insurance certificates and licenses to stay compliant</p>\n                <Button className=\"mt-4 bg-purple-600 hover:bg-purple-700\" onClick={() => setIsDialogOpen(true)}>\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add First Document\n                </Button>\n              </CardContent>\n            </Card>\n          ) : (\n            documents.map((document: ComplianceDocument) => {\n              const daysUntilExpiry = getDaysUntilExpiry(document.expiryDate!);\n              return (\n                <Card key={document.id} className=\"hover:shadow-md transition-shadow\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div className={`w-12 h-12 rounded-lg flex items-center justify-center ${getStatusColor(document.status)}`}>\n                          {getIcon(document.type)}\n                        </div>\n                        \n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center space-x-3 mb-2\">\n                            <h3 className=\"text-lg font-semibold text-gray-900\">\n                              {getTypeLabel(document.type)}\n                            </h3>\n                            <div className=\"flex items-center space-x-2\">\n                              {getStatusIcon(document.status)}\n                              <Badge className={getStatusColor(document.status)}>\n                                {document.status.toUpperCase()}\n                              </Badge>\n                            </div>\n                          </div>\n                          \n                          <p className=\"text-gray-600 mb-2\">{document.name}</p>\n                          \n                          <div className=\"flex items-center space-x-6 text-sm text-gray-500\">\n                            <span>Expires: {formatDate(document.expiryDate!)}</span>\n                            {daysUntilExpiry !== null && (\n                              <span className={\n                                daysUntilExpiry < 0 ? \"text-red-600 font-medium\" :\n                                daysUntilExpiry <= 30 ? \"text-orange-600 font-medium\" :\n                                \"text-gray-500\"\n                              }>\n                                {daysUntilExpiry < 0 ? `${Math.abs(daysUntilExpiry)} days overdue` :\n                                 daysUntilExpiry === 0 ? \"Expires today\" :\n                                 `${daysUntilExpiry} days remaining`}\n                              </span>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center space-x-2\">\n                        {document.documentUrl && (\n                          <Button variant=\"outline\" size=\"sm\">\n                            <Download className=\"w-4 h-4 mr-1\" />\n                            Download\n                          </Button>\n                        )}\n                        \n                        <Button variant=\"outline\" size=\"sm\">\n                          <Upload className=\"w-4 h-4 mr-1\" />\n                          Upload New\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })\n          )}\n        </div>\n\n        {/* Compliance Requirements Info */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Required Documents for Musicians</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center space-x-2\">\n                  <Shield className=\"w-5 h-5 text-blue-600\" />\n                  <h4 className=\"font-semibold\">Public Liability Insurance</h4>\n                </div>\n                <p className=\"text-sm text-gray-600\">\n                  Essential protection covering claims from third parties. Most venues require ¬£2-10 million coverage.\n                </p>\n              </div>\n              \n              <div className=\"space-y-3\">\n                <div className=\"flex items-center space-x-2\">\n                  <Zap className=\"w-5 h-5 text-yellow-600\" />\n                  <h4 className=\"font-semibold\">PAT Testing Certificate</h4>\n                </div>\n                <p className=\"text-sm text-gray-600\">\n                  Annual testing of portable electrical equipment. Required for amplifiers, keyboards, and other gear.\n                </p>\n              </div>\n              \n              <div className=\"space-y-3\">\n                <div className=\"flex items-center space-x-2\">\n                  <Music className=\"w-5 h-5 text-purple-600\" />\n                  <h4 className=\"font-semibold\">Music Performance License</h4>\n                </div>\n                <p className=\"text-sm text-gray-600\">\n                  PRS/PPL licenses for performing copyrighted music. Often handled by venues but worth having for outdoor events.\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":18390},"client/src/pages/contracts.tsx":{"content":"import React, { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Search, Filter, MoreHorizontal, FileText, Calendar, DollarSign, User, ArrowLeft, Eye, Mail, Download } from \"lucide-react\";\nimport type { Contract, Enquiry } from \"@shared/schema\";\nimport { insertContractSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { Link } from \"wouter\";\n\nconst contractFormSchema = insertContractSchema.extend({\n  eventDate: z.string().optional(),\n}).omit({\n  userId: true,\n  signedAt: true,\n});\n\nexport default function Contracts() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [previewContract, setPreviewContract] = useState<Contract | null>(null);\n  const [isPreviewOpen, setIsPreviewOpen] = useState(false);\n  const { toast } = useToast();\n\n  const { data: contracts = [], isLoading } = useQuery<Contract[]>({\n    queryKey: [\"/api/contracts\"],\n  });\n\n  const { data: enquiries = [] } = useQuery<Enquiry[]>({\n    queryKey: [\"/api/enquiries\"],\n  });\n\n  // Check URL params to auto-open form dialog\n  React.useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    if (urlParams.get('action') === 'new') {\n      setIsDialogOpen(true);\n    }\n  }, []);\n\n  // Clean up URL when dialog closes\n  const handleDialogClose = (open: boolean) => {\n    setIsDialogOpen(open);\n    if (!open) {\n      // Clean up URL when closing dialog\n      const urlParams = new URLSearchParams(window.location.search);\n      if (urlParams.get('action') === 'new') {\n        window.history.replaceState({}, '', window.location.pathname);\n      }\n    }\n  };\n\n  const createContractMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof contractFormSchema>) => {\n      const contractData = {\n        ...data,\n        eventDate: data.eventDate ? new Date(data.eventDate).toISOString() : null,\n        enquiryId: 1, // Default enquiry ID for now\n      };\n      \n      const response = await fetch(\"/api/contracts\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(contractData),\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/contracts\"] });\n      handleDialogClose(false);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Contract generated successfully!\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: `Failed to generate contract: ${error.message}`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const form = useForm<z.infer<typeof contractFormSchema>>({\n    resolver: zodResolver(contractFormSchema),\n    defaultValues: {\n      enquiryId: 0,\n      contractNumber: \"\",\n      clientName: \"\",\n      eventDate: \"\",\n      eventTime: \"\",\n      venue: \"\",\n      fee: \"\",\n      deposit: \"\",\n      terms: \"\",\n      status: \"draft\",\n    },\n  });\n\n  // Email sending mutation\n  const sendEmailMutation = useMutation({\n    mutationFn: async (contract: Contract) => {\n      return apiRequest(\"POST\", \"/api/contracts/send-email\", { contractId: contract.id });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/contracts\"] });\n      toast({\n        title: \"Success\",\n        description: \"Contract sent to client successfully!\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to send contract email\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handlePreviewContract = (contract: Contract) => {\n    setPreviewContract(contract);\n    setIsPreviewOpen(true);\n  };\n\n  const handleSendEmail = (contract: Contract) => {\n    sendEmailMutation.mutate(contract);\n  };\n\n  // Additional contract action handlers\n  const handleEditContract = (contract: Contract) => {\n    // TODO: Implement edit functionality\n    toast({\n      title: \"Edit Contract\",\n      description: \"Edit functionality will be implemented soon\",\n    });\n  };\n\n  const handleDeleteContract = (contract: Contract) => {\n    if (confirm(`Are you sure you want to delete contract ${contract.contractNumber}?`)) {\n      // TODO: Implement delete functionality\n      toast({\n        title: \"Delete Contract\",\n        description: \"Delete functionality will be implemented soon\",\n      });\n    }\n  };\n\n  const handleDownloadContract = async (contract: Contract) => {\n    try {\n      const response = await fetch(`/api/contracts/${contract.id}/pdf`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `Contract-${contract.contractNumber}.pdf`;\n      a.click();\n      window.URL.revokeObjectURL(url);\n      \n      toast({\n        title: \"Success\",\n        description: \"Contract PDF downloaded successfully!\",\n      });\n    } catch (error) {\n      console.error('Error downloading contract:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to download contract PDF\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"draft\": return \"bg-gray-100 text-gray-800\";\n      case \"sent\": return \"bg-blue-100 text-blue-800\";\n      case \"signed\": return \"bg-green-100 text-green-800\";\n      case \"completed\": return \"bg-purple-100 text-purple-800\";\n      default: return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    if (!dateString) return \"No date set\";\n    return new Date(dateString).toLocaleDateString(\"en-GB\");\n  };\n\n  const filteredContracts = contracts.filter((contract: Contract) => {\n    const matchesSearch = searchQuery === \"\" || \n      contract.contractNumber.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      contract.clientName.toLowerCase().includes(searchQuery.toLowerCase());\n    \n    const matchesStatus = statusFilter === \"all\" || contract.status === statusFilter;\n    \n    return matchesSearch && matchesStatus;\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 p-6\">\n        <div className=\"animate-pulse space-y-6\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/4\"></div>\n          <div className=\"space-y-4\">\n            {[...Array(5)].map((_, i) => (\n              <div key={i} className=\"h-32 bg-gray-200 rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-6\">\n      <div className=\"max-w-7xl mx-auto space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Link href=\"/\">\n              <Button variant=\"outline\" size=\"sm\" className=\"bg-white border-purple-200 text-purple-700 hover:bg-purple-50 hover:border-purple-300\">\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Dashboard\n              </Button>\n            </Link>\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900\">Contracts</h1>\n              <p className=\"text-gray-600\">Manage your performance contracts and agreements</p>\n            </div>\n          </div>\n          \n          <Dialog open={isDialogOpen} onOpenChange={handleDialogClose}>\n            <DialogTrigger asChild>\n              <Button className=\"bg-purple-600 hover:bg-purple-700\">\n                <FileText className=\"w-4 h-4 mr-2\" />\n                Generate Contract\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle>Generate New Contract</DialogTitle>\n              </DialogHeader>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit((data) => createContractMutation.mutate(data))} className=\"space-y-6\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"contractNumber\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Contract Number</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"CT-2024-001\" {...field} value={field.value || \"\"} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"clientName\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Client Name</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"John Smith\" {...field} value={field.value || \"\"} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"eventTime\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Event Time</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"7:00 PM\" {...field} value={field.value || \"\"} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"eventDate\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Event Date</FormLabel>\n                          <FormControl>\n                            <Input type=\"date\" {...field} value={field.value || \"\"} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"venue\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Venue</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"The Grand Hotel, London\" {...field} value={field.value || \"\"} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"clientEmail\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Client Email</FormLabel>\n                          <FormControl>\n                            <Input type=\"email\" placeholder=\"client@example.com\" {...field} value={field.value || \"\"} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"clientPhone\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Client Phone</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"07123 456789\" {...field} value={field.value || \"\"} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"fee\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Performance Fee (¬£)</FormLabel>\n                          <FormControl>\n                            <Input type=\"number\" placeholder=\"1500\" {...field} value={field.value || \"\"} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <FormField\n                    control={form.control}\n                    name=\"deposit\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Deposit Amount (¬£)</FormLabel>\n                        <FormControl>\n                          <Input type=\"number\" placeholder=\"500\" {...field} value={field.value || \"\"} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"terms\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Terms & Conditions</FormLabel>\n                        <FormControl>\n                          <Textarea placeholder=\"Payment terms, cancellation policy, etc...\" {...field} value={field.value || \"\"} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"flex justify-end space-x-3\">\n                    <Button type=\"button\" variant=\"outline\" onClick={() => handleDialogClose(false)}>\n                      Cancel\n                    </Button>\n                    <Button type=\"submit\" disabled={createContractMutation.isPending}>\n                      {createContractMutation.isPending ? \"Generating...\" : \"Generate Contract\"}\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {/* Filters */}\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"relative flex-1 max-w-md\">\n                <Search className=\"absolute left-3 top-3 w-4 h-4 text-gray-400\" />\n                <Input\n                  placeholder=\"Search contracts...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-48\">\n                  <SelectValue placeholder=\"Filter by status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  <SelectItem value=\"draft\">Draft</SelectItem>\n                  <SelectItem value=\"sent\">Sent</SelectItem>\n                  <SelectItem value=\"signed\">Signed</SelectItem>\n                  <SelectItem value=\"completed\">Completed</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Contracts List */}\n        <div className=\"space-y-4\">\n          {filteredContracts.length === 0 ? (\n            <Card>\n              <CardContent className=\"p-12 text-center\">\n                <FileText className=\"w-16 h-16 text-gray-300 mx-auto mb-4\" />\n                <p className=\"text-gray-500 text-lg\">No contracts found</p>\n                <p className=\"text-gray-400\">Generate your first contract from a qualified enquiry</p>\n                <Button \n                  className=\"mt-4 bg-purple-600 hover:bg-purple-700\"\n                  onClick={() => setIsDialogOpen(true)}\n                >\n                  <FileText className=\"w-4 h-4 mr-2\" />\n                  Generate Contract\n                </Button>\n              </CardContent>\n            </Card>\n          ) : (\n            filteredContracts.map((contract: Contract) => (\n              <Card key={contract.id} className=\"hover:shadow-md transition-shadow cursor-pointer\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-3 mb-3\">\n                        <h3 className=\"text-lg font-semibold text-gray-900\">\n                          Contract #{contract.contractNumber}\n                        </h3>\n                        <Badge className={getStatusColor(contract.status)}>\n                          {contract.status.toUpperCase()}\n                        </Badge>\n                      </div>\n                      \n                      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 text-sm\">\n                        <div className=\"flex items-center space-x-2 text-gray-600\">\n                          <User className=\"w-4 h-4\" />\n                          <div>\n                            <p className=\"font-medium\">{contract.clientName}</p>\n                            <p className=\"text-xs text-gray-500\">Client</p>\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex items-center space-x-2 text-gray-600\">\n                          <Calendar className=\"w-4 h-4\" />\n                          <div>\n                            <p className=\"font-medium\">{formatDate(contract.eventDate)}</p>\n                            <p className=\"text-xs text-gray-500\">{contract.eventTime}</p>\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex items-center space-x-2 text-gray-600\">\n                          <DollarSign className=\"w-4 h-4\" />\n                          <div>\n                            <p className=\"font-medium\">¬£{contract.fee}</p>\n                            {contract.deposit && (\n                              <p className=\"text-xs text-gray-500\">Deposit: ¬£{contract.deposit}</p>\n                            )}\n                          </div>\n                        </div>\n                        \n                        <div className=\"text-gray-600\">\n                          <p className=\"font-medium text-sm\">{contract.venue}</p>\n                          <p className=\"text-xs text-gray-500\">Venue</p>\n                        </div>\n                      </div>\n                      \n                      {contract.terms && (\n                        <div className=\"mt-3 p-3 bg-gray-50 rounded-lg\">\n                          <p className=\"text-sm text-gray-700 line-clamp-2\">{contract.terms}</p>\n                        </div>\n                      )}\n                      \n                      <div className=\"mt-3 flex items-center space-x-4 text-xs text-gray-500\">\n                        <span>Created: {formatDate(contract.createdAt!)}</span>\n                        {contract.signedAt && (\n                          <span>Signed: {formatDate(contract.signedAt)}</span>\n                        )}\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex flex-col items-end space-y-2\">\n                      <div className=\"text-right mb-2\">\n                        <p className=\"text-xs text-gray-500 mb-1\">Status</p>\n                        <Badge \n                          variant={\n                            contract.status === \"signed\" ? \"default\" : \n                            contract.status === \"sent\" ? \"secondary\" :\n                            contract.status === \"completed\" ? \"default\" : \"outline\"\n                          }\n                        >\n                          {contract.status.charAt(0).toUpperCase() + contract.status.slice(1)}\n                        </Badge>\n                      </div>\n                      \n                      <div className=\"flex flex-col space-y-1\">\n                        {contract.status === \"draft\" && (\n                          <>\n                            <Button size=\"sm\" variant=\"outline\" className=\"text-xs\" onClick={() => handleEditContract(contract)}>\n                              Edit\n                            </Button>\n                            <Button size=\"sm\" variant=\"outline\" className=\"text-xs\" onClick={() => handlePreviewContract(contract)}>\n                              Preview\n                            </Button>\n                            <Button size=\"sm\" className=\"bg-blue-600 hover:bg-blue-700 text-xs\" onClick={() => handleSendEmail(contract)}>\n                              Send\n                            </Button>\n                            <Button size=\"sm\" variant=\"outline\" className=\"text-red-600 hover:text-red-700 text-xs\" onClick={() => handleDeleteContract(contract)}>\n                              Delete\n                            </Button>\n                          </>\n                        )}\n                        \n                        {contract.status === \"sent\" && (\n                          <>\n                            <Button size=\"sm\" variant=\"outline\" className=\"text-xs\" onClick={() => handlePreviewContract(contract)}>\n                              Preview\n                            </Button>\n                            <Button size=\"sm\" variant=\"outline\" className=\"text-xs\" onClick={() => handleDownloadContract(contract)}>\n                              <Download className=\"w-3 h-3 mr-1\" />\n                              Download\n                            </Button>\n                            <Button size=\"sm\" variant=\"outline\" className=\"text-xs\" onClick={() => handleSendEmail(contract)}>\n                              Resend\n                            </Button>\n                          </>\n                        )}\n                        \n                        {contract.status === \"signed\" && (\n                          <>\n                            <Button size=\"sm\" variant=\"outline\" className=\"text-xs\" onClick={() => handlePreviewContract(contract)}>\n                              Preview\n                            </Button>\n                            <Button size=\"sm\" variant=\"outline\" className=\"text-xs\" onClick={() => handleDownloadContract(contract)}>\n                              <Download className=\"w-3 h-3 mr-1\" />\n                              Download\n                            </Button>\n                          </>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))\n          )}\n        </div>\n\n        {/* Contract Preview Dialog */}\n        <Dialog open={isPreviewOpen} onOpenChange={setIsPreviewOpen}>\n          <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Contract Preview</DialogTitle>\n            </DialogHeader>\n            {previewContract && (\n              <div className=\"space-y-6 p-4\">\n                {/* Contract Header */}\n                <div className=\"text-center border-b-2 border-gray-200 pb-6\">\n                  <h1 className=\"text-3xl font-bold text-gray-900 mb-1\">LIVE ENGAGEMENT CONTRACT</h1>\n                  <p className=\"text-lg text-gray-600\">Solo Musician Performance Agreement</p>\n                  <p className=\"text-sm text-gray-500 mt-2\">Contract #{previewContract.contractNumber}</p>\n                </div>\n\n                {/* Agreement Statement */}\n                <div className=\"bg-gray-50 p-4 rounded-lg\">\n                  <p className=\"text-gray-800 leading-relaxed\">\n                    An agreement made on <strong>{formatDate(new Date())}</strong> between the Hirer and the Musician \n                    for the performance engagement detailed below.\n                  </p>\n                </div>\n\n                {/* Party Information */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n                  <div className=\"space-y-4\">\n                    <h3 className=\"text-lg font-semibold text-gray-900 border-b border-gray-200 pb-2\">\n                      THE HIRER\n                    </h3>\n                    <div className=\"space-y-2\">\n                      <p className=\"font-medium text-gray-900\">{previewContract.clientName}</p>\n                      <div className=\"text-sm text-gray-600 space-y-1\">\n                        <p><strong>Address:</strong> [To be completed]</p>\n                        <p><strong>Phone:</strong> [To be completed]</p>\n                        <p><strong>Email:</strong> [To be completed]</p>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-4\">\n                    <h3 className=\"text-lg font-semibold text-gray-900 border-b border-gray-200 pb-2\">\n                      THE MUSICIAN\n                    </h3>\n                    <div className=\"space-y-2\">\n                      <p className=\"font-medium text-gray-900\">Tim Fulker</p>\n                      <div className=\"text-sm text-gray-600 space-y-1\">\n                        <p><strong>Address:</strong> 59 Gloucester Road, Bournemouth, Dorset BH7 6JA</p>\n                        <p><strong>Phone:</strong> 07764190034</p>\n                        <p><strong>Email:</strong> timfulkermusic@gmail.com</p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Engagement Details */}\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-semibold text-gray-900 border-b border-gray-200 pb-2\">\n                    ENGAGEMENT DETAILS\n                  </h3>\n                  \n                  <div className=\"bg-white border border-gray-200 rounded-lg overflow-hidden\">\n                    <table className=\"w-full\">\n                      <thead className=\"bg-gray-50\">\n                        <tr>\n                          <th className=\"px-4 py-3 text-left text-sm font-medium text-gray-900\">Date</th>\n                          <th className=\"px-4 py-3 text-left text-sm font-medium text-gray-900\">Start Time</th>\n                          <th className=\"px-4 py-3 text-left text-sm font-medium text-gray-900\">Venue</th>\n                          <th className=\"px-4 py-3 text-left text-sm font-medium text-gray-900\">Fee</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        <tr className=\"border-t border-gray-200\">\n                          <td className=\"px-4 py-3 text-sm text-gray-900\">{formatDate(previewContract.eventDate)}</td>\n                          <td className=\"px-4 py-3 text-sm text-gray-900\">{previewContract.eventTime}</td>\n                          <td className=\"px-4 py-3 text-sm text-gray-900\">{previewContract.venue}</td>\n                          <td className=\"px-4 py-3 text-sm font-semibold text-green-600\">¬£{previewContract.fee}</td>\n                        </tr>\n                      </tbody>\n                    </table>\n                  </div>\n\n                  {previewContract.deposit && (\n                    <div className=\"bg-blue-50 p-4 rounded-lg\">\n                      <p className=\"text-sm text-blue-800\">\n                        <strong>Deposit Required:</strong> ¬£{previewContract.deposit} (payable upon signing)\n                      </p>\n                    </div>\n                  )}\n                </div>\n\n                {/* Terms and Conditions */}\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-semibold text-gray-900 border-b border-gray-200 pb-2\">\n                    TERMS & CONDITIONS\n                  </h3>\n                  \n                  <div className=\"space-y-3 text-sm text-gray-700\">\n                    <div className=\"flex items-start space-x-2\">\n                      <span className=\"text-gray-400 mt-1\">‚Ä¢</span>\n                      <p>The fee listed above is payable on the date of performance.</p>\n                    </div>\n                    <div className=\"flex items-start space-x-2\">\n                      <span className=\"text-gray-400 mt-1\">‚Ä¢</span>\n                      <p>The Hirer and Musician agree that equipment and instruments are not available for use by others without specific permission.</p>\n                    </div>\n                    <div className=\"flex items-start space-x-2\">\n                      <span className=\"text-gray-400 mt-1\">‚Ä¢</span>\n                      <p>The Hirer shall ensure safe electricity supply and security of the Musician and property at the venue.</p>\n                    </div>\n                    <div className=\"flex items-start space-x-2\">\n                      <span className=\"text-gray-400 mt-1\">‚Ä¢</span>\n                      <p>No audio/visual recording or transmission permitted without prior written consent.</p>\n                    </div>\n                    <div className=\"flex items-start space-x-2\">\n                      <span className=\"text-gray-400 mt-1\">‚Ä¢</span>\n                      <p>This agreement may only be modified or cancelled by mutual written consent.</p>\n                    </div>\n                  </div>\n\n                  {previewContract.terms && (\n                    <div className=\"mt-4\">\n                      <h4 className=\"font-medium text-gray-900 mb-2\">Additional Terms:</h4>\n                      <div className=\"bg-gray-50 p-4 rounded-lg\">\n                        <p className=\"text-sm text-gray-700 whitespace-pre-wrap\">{previewContract.terms}</p>\n                      </div>\n                    </div>\n                  )}\n                </div>\n\n                {/* Signature Section */}\n                <div className=\"space-y-6 border-t-2 border-gray-200 pt-6\">\n                  <h3 className=\"text-lg font-semibold text-gray-900\">SIGNATURES</h3>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n                    <div className=\"space-y-4\">\n                      <h4 className=\"font-medium text-gray-900\">HIRER SIGNATURE</h4>\n                      <div className=\"space-y-3\">\n                        <div className=\"border-b border-gray-300 pb-1\">\n                          <p className=\"text-xs text-gray-500 mb-1\">Signature</p>\n                          <div className=\"h-8\"></div>\n                        </div>\n                        <div>\n                          <p className=\"text-xs text-gray-500 mb-1\">Print Name</p>\n                          <p className=\"text-sm text-gray-700\">{previewContract.clientName}</p>\n                        </div>\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div>\n                            <p className=\"text-xs text-gray-500 mb-1\">Phone</p>\n                            <p className=\"text-sm text-gray-700\">[To be completed]</p>\n                          </div>\n                          <div>\n                            <p className=\"text-xs text-gray-500 mb-1\">Email</p>\n                            <p className=\"text-sm text-gray-700\">[To be completed]</p>\n                          </div>\n                        </div>\n                        <div>\n                          <p className=\"text-xs text-gray-500 mb-1\">Date</p>\n                          <div className=\"border-b border-gray-300 h-6\"></div>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-4\">\n                      <h4 className=\"font-medium text-gray-900\">MUSICIAN SIGNATURE</h4>\n                      <div className=\"space-y-3\">\n                        <div className=\"border-b border-gray-300 pb-1\">\n                          <p className=\"text-xs text-gray-500 mb-1\">Signature</p>\n                          <div className=\"h-8\"></div>\n                        </div>\n                        <div>\n                          <p className=\"text-xs text-gray-500 mb-1\">Print Name</p>\n                          <p className=\"text-sm text-gray-700\">Tim Fulker</p>\n                        </div>\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div>\n                            <p className=\"text-xs text-gray-500 mb-1\">Phone</p>\n                            <p className=\"text-sm text-gray-700\">07764190034</p>\n                          </div>\n                          <div>\n                            <p className=\"text-xs text-gray-500 mb-1\">Email</p>\n                            <p className=\"text-sm text-gray-700\">timfulkermusic@gmail.com</p>\n                          </div>\n                        </div>\n                        <div>\n                          <p className=\"text-xs text-gray-500 mb-1\">Date</p>\n                          <div className=\"border-b border-gray-300 h-6\"></div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Footer */}\n                <div className=\"text-center text-xs text-gray-500 border-t border-gray-200 pt-4\">\n                  <p className=\"mb-2\">Contract Status: <Badge className={getStatusColor(previewContract.status)}>{previewContract.status.toUpperCase()}</Badge></p>\n                  <p>Created: {formatDate(previewContract.createdAt!)}</p>\n                  {previewContract.signedAt && (\n                    <p className=\"text-green-600 font-medium\">Signed: {formatDate(previewContract.signedAt)}</p>\n                  )}\n                  <p className=\"mt-2 italic\">One copy to be retained by the Hirer and one copy by the Musician.</p>\n                </div>\n              </div>\n            )}\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n}","size_bytes":35858},"client/src/pages/dashboard.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport Sidebar from \"@/components/sidebar\";\nimport DashboardHeader from \"@/components/dashboard-header\";\nimport StatsCards from \"@/components/stats-cards\";\nimport KanbanBoard from \"@/components/kanban-board\";\nimport CalendarWidget from \"@/components/calendar-widget\";\nimport QuickActions from \"@/components/quick-actions\";\nimport ComplianceAlerts from \"@/components/compliance-alerts\";\nimport MobileNav from \"@/components/mobile-nav\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\nexport default function Dashboard() {\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  if (isLoading || !isAuthenticated) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-purple-600 mx-auto\"></div>\n          <p className=\"mt-4 text-gray-600\">Loading your dashboard...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Mobile menu toggle */}\n      <div className=\"md:hidden fixed top-4 left-4 z-50\">\n        <button\n          onClick={() => setSidebarOpen(true)}\n          className=\"bg-white p-2 rounded-lg shadow-lg\"\n        >\n          <svg className=\"w-6 h-6 text-gray-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 6h16M4 12h16M4 18h16\" />\n          </svg>\n        </button>\n      </div>\n\n      <Sidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />\n\n      {/* Main Content */}\n      <div className=\"md:ml-64 min-h-screen\">\n        <DashboardHeader />\n        \n        <main className=\"p-6 space-y-6\">\n          <StatsCards />\n          \n          <div className=\"grid grid-cols-1 xl:grid-cols-3 gap-6\">\n            <div className=\"xl:col-span-2\">\n              <KanbanBoard />\n            </div>\n            \n            <div className=\"space-y-6\">\n              <CalendarWidget />\n              <QuickActions />\n              <ComplianceAlerts />\n            </div>\n          </div>\n        </main>\n      </div>\n\n      <MobileNav />\n    </div>\n  );\n}\n","size_bytes":2812},"client/src/pages/enquiries.tsx":{"content":"import React, { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertEnquirySchema, type Enquiry } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Plus, Search, Filter, MoreHorizontal, DollarSign, Clock, Calendar, ArrowLeft, User } from \"lucide-react\";\nimport { z } from \"zod\";\nimport { Link } from \"wouter\";\n\nconst enquiryFormSchema = insertEnquirySchema.extend({\n  eventDate: z.string().optional(),\n}).omit({\n  userId: true,\n});\n\nexport default function Enquiries() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const { toast } = useToast();\n\n  // Check URL params to auto-open form dialog\n  React.useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    if (urlParams.get('action') === 'new') {\n      setIsDialogOpen(true);\n      // Clean up URL\n      window.history.replaceState({}, '', window.location.pathname);\n    }\n  }, []);\n\n  const { data: enquiries = [], isLoading } = useQuery<Enquiry[]>({\n    queryKey: [\"/api/enquiries\"],\n  });\n\n  const createEnquiryMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof enquiryFormSchema>) => {\n      const enquiryData = {\n        ...data,\n        eventDate: data.eventDate ? new Date(data.eventDate).toISOString() : null,\n      };\n      \n      const response = await fetch(\"/api/enquiries\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(enquiryData),\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/enquiries\"] });\n      setIsDialogOpen(false);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Enquiry created successfully!\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create enquiry. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const form = useForm<z.infer<typeof enquiryFormSchema>>({\n    resolver: zodResolver(enquiryFormSchema),\n    defaultValues: {\n      title: \"\",\n      clientName: \"\",\n      clientEmail: \"\",\n      clientPhone: \"\",\n      eventDate: \"\",\n      eventTime: \"\",\n      venue: \"\",\n      eventType: \"\",\n      estimatedValue: \"\",\n      notes: \"\",\n      status: \"new\",\n    },\n  });\n\n  const onSubmit = (data: z.infer<typeof enquiryFormSchema>) => {\n    createEnquiryMutation.mutate(data);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"new\": return \"bg-gray-100 text-gray-800\";\n      case \"qualified\": return \"bg-blue-100 text-blue-800\";\n      case \"contract_sent\": return \"bg-purple-100 text-purple-800\";\n      case \"confirmed\": return \"bg-green-100 text-green-800\";\n      case \"rejected\": return \"bg-red-100 text-red-800\";\n      default: return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    if (!dateString) return \"No date set\";\n    return new Date(dateString).toLocaleDateString(\"en-GB\");\n  };\n\n  const formatTime = (dateString: string) => {\n    if (!dateString) return \"\";\n    const date = new Date(dateString);\n    const now = new Date();\n    const diffHours = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60));\n    \n    if (diffHours < 24) {\n      return `${diffHours} hours ago`;\n    } else {\n      const diffDays = Math.floor(diffHours / 24);\n      return `${diffDays} day${diffDays > 1 ? 's' : ''} ago`;\n    }\n  };\n\n  const filteredEnquiries = enquiries.filter((enquiry: Enquiry) => {\n    const matchesSearch = searchQuery === \"\" || \n      enquiry.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      enquiry.clientName.toLowerCase().includes(searchQuery.toLowerCase());\n    \n    const matchesStatus = statusFilter === \"all\" || enquiry.status === statusFilter;\n    \n    return matchesSearch && matchesStatus;\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 p-6\">\n        <div className=\"animate-pulse space-y-6\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/4\"></div>\n          <div className=\"space-y-4\">\n            {[...Array(5)].map((_, i) => (\n              <div key={i} className=\"h-32 bg-gray-200 rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-6\">\n      <div className=\"max-w-7xl mx-auto space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Link href=\"/\">\n              <Button variant=\"outline\" size=\"sm\" className=\"bg-white border-purple-200 text-purple-700 hover:bg-purple-50 hover:border-purple-300\">\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Dashboard\n              </Button>\n            </Link>\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900\">Enquiries</h1>\n              <p className=\"text-gray-600\">Manage your client enquiries and track your pipeline</p>\n            </div>\n          </div>\n          \n          <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"bg-purple-600 hover:bg-purple-700\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                New Enquiry\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle>Create New Enquiry</DialogTitle>\n              </DialogHeader>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"title\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Event Title</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Wedding reception, Corporate event...\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"eventType\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Event Type</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select event type\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"wedding\">Wedding</SelectItem>\n                              <SelectItem value=\"corporate\">Corporate</SelectItem>\n                              <SelectItem value=\"private_party\">Private Party</SelectItem>\n                              <SelectItem value=\"concert\">Concert</SelectItem>\n                              <SelectItem value=\"other\">Other</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-3 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"clientName\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Client Name</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"John Smith\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"clientEmail\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Client Email</FormLabel>\n                          <FormControl>\n                            <Input type=\"email\" placeholder=\"john@example.com\" {...field} value={field.value || \"\"} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"clientPhone\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Client Phone</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"07123 456 789\" {...field} value={field.value || \"\"} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-3 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"eventDate\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Event Date</FormLabel>\n                          <FormControl>\n                            <Input type=\"date\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"eventTime\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Event Time</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"7:00 PM\" {...field} value={field.value || \"\"} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"estimatedValue\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Estimated Value (¬£)</FormLabel>\n                          <FormControl>\n                            <Input type=\"number\" placeholder=\"500\" {...field} value={field.value || \"\"} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <FormField\n                    control={form.control}\n                    name=\"venue\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Venue</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"The Grand Hotel, London\" {...field} value={field.value || \"\"} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"notes\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Notes</FormLabel>\n                        <FormControl>\n                          <Textarea placeholder=\"Additional details about the enquiry...\" {...field} value={field.value || \"\"} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"flex justify-end space-x-3\">\n                    <Button type=\"button\" variant=\"outline\" onClick={() => setIsDialogOpen(false)}>\n                      Cancel\n                    </Button>\n                    <Button type=\"submit\" disabled={createEnquiryMutation.isPending}>\n                      {createEnquiryMutation.isPending ? \"Creating...\" : \"Create Enquiry\"}\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {/* Filters */}\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"relative flex-1 max-w-md\">\n                <Search className=\"absolute left-3 top-3 w-4 h-4 text-gray-400\" />\n                <Input\n                  placeholder=\"Search enquiries...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-48\">\n                  <SelectValue placeholder=\"Filter by status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  <SelectItem value=\"new\">New</SelectItem>\n                  <SelectItem value=\"qualified\">Qualified</SelectItem>\n                  <SelectItem value=\"contract_sent\">Contract Sent</SelectItem>\n                  <SelectItem value=\"confirmed\">Confirmed</SelectItem>\n                  <SelectItem value=\"rejected\">Rejected</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Enquiries List */}\n        <div className=\"space-y-4\">\n          {filteredEnquiries.length === 0 ? (\n            <Card>\n              <CardContent className=\"p-12 text-center\">\n                <User className=\"w-16 h-16 text-gray-300 mx-auto mb-4\" />\n                <p className=\"text-gray-500 text-lg\">No enquiries found</p>\n                <p className=\"text-gray-400\">Create your first enquiry to get started</p>\n                <Button \n                  className=\"mt-4 bg-purple-600 hover:bg-purple-700\"\n                  onClick={() => setIsDialogOpen(true)}\n                >\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Create Enquiry\n                </Button>\n              </CardContent>\n            </Card>\n          ) : (\n            filteredEnquiries.map((enquiry: Enquiry) => (\n              <Card key={enquiry.id} className=\"hover:shadow-md transition-shadow cursor-pointer\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-3 mb-2\">\n                        <h3 className=\"text-lg font-semibold text-gray-900\">{enquiry.title}</h3>\n                        <Badge className={getStatusColor(enquiry.status)}>\n                          {enquiry.status.replace('_', ' ').toUpperCase()}\n                        </Badge>\n                      </div>\n                      \n                      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 text-sm text-gray-600\">\n                        <div>\n                          <p className=\"font-medium\">Client</p>\n                          <p>{enquiry.clientName}</p>\n                          {enquiry.clientEmail && <p className=\"text-xs\">{enquiry.clientEmail}</p>}\n                          {enquiry.clientPhone && <p className=\"text-xs\">{enquiry.clientPhone}</p>}\n                        </div>\n                        \n                        <div>\n                          <p className=\"font-medium\">Event Date</p>\n                          <p className=\"flex items-center\">\n                            <Calendar className=\"w-3 h-3 mr-1\" />\n                            {formatDate(enquiry.eventDate!)}\n                          </p>\n                          {enquiry.eventTime && <p className=\"text-xs\">{enquiry.eventTime}</p>}\n                        </div>\n                        \n                        <div>\n                          <p className=\"font-medium\">Price quoted</p>\n                          <p className=\"flex items-center\">\n                            <DollarSign className=\"w-3 h-3 mr-1\" />\n                            ¬£{enquiry.estimatedValue || \"TBC\"}\n                          </p>\n                          {enquiry.venue && <p className=\"text-xs\">{enquiry.venue}</p>}\n                        </div>\n                        \n                        <div>\n                          <p className=\"font-medium\">Created</p>\n                          <p className=\"flex items-center\">\n                            <Clock className=\"w-3 h-3 mr-1\" />\n                            {formatTime(enquiry.createdAt!)}\n                          </p>\n                        </div>\n                      </div>\n                      \n                      {enquiry.notes && (\n                        <div className=\"mt-3 p-3 bg-gray-50 rounded-lg\">\n                          {(() => {\n                            const notes = enquiry.notes || '';\n                            \n                            // Handle both old and new format\n                            let mainNotes = notes;\n                            let metadata = '';\n                            \n                            // Check for old format with \"--- Contact Details ---\"\n                            if (notes.includes('--- Contact Details ---')) {\n                              const sourceMatch = notes.match(/Source: ([^\\n]+)/);\n                              const contactMatch = notes.match(/Contact Method: ([^\\n]+)/);\n                              mainNotes = notes.replace(/\\n*--- Contact Details ---[\\s\\S]*$/, '').trim();\n                              \n                              if (contactMatch) {\n                                metadata = `Contact Method - ${contactMatch[1]}`;\n                              }\n                            }\n                            // Check for new \"Contact Method - Phone\" format\n                            else if (notes.includes('Contact Method -')) {\n                              const contactMatch = notes.match(/Contact Method - ([^\\n]+)/);\n                              mainNotes = notes.replace(/\\n\\nContact Method -.*$/, '').trim();\n                              \n                              if (contactMatch) {\n                                metadata = `Contact Method - ${contactMatch[1]}`;\n                              }\n                            }\n                            // Check for simple \"Source:\" format without header\n                            else if (notes.includes('Source:')) {\n                              const sourceMatch = notes.match(/Source: ([^\\n‚Ä¢]+)/);\n                              const contactMatch = notes.match(/Contact: ([^\\n]+)/);\n                              mainNotes = notes.replace(/\\n\\nSource:.*$/, '').trim();\n                              \n                              if (contactMatch) {\n                                metadata = `Contact Method - ${contactMatch[1]}`;\n                              }\n                            }\n                            // Check for new simple format (just \"Email ‚Ä¢ Phone\")\n                            else {\n                              const parts = notes.split('\\n\\n');\n                              if (parts.length > 1) {\n                                const lastPart = parts[parts.length - 1];\n                                if (lastPart.includes('‚Ä¢')) {\n                                  mainNotes = parts.slice(0, -1).join('\\n\\n').trim();\n                                  metadata = lastPart;\n                                }\n                              } else if (notes.includes('‚Ä¢') && !notes.includes('\\n')) {\n                                // If it's just metadata without main notes\n                                mainNotes = '';\n                                metadata = notes;\n                              }\n                            }\n                            \n                            return (\n                              <div className=\"space-y-2\">\n                                {mainNotes && (\n                                  <p className=\"text-sm text-gray-700\">{mainNotes}</p>\n                                )}\n                                {metadata && (\n                                  <div className=\"text-xs text-gray-500 border-t pt-2\">\n                                    <span>{metadata}</span>\n                                  </div>\n                                )}\n                              </div>\n                            );\n                          })()}\n                        </div>\n                      )}\n                    </div>\n                    \n                    <div className=\"flex items-center space-x-2\">\n                      <Button variant=\"ghost\" size=\"sm\">\n                        <MoreHorizontal className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":22821},"client/src/pages/invoices.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Search, Filter, MoreHorizontal, DollarSign, Calendar, FileText, Download, ArrowLeft, Plus, Send, Edit, CheckCircle, AlertTriangle } from \"lucide-react\";\nimport { insertInvoiceSchema, type Invoice } from \"@shared/schema\";\nimport { Link, useLocation } from \"wouter\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { z } from \"zod\";\n\nconst invoiceFormSchema = z.object({\n  invoiceNumber: z.string().min(1, \"Invoice number is required\"),\n  contractId: z.number().min(1, \"Please select a contract\"),\n  clientName: z.string().min(1, \"Client name is required\"),\n  businessAddress: z.string().optional(),\n  amount: z.string().min(1, \"Amount is required\"),\n  dueDate: z.string().min(1, \"Due date is required\"),\n  performanceDate: z.string().optional(),\n  performanceFee: z.string().optional(),\n  depositPaid: z.string().optional(),\n});\n\nexport default function Invoices() {\n  const { toast } = useToast();\n  const [location] = useLocation();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n\n  // Check for URL parameters to auto-open dialog\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const createNew = params.get('create');\n    if (createNew === 'true') {\n      setIsDialogOpen(true);\n    }\n  }, [location]);\n\n  const { data: invoices = [], isLoading } = useQuery({\n    queryKey: ['/api/invoices'],\n  });\n\n  const { data: contracts = [] } = useQuery({\n    queryKey: ['/api/contracts'],\n  });\n\n  const { data: userSettings } = useQuery({\n    queryKey: ['/api/settings'],\n  });\n\n  const form = useForm<z.infer<typeof invoiceFormSchema>>({\n    resolver: zodResolver(invoiceFormSchema),\n    defaultValues: {\n      invoiceNumber: \"\",\n      contractId: 1,\n      clientName: \"\", \n      businessAddress: userSettings?.businessAddress || \"\",\n      amount: \"\",\n      dueDate: \"\",\n      performanceDate: \"\",\n      performanceFee: \"\",\n      depositPaid: \"\",\n    },\n  });\n\n  // Auto-generate invoice number and due date\n  useEffect(() => {\n    if (invoices.length >= 0) {\n      const currentYear = new Date().getFullYear();\n      const nextNumber = invoices.length + 1;\n      const paddedNumber = nextNumber.toString().padStart(3, '0');\n      const invoiceNumber = `INV-${currentYear}-${paddedNumber}`;\n      form.setValue(\"invoiceNumber\", invoiceNumber);\n      \n      // Set due date to 30 days from now\n      const dueDate = new Date();\n      dueDate.setDate(dueDate.getDate() + 30);\n      form.setValue(\"dueDate\", dueDate.toISOString().split('T')[0]);\n    }\n  }, [invoices, form]);\n\n  // Watch contract ID changes\n  const selectedContractId = form.watch(\"contractId\");\n\n  // Auto-fill client name and amount when contract is selected\n  useEffect(() => {\n    if (selectedContractId && contracts.length > 0) {\n      const selectedContract = contracts.find((c: any) => c.id === selectedContractId);\n      if (selectedContract) {\n        form.setValue(\"clientName\", selectedContract.clientName);\n        if (selectedContract.eventDate) {\n          form.setValue(\"performanceDate\", new Date(selectedContract.eventDate).toISOString().split('T')[0]);\n        }\n        if (selectedContract.fee) {\n          // Set the performance fee and calculate amount due (fee minus any deposit)\n          const fee = Number(selectedContract.fee);\n          const deposit = Number(selectedContract.deposit) || 0;\n          const amountDue = fee - deposit;\n          form.setValue(\"amount\", amountDue.toString());\n          // Store fee and deposit for backend\n          form.setValue(\"performanceFee\", fee.toString());\n          form.setValue(\"depositPaid\", deposit.toString());\n        }\n      }\n    }\n  }, [selectedContractId, contracts, form]);\n\n  // Auto-fill business address from settings\n  useEffect(() => {\n    if (userSettings?.businessAddress) {\n      form.setValue(\"businessAddress\", userSettings.businessAddress);\n    }\n  }, [userSettings, form]);\n\n  const createInvoiceMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof invoiceFormSchema>) => {\n      console.log(\"Making API request with data:\", data);\n      const response = await apiRequest('POST', '/api/invoices', data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/invoices'] });\n      form.reset();\n      setIsDialogOpen(false);\n      toast({\n        title: \"Success\",\n        description: \"Invoice created successfully!\",\n      });\n    },\n    onError: (error) => {\n      console.error(\"Create invoice error:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to create invoice. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: z.infer<typeof invoiceFormSchema>) => {\n    console.log(\"Form submission data:\", data);\n    console.log(\"Selected contract ID:\", selectedContractId);\n    \n    // Send data exactly as expected by the API\n    const finalData = {\n      contractId: selectedContractId || 1,\n      invoiceNumber: data.invoiceNumber,\n      clientName: data.clientName,\n      businessAddress: data.businessAddress,\n      amount: data.amount,\n      dueDate: data.dueDate, // Keep as string - server will convert\n      performanceDate: data.performanceDate,\n      performanceFee: data.performanceFee,\n      depositPaid: data.depositPaid,\n    };\n    \n    console.log(\"Final data being sent:\", finalData);\n    createInvoiceMutation.mutate(finalData);\n  };\n\n  const handleDialogClose = () => {\n    setIsDialogOpen(false);\n    if (window.location.search) {\n      window.history.replaceState({}, document.title, window.location.pathname);\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"draft\": return \"bg-gray-100 text-gray-800\";\n      case \"sent\": return \"bg-blue-100 text-blue-800\";\n      case \"paid\": return \"bg-green-100 text-green-800\";\n      case \"overdue\": return \"bg-red-500 text-white font-bold\";\n      default: return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    if (!dateString) return \"No date set\";\n    return new Date(dateString).toLocaleDateString(\"en-GB\");\n  };\n\n  // Invoice action handlers\n  const sendInvoiceMutation = useMutation({\n    mutationFn: async (invoice: Invoice) => {\n      console.log('Sending invoice:', invoice.id);\n      console.log('API URL:', window.location.origin + '/api/invoices/send-email');\n      try {\n        const response = await apiRequest('POST', '/api/invoices/send-email', { invoiceId: invoice.id });\n        console.log('Send response status:', response.status);\n        console.log('Send response:', response);\n        const result = await response.json();\n        console.log('Send result:', result);\n        return result;\n      } catch (error) {\n        console.error('Send API error:', error);\n        throw error;\n      }\n    },\n    onSuccess: () => {\n      console.log('Invoice sent successfully');\n      queryClient.invalidateQueries({ queryKey: ['/api/invoices'] });\n      toast({\n        title: \"Success\",\n        description: \"Invoice sent successfully with PDF attachment!\",\n      });\n    },\n    onError: (error) => {\n      console.error('Invoice send error:', error);\n      console.error('Error details:', error.message);\n      toast({\n        title: \"Error\",\n        description: `Failed to send invoice email: ${error.message}`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSendInvoice = (invoice: Invoice) => {\n    sendInvoiceMutation.mutate(invoice);\n  };\n\n  // Mark invoice as paid mutation\n  const markPaidMutation = useMutation({\n    mutationFn: async (invoice: Invoice) => {\n      const response = await apiRequest('POST', `/api/invoices/${invoice.id}/mark-paid`, {});\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/invoices'] });\n      toast({\n        title: \"Success\",\n        description: \"Invoice marked as paid successfully!\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to mark invoice as paid\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Send overdue reminder mutation\n  const sendReminderMutation = useMutation({\n    mutationFn: async (invoice: Invoice) => {\n      const response = await apiRequest('POST', `/api/invoices/${invoice.id}/send-reminder`, {});\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Overdue reminder sent successfully!\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to send overdue reminder\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleMarkAsPaid = (invoice: Invoice) => {\n    markPaidMutation.mutate(invoice);\n  };\n\n  const handleSendReminder = (invoice: Invoice) => {\n    sendReminderMutation.mutate(invoice);\n  };\n\n  const handleDownloadInvoice = async (invoice: Invoice) => {\n    try {\n      const response = await fetch(`/api/invoices/${invoice.id}/pdf`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `Invoice-${invoice.invoiceNumber}.pdf`;\n      a.click();\n      window.URL.revokeObjectURL(url);\n      \n      toast({\n        title: \"Success\",\n        description: \"Invoice PDF downloaded successfully!\",\n      });\n    } catch (error) {\n      console.error('Error downloading invoice:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to download invoice PDF\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const filteredInvoices = invoices.filter((invoice: Invoice) => {\n    const matchesSearch = searchQuery === \"\" || \n      invoice.invoiceNumber.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      invoice.clientName.toLowerCase().includes(searchQuery.toLowerCase());\n    \n    const matchesStatus = statusFilter === \"all\" || invoice.status === statusFilter;\n    \n    return matchesSearch && matchesStatus;\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 p-6\">\n        <div className=\"animate-pulse space-y-6\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/4\"></div>\n          <div className=\"space-y-4\">\n            {[...Array(5)].map((_, i) => (\n              <div key={i} className=\"h-32 bg-gray-200 rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white border-b border-gray-200 px-6 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900\">Invoices</h1>\n            <p className=\"text-gray-600\">Manage your invoices and payments</p>\n          </div>\n          <div className=\"flex gap-3\">\n            <Link href=\"/\">\n              <Button variant=\"outline\" size=\"sm\">\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back to Dashboard\n              </Button>\n            </Link>\n            <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n              <DialogTrigger asChild>\n                <Button>\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Create Invoice\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-2xl\">\n                <DialogHeader>\n                  <DialogTitle>Create New Invoice</DialogTitle>\n                </DialogHeader>\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"invoiceNumber\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Invoice Number</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"INV-001\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"contractId\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Select Contract</FormLabel>\n                            <Select \n                              value={field.value?.toString()} \n                              onValueChange={(value) => field.onChange(parseInt(value))}\n                            >\n                              <FormControl>\n                                <SelectTrigger>\n                                  <SelectValue placeholder=\"Choose a contract\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                {contracts.map((contract: any) => (\n                                  <SelectItem key={contract.id} value={contract.id.toString()}>\n                                    {contract.clientName} - {formatDate(contract.eventDate)}\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <FormField\n                      control={form.control}\n                      name=\"clientName\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Client Name</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Client name\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"businessAddress\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Business Address</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Your business address\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <div className=\"grid grid-cols-3 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"amount\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Amount (¬£)</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"500.00\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"dueDate\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Due Date</FormLabel>\n                            <FormControl>\n                              <Input type=\"date\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"performanceDate\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Performance Date</FormLabel>\n                            <FormControl>\n                              <Input type=\"date\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <div className=\"flex justify-end gap-3\">\n                      <Button type=\"button\" variant=\"outline\" onClick={handleDialogClose}>\n                        Cancel\n                      </Button>\n                      <Button type=\"submit\" disabled={createInvoiceMutation.isPending}>\n                        {createInvoiceMutation.isPending ? \"Creating...\" : \"Create Invoice\"}\n                      </Button>\n                    </div>\n                  </form>\n                </Form>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </div>\n      </div>\n\n      {/* Filters and Search */}\n      <div className=\"p-6\">\n        <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-4 mb-6\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-1 relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n              <Input\n                placeholder=\"Search by invoice number or client name...\"\n                className=\"pl-10\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n              />\n            </div>\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-full md:w-48\">\n                <Filter className=\"w-4 h-4 mr-2\" />\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Statuses</SelectItem>\n                <SelectItem value=\"draft\">Draft</SelectItem>\n                <SelectItem value=\"sent\">Sent</SelectItem>\n                <SelectItem value=\"paid\">Paid</SelectItem>\n                <SelectItem value=\"overdue\">Overdue</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-6\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Outstanding</p>\n                  <p className=\"text-2xl font-bold text-blue-600\">\n                    ¬£{invoices.filter((inv: Invoice) => inv.status === \"sent\").reduce((sum: number, inv: Invoice) => sum + Number(inv.amount), 0).toLocaleString()}\n                  </p>\n                  <p className=\"text-xs text-gray-500\">\n                    {invoices.filter((inv: Invoice) => inv.status === \"sent\").length} invoices\n                  </p>\n                </div>\n                <FileText className=\"w-8 h-8 text-blue-600\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Overdue</p>\n                  <p className=\"text-2xl font-bold text-red-600\">\n                    {invoices.filter((inv: Invoice) => inv.status === \"overdue\").length}\n                  </p>\n                  <p className=\"text-xs text-gray-500\">Need attention</p>\n                </div>\n                <Calendar className=\"w-8 h-8 text-red-600\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Paid This Month</p>\n                  <p className=\"text-2xl font-bold text-green-600\">\n                    ¬£{invoices.filter((inv: Invoice) => inv.status === \"paid\").reduce((sum: number, inv: Invoice) => sum + Number(inv.amount), 0).toLocaleString()}\n                  </p>\n                  <p className=\"text-xs text-gray-500\">Great progress!</p>\n                </div>\n                <DollarSign className=\"w-8 h-8 text-green-600\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Total Invoices</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{invoices.length}</p>\n                  <p className=\"text-xs text-gray-500\">All time</p>\n                </div>\n                <FileText className=\"w-8 h-8 text-gray-600\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Invoices List */}\n        <div className=\"space-y-4\">\n          {filteredInvoices.length === 0 ? (\n            <Card>\n              <CardContent className=\"p-12 text-center\">\n                <FileText className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No invoices found</h3>\n                <p className=\"text-gray-600 mb-4\">\n                  {searchQuery || statusFilter !== \"all\" \n                    ? \"Try adjusting your search or filter criteria.\"\n                    : \"Get started by creating your first invoice.\"\n                  }\n                </p>\n                <Button onClick={() => setIsDialogOpen(true)}>\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Create Invoice\n                </Button>\n              </CardContent>\n            </Card>\n          ) : (\n            filteredInvoices.map((invoice: Invoice) => {\n              return (\n                <Card key={invoice.id} className=\"hover:shadow-md transition-shadow\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-3 mb-2\">\n                          <h3 className=\"font-semibold text-lg text-gray-900\">\n                            Invoice #{invoice.invoiceNumber}\n                          </h3>\n                          <Badge className={getStatusColor(invoice.status)}>\n                            {invoice.status}\n                          </Badge>\n                        </div>\n                        \n                        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm text-gray-600\">\n                          <div>\n                            <span className=\"font-medium\">Client:</span>\n                            <p className=\"text-gray-900\">{invoice.clientName}</p>\n                          </div>\n                          <div>\n                            <span className=\"font-medium\">Amount:</span>\n                            <p className=\"text-gray-900 font-semibold\">¬£{Number(invoice.amount).toLocaleString()}</p>\n                          </div>\n                          <div>\n                            <span className=\"font-medium\">Due Date:</span>\n                            <p className=\"text-gray-900\">{formatDate(invoice.dueDate)}</p>\n                          </div>\n                          <div>\n                            <span className=\"font-medium\">Created:</span>\n                            <p className=\"text-gray-900\">{formatDate(invoice.createdAt!)}</p>\n                          </div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center gap-2 ml-4\">\n                        {invoice.status === \"draft\" && (\n                          <>\n                            <Button size=\"sm\" variant=\"outline\" className=\"text-xs\">\n                              <Edit className=\"w-3 h-3 mr-1\" />\n                              Edit\n                            </Button>\n                            <Button size=\"sm\" className=\"text-xs\" onClick={() => handleSendInvoice(invoice)}>\n                              <Send className=\"w-3 h-3 mr-1\" />\n                              Send\n                            </Button>\n                          </>\n                        )}\n                        \n                        {invoice.status === \"sent\" && (\n                          <>\n                            <Button \n                              size=\"sm\" \n                              variant=\"outline\" \n                              className=\"text-xs text-green-600 hover:text-green-700\" \n                              onClick={() => handleMarkAsPaid(invoice)}\n                              disabled={markPaidMutation.isPending}\n                            >\n                              <CheckCircle className=\"w-3 h-3 mr-1\" />\n                              Mark Paid\n                            </Button>\n                            <Button size=\"sm\" variant=\"outline\" className=\"text-xs\" onClick={() => handleDownloadInvoice(invoice)}>\n                              <Download className=\"w-3 h-3 mr-1\" />\n                              Download\n                            </Button>\n                          </>\n                        )}\n                        \n                        {invoice.status === \"overdue\" && (\n                          <>\n                            <Button \n                              size=\"sm\" \n                              variant=\"outline\" \n                              className=\"text-xs text-green-600 hover:text-green-700\" \n                              onClick={() => handleMarkAsPaid(invoice)}\n                              disabled={markPaidMutation.isPending}\n                            >\n                              <CheckCircle className=\"w-3 h-3 mr-1\" />\n                              Mark Paid\n                            </Button>\n                            <Button \n                              size=\"sm\" \n                              variant=\"outline\" \n                              className=\"text-xs text-red-600 hover:text-red-700\" \n                              onClick={() => handleSendReminder(invoice)}\n                              disabled={sendReminderMutation.isPending}\n                            >\n                              <AlertTriangle className=\"w-3 h-3 mr-1\" />\n                              Send Reminder\n                            </Button>\n                            <Button size=\"sm\" variant=\"outline\" className=\"text-xs\" onClick={() => handleDownloadInvoice(invoice)}>\n                              <Download className=\"w-3 h-3 mr-1\" />\n                              Download\n                            </Button>\n                          </>\n                        )}\n                        \n                        {invoice.status === \"paid\" && (\n                          <Button size=\"sm\" variant=\"outline\" className=\"text-xs\" onClick={() => handleDownloadInvoice(invoice)}>\n                            <Download className=\"w-3 h-3 mr-1\" />\n                            Download\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":28958},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Music, Calendar, FileText, DollarSign, Shield, BarChart3, CheckCircle } from \"lucide-react\";\n\nexport default function Landing() {\n  const handleLogin = () => {\n    window.location.href = \"/api/login\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-purple-50 via-white to-blue-50\">\n      {/* Header */}\n      <header className=\"container mx-auto px-6 py-8\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-gradient-to-r from-purple-600 to-blue-600 rounded-xl flex items-center justify-center\">\n              <Music className=\"w-6 h-6 text-white\" />\n            </div>\n            <div>\n              <h1 className=\"text-2xl font-bold text-gray-900\">MusoBuddy</h1>\n              <p className=\"text-sm text-gray-600\">Admin made easy</p>\n            </div>\n          </div>\n          <Button onClick={handleLogin} size=\"lg\" className=\"bg-purple-600 hover:bg-purple-700\">\n            Get Started\n          </Button>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"container mx-auto px-6 py-16 text-center\">\n        <h2 className=\"text-5xl font-bold text-gray-900 mb-6\">\n          Streamline Your Music Business\n        </h2>\n        <p className=\"text-xl text-gray-600 mb-8 max-w-3xl mx-auto\">\n          MusoBuddy is the all-in-one platform for freelance musicians to automate admin workflows, \n          from enquiry to payment. Reduce admin time by 70% and increase booking conversion rates.\n        </p>\n        <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n          <Button onClick={handleLogin} size=\"lg\" className=\"bg-purple-600 hover:bg-purple-700 px-8\">\n            Start Free Trial\n          </Button>\n          <Button variant=\"outline\" size=\"lg\" className=\"px-8\">\n            Watch Demo\n          </Button>\n        </div>\n      </section>\n\n      {/* Features Grid */}\n      <section className=\"container mx-auto px-6 py-16\">\n        <h3 className=\"text-3xl font-bold text-center text-gray-900 mb-12\">\n          Everything You Need to Manage Your Music Business\n        </h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n          <Card className=\"hover:shadow-lg transition-shadow\">\n            <CardContent className=\"p-6\">\n              <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center mb-4\">\n                <FileText className=\"w-6 h-6 text-purple-600\" />\n              </div>\n              <h4 className=\"text-xl font-semibold text-gray-900 mb-2\">Smart Enquiry Tracking</h4>\n              <p className=\"text-gray-600\">\n                Capture and manage leads from multiple sources with automated follow-ups and status tracking.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"hover:shadow-lg transition-shadow\">\n            <CardContent className=\"p-6\">\n              <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center mb-4\">\n                <FileText className=\"w-6 h-6 text-blue-600\" />\n              </div>\n              <h4 className=\"text-xl font-semibold text-gray-900 mb-2\">Contract Generation</h4>\n              <p className=\"text-gray-600\">\n                Auto-generate professional contracts from enquiry data with customizable templates and e-signatures.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"hover:shadow-lg transition-shadow\">\n            <CardContent className=\"p-6\">\n              <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center mb-4\">\n                <DollarSign className=\"w-6 h-6 text-green-600\" />\n              </div>\n              <h4 className=\"text-xl font-semibold text-gray-900 mb-2\">Invoice Management</h4>\n              <p className=\"text-gray-600\">\n                Create and track invoices with payment reminders, multiple payment methods, and reconciliation.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"hover:shadow-lg transition-shadow\">\n            <CardContent className=\"p-6\">\n              <div className=\"w-12 h-12 bg-orange-100 rounded-lg flex items-center justify-center mb-4\">\n                <Calendar className=\"w-6 h-6 text-orange-600\" />\n              </div>\n              <h4 className=\"text-xl font-semibold text-gray-900 mb-2\">Calendar Integration</h4>\n              <p className=\"text-gray-600\">\n                Two-way Google Calendar sync with availability checking and color-coded status indicators.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"hover:shadow-lg transition-shadow\">\n            <CardContent className=\"p-6\">\n              <div className=\"w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center mb-4\">\n                <Shield className=\"w-6 h-6 text-red-600\" />\n              </div>\n              <h4 className=\"text-xl font-semibold text-gray-900 mb-2\">Compliance Tracking</h4>\n              <p className=\"text-gray-600\">\n                Automated reminders for insurance, certifications, and industry requirements with document storage.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"hover:shadow-lg transition-shadow\">\n            <CardContent className=\"p-6\">\n              <div className=\"w-12 h-12 bg-indigo-100 rounded-lg flex items-center justify-center mb-4\">\n                <BarChart3 className=\"w-6 h-6 text-indigo-600\" />\n              </div>\n              <h4 className=\"text-xl font-semibold text-gray-900 mb-2\">Analytics Dashboard</h4>\n              <p className=\"text-gray-600\">\n                Track revenue, conversion rates, and booking trends with comprehensive business insights.\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n      </section>\n\n      {/* Benefits Section */}\n      <section className=\"bg-gray-50 py-16\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 items-center\">\n            <div>\n              <h3 className=\"text-3xl font-bold text-gray-900 mb-6\">\n                Built Specifically for Musicians\n              </h3>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center space-x-3\">\n                  <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                  <span className=\"text-gray-700\">Reduce admin time by 70%</span>\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                  <span className=\"text-gray-700\">Increase booking conversion rates</span>\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                  <span className=\"text-gray-700\">Professional client presentation</span>\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                  <span className=\"text-gray-700\">Mobile-first responsive design</span>\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                  <span className=\"text-gray-700\">GDPR compliant and secure</span>\n                </div>\n              </div>\n            </div>\n            <div className=\"bg-white p-8 rounded-xl shadow-lg\">\n              <blockquote className=\"text-lg text-gray-700 italic mb-4\">\n                \"MusoBuddy has transformed how I manage my music business. I used to spend hours each week on admin - now it's all automated and professional.\"\n              </blockquote>\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-12 h-12 bg-gradient-to-r from-purple-500 to-blue-500 rounded-full flex items-center justify-center\">\n                  <Music className=\"w-6 h-6 text-white\" />\n                </div>\n                <div>\n                  <p className=\"font-semibold text-gray-900\">Sarah Johnson</p>\n                  <p className=\"text-sm text-gray-600\">Wedding Saxophonist</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-16\">\n        <div className=\"container mx-auto px-6 text-center\">\n          <h3 className=\"text-3xl font-bold text-gray-900 mb-6\">\n            Ready to Streamline Your Music Business?\n          </h3>\n          <p className=\"text-xl text-gray-600 mb-8\">\n            Join hundreds of musicians who have already transformed their admin workflows.\n          </p>\n          <Button onClick={handleLogin} size=\"lg\" className=\"bg-purple-600 hover:bg-purple-700 px-8\">\n            Start Your Free Trial\n          </Button>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-gray-900 text-white py-12\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"flex items-center justify-center space-x-3 mb-8\">\n            <div className=\"w-8 h-8 bg-gradient-to-r from-purple-600 to-blue-600 rounded-lg flex items-center justify-center\">\n              <Music className=\"w-5 h-5\" />\n            </div>\n            <span className=\"text-xl font-bold\">MusoBuddy</span>\n          </div>\n          <p className=\"text-center text-gray-400\">\n            ¬© 2025 MusoBuddy. All rights reserved. Made with ‚ô™ for musicians.\n          </p>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":9882},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/quick-add.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Calendar, MessageSquare, Plus, CheckCircle } from \"lucide-react\";\nimport { insertEnquirySchema } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { z } from \"zod\";\n\nconst quickAddFormSchema = z.object({\n  clientName: z.string().min(1, \"Client name is required\"),\n  clientEmail: z.string().email().optional().or(z.literal(\"\")),\n  clientPhone: z.string().optional(),\n  eventDate: z.string().min(1, \"Event date is required\"),\n  venue: z.string().optional(),\n  estimatedValue: z.string().optional(),\n  notes: z.string().optional(),\n  source: z.string().min(1, \"Source is required\"),\n  contactMethod: z.string().min(1, \"Contact method is required\"),\n});\n\ntype QuickAddFormData = z.infer<typeof quickAddFormSchema>;\n\nexport default function QuickAddPage() {\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const { toast } = useToast();\n\n  const form = useForm<QuickAddFormData>({\n    resolver: zodResolver(quickAddFormSchema),\n    defaultValues: {\n      clientName: \"\",\n      clientEmail: \"\",\n      clientPhone: \"\",\n      eventDate: \"\",\n      venue: \"\",\n      estimatedValue: \"\",\n      notes: \"\",\n      source: \"\",\n      contactMethod: \"\",\n    },\n  });\n\n  const createEnquiryMutation = useMutation({\n    mutationFn: async (data: QuickAddFormData) => {\n      const enquiryData = {\n        title: `Enquiry from ${data.clientName}`,\n        clientName: data.clientName,\n        clientEmail: data.clientEmail || null,\n        clientPhone: data.clientPhone || null,\n        eventDate: new Date(data.eventDate),\n        venue: data.venue || null,\n        estimatedValue: data.estimatedValue ? parseFloat(data.estimatedValue) : null,\n        notes: data.notes ? `${data.notes}\\n\\nContact Method - ${data.contactMethod}` : `Contact Method - ${data.contactMethod}`,\n        status: \"new\" as const,\n      };\n      const response = await apiRequest('POST', '/api/enquiries/quick-add', enquiryData);\n      return await response.json();\n    },\n    onSuccess: () => {\n      setIsSubmitted(true);\n      toast({\n        title: \"Success!\",\n        description: \"Enquiry has been added to your system\",\n      });\n    },\n    onError: (error) => {\n      console.error(\"Quick Add Error:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to add enquiry. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: QuickAddFormData) => {\n    createEnquiryMutation.mutate(data);\n  };\n\n  const handleAddAnother = () => {\n    setIsSubmitted(false);\n    form.reset();\n  };\n\n  if (isSubmitted) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center p-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center space-y-4\">\n              <div className=\"mx-auto w-16 h-16 bg-green-100 rounded-full flex items-center justify-center\">\n                <CheckCircle className=\"w-8 h-8 text-green-600\" />\n              </div>\n              <h2 className=\"text-xl font-semibold text-gray-900\">Enquiry Added!</h2>\n              <p className=\"text-gray-600\">\n                Your booking enquiry has been successfully added to MusoBuddy.\n              </p>\n              <div className=\"space-y-2\">\n                <Button onClick={handleAddAnother} className=\"w-full\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add Another Enquiry\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  onClick={() => window.close()} \n                  className=\"w-full\"\n                >\n                  Close\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-4\">\n      <div className=\"max-w-2xl mx-auto\">\n        <div className=\"text-center mb-6\">\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">Quick Add Enquiry</h1>\n          <p className=\"text-gray-600\">Add a new booking enquiry to your MusoBuddy system</p>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <MessageSquare className=\"w-5 h-5\" />\n              Enquiry Details\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"clientName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Client Name *</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Enter client name\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"source\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Source *</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Where did this enquiry come from?\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"WhatsApp\">WhatsApp</SelectItem>\n                            <SelectItem value=\"SMS\">SMS</SelectItem>\n                            <SelectItem value=\"Phone Call\">Phone Call</SelectItem>\n                            <SelectItem value=\"Email\">Email</SelectItem>\n                            <SelectItem value=\"In Person\">In Person</SelectItem>\n                            <SelectItem value=\"Social Media\">Social Media</SelectItem>\n                            <SelectItem value=\"Website\">Website</SelectItem>\n                            <SelectItem value=\"Referral\">Referral</SelectItem>\n                            <SelectItem value=\"Other\">Other</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"contactMethod\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Contact Method *</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"How to contact them?\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"Phone\">Phone</SelectItem>\n                            <SelectItem value=\"WhatsApp\">WhatsApp</SelectItem>\n                            <SelectItem value=\"Email\">Email</SelectItem>\n                            <SelectItem value=\"SMS\">SMS</SelectItem>\n                            <SelectItem value=\"Social Media\">Social Media</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"clientPhone\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Phone Number</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Enter phone number\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"clientEmail\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email Address</FormLabel>\n                      <FormControl>\n                        <Input type=\"email\" placeholder=\"Enter email address\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"eventDate\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Event Date *</FormLabel>\n                        <FormControl>\n                          <Input type=\"date\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"venue\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Venue</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Enter venue name\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"estimatedValue\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Price Quoted</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            placeholder=\"¬£0\" \n                            step=\"0.01\"\n                            {...field} \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"notes\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Message / Notes</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          placeholder=\"Enter the original enquiry message or any additional notes...\" \n                          className=\"min-h-[100px]\"\n                          {...field} \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full\" \n                  disabled={createEnquiryMutation.isPending}\n                >\n                  {createEnquiryMutation.isPending ? \"Adding Enquiry...\" : \"Add Enquiry\"}\n                </Button>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n\n        <div className=\"mt-6 p-4 bg-blue-50 rounded-lg\">\n          <h3 className=\"font-semibold text-blue-900 mb-2\">üí° Pro Tip</h3>\n          <p className=\"text-blue-800 text-sm\">\n            Save this page as a home screen shortcut for quick access when you receive enquiries on the go!\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":12855},"client/src/pages/settings.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Settings as SettingsIcon, Save, Building, Phone, Globe, CreditCard, FileText, ArrowLeft, Mail, Key } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { insertUserSettingsSchema, type UserSettings } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { z } from \"zod\";\n\nconst settingsFormSchema = insertUserSettingsSchema.omit({ userId: true });\n\nexport default function Settings() {\n  const { toast } = useToast();\n  const [bankDetails, setBankDetails] = useState({\n    bankName: \"\",\n    accountName: \"\",\n    sortCode: \"\",\n    accountNumber: \"\"\n  });\n\n  const { data: settings = {}, isLoading } = useQuery({\n    queryKey: [\"/api/settings\"],\n  });\n\n  const form = useForm<z.infer<typeof settingsFormSchema>>({\n    resolver: zodResolver(settingsFormSchema),\n    defaultValues: {\n      businessName: settings.businessName || \"\",\n      businessEmail: settings.businessEmail || \"\",\n      businessAddress: settings.businessAddress || \"\",\n      phone: settings.phone || \"\",\n      website: settings.website || \"\",\n      taxNumber: settings.taxNumber || \"\",\n      bankDetails: settings.bankDetails || \"\",\n      defaultTerms: settings.defaultTerms || \"\",\n      emailFromName: settings.emailFromName || \"\",\n    },\n  });\n\n  // Update form when settings data loads\n  const [hasInitialized, setHasInitialized] = useState(false);\n  if (settings.businessName && !hasInitialized) {\n    form.reset({\n      businessName: settings.businessName || \"\",\n      businessEmail: settings.businessEmail || \"\",\n      businessAddress: settings.businessAddress || \"\",\n      phone: settings.phone || \"\",\n      website: settings.website || \"\",\n      taxNumber: settings.taxNumber || \"\",\n      bankDetails: settings.bankDetails || \"\",\n      defaultTerms: settings.defaultTerms || \"\",\n      emailFromName: settings.emailFromName || \"\",\n    });\n    \n    // Parse bank details from stored string format\n    const bankDetailsString = settings.bankDetails || \"\";\n    const parsedBankDetails = {\n      bankName: \"\",\n      accountName: \"\",\n      sortCode: \"\",\n      accountNumber: \"\"\n    };\n    \n    if (bankDetailsString) {\n      const lines = bankDetailsString.split('\\n');\n      lines.forEach(line => {\n        if (line.includes('Bank Name:')) parsedBankDetails.bankName = line.split('Bank Name:')[1]?.trim() || \"\";\n        if (line.includes('Account Name:')) parsedBankDetails.accountName = line.split('Account Name:')[1]?.trim() || \"\";\n        if (line.includes('Sort Code:')) parsedBankDetails.sortCode = line.split('Sort Code:')[1]?.trim() || \"\";\n        if (line.includes('Account Number:')) parsedBankDetails.accountNumber = line.split('Account Number:')[1]?.trim() || \"\";\n      });\n    }\n    \n    setBankDetails(parsedBankDetails);\n    setHasInitialized(true);\n  }\n\n  const saveSettingsMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof settingsFormSchema>) => {\n      return await apiRequest(\"POST\", \"/api/settings\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Settings saved\",\n        description: \"Your business settings have been updated successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/settings\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to save settings. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: z.infer<typeof settingsFormSchema>) => {\n    // Convert bank details table format back to string for storage\n    const bankDetailsString = [\n      bankDetails.bankName ? `Bank Name: ${bankDetails.bankName}` : '',\n      bankDetails.accountName ? `Account Name: ${bankDetails.accountName}` : '',\n      bankDetails.sortCode ? `Sort Code: ${bankDetails.sortCode}` : '',\n      bankDetails.accountNumber ? `Account Number: ${bankDetails.accountNumber}` : ''\n    ].filter(line => line.length > 0).join('\\n');\n    \n    const updatedData = {\n      ...data,\n      bankDetails: bankDetailsString\n    };\n    \n    saveSettingsMutation.mutate(updatedData);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"text-lg\">Loading settings...</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 max-w-4xl\">\n      {/* Back Button */}\n      <div className=\"mb-6\">\n        <Link href=\"/\">\n          <Button variant=\"outline\" className=\"flex items-center gap-2\">\n            <ArrowLeft className=\"h-4 w-4\" />\n            Back to Dashboard\n          </Button>\n        </Link>\n      </div>\n\n      <div className=\"flex items-center gap-3 mb-8\">\n        <SettingsIcon className=\"h-8 w-8 text-blue-600\" />\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">Business Settings</h1>\n          <p className=\"text-gray-600 dark:text-gray-400 mt-1\">\n            Configure your business details for contracts and invoices\n          </p>\n        </div>\n      </div>\n\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n          {/* Business Information */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Building className=\"h-5 w-5\" />\n                Business Information\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"businessName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Business Name</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Your Music Services\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"businessEmail\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Business Email</FormLabel>\n                    <FormControl>\n                      <Input type=\"email\" placeholder=\"your@email.com\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"businessAddress\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Business Address</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"123 Music Street&#10;City, County&#10;Postcode\"\n                        className=\"min-h-[100px]\"\n                        {...field} \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"phone\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"flex items-center gap-2\">\n                        <Phone className=\"h-4 w-4\" />\n                        Phone Number\n                      </FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"+44 1234 567890\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"website\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"flex items-center gap-2\">\n                        <Globe className=\"h-4 w-4\" />\n                        Website\n                      </FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"https://yourmusic.com\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Financial Information */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <CreditCard className=\"h-5 w-5\" />\n                Financial Information\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"taxNumber\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Tax/VAT Number</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"GB123456789\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div>\n                <FormLabel className=\"text-base font-medium\">Bank Details for Invoices</FormLabel>\n                <div className=\"mt-2 border rounded-lg overflow-hidden\">\n                  <table className=\"w-full\">\n                    <tbody>\n                      <tr className=\"border-b\">\n                        <td className=\"px-3 py-2 bg-muted/50 font-medium text-sm w-32\">Bank Name</td>\n                        <td className=\"px-3 py-2\">\n                          <Input \n                            placeholder=\"Your Bank\"\n                            value={bankDetails.bankName}\n                            onChange={(e) => setBankDetails(prev => ({ ...prev, bankName: e.target.value }))}\n                            className=\"border-0 focus-visible:ring-0 p-0 h-auto\"\n                          />\n                        </td>\n                      </tr>\n                      <tr className=\"border-b\">\n                        <td className=\"px-3 py-2 bg-muted/50 font-medium text-sm\">Account Name</td>\n                        <td className=\"px-3 py-2\">\n                          <Input \n                            placeholder=\"Your Business Name\"\n                            value={bankDetails.accountName}\n                            onChange={(e) => setBankDetails(prev => ({ ...prev, accountName: e.target.value }))}\n                            className=\"border-0 focus-visible:ring-0 p-0 h-auto\"\n                          />\n                        </td>\n                      </tr>\n                      <tr className=\"border-b\">\n                        <td className=\"px-3 py-2 bg-muted/50 font-medium text-sm\">Sort Code</td>\n                        <td className=\"px-3 py-2\">\n                          <Input \n                            placeholder=\"12-34-56\"\n                            value={bankDetails.sortCode}\n                            onChange={(e) => setBankDetails(prev => ({ ...prev, sortCode: e.target.value }))}\n                            className=\"border-0 focus-visible:ring-0 p-0 h-auto\"\n                          />\n                        </td>\n                      </tr>\n                      <tr>\n                        <td className=\"px-3 py-2 bg-muted/50 font-medium text-sm\">Account Number</td>\n                        <td className=\"px-3 py-2\">\n                          <Input \n                            placeholder=\"12345678\"\n                            value={bankDetails.accountNumber}\n                            onChange={(e) => setBankDetails(prev => ({ ...prev, accountNumber: e.target.value }))}\n                            className=\"border-0 focus-visible:ring-0 p-0 h-auto\"\n                          />\n                        </td>\n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Contract Terms */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <FileText className=\"h-5 w-5\" />\n                Default Contract Terms\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <FormField\n                control={form.control}\n                name=\"defaultTerms\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Standard Terms and Conditions</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"Enter your standard terms and conditions that will appear on contracts...\"\n                        className=\"min-h-[120px]\"\n                        {...field} \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </CardContent>\n          </Card>\n\n          {/* Email Settings */}\n          <Card>\n            <CardHeader className=\"flex flex-row items-center gap-4\">\n              <div className=\"flex h-10 w-10 items-center justify-center rounded-lg bg-orange-100\">\n                <Mail className=\"h-5 w-5 text-orange-600\" />\n              </div>\n              <div>\n                <CardTitle>Email Settings</CardTitle>\n                <p className=\"text-sm text-muted-foreground\">\n                  Customize how your emails appear to clients\n                </p>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <FormField\n                control={form.control}\n                name=\"emailFromName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email From Name</FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder=\"e.g., Sarah Johnson Music, DJ Mike Events\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <p className=\"text-sm text-muted-foreground\">\n                      This name will appear in the \"From\" field when clients receive your contracts and invoices\n                    </p>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </CardContent>\n          </Card>\n\n          {/* Save Button */}\n          <div className=\"flex justify-end\">\n            <Button \n              type=\"submit\" \n              size=\"lg\"\n              disabled={saveSettingsMutation.isPending}\n              className=\"flex items-center gap-2\"\n            >\n              <Save className=\"h-4 w-4\" />\n              {saveSettingsMutation.isPending ? \"Saving...\" : \"Save Settings\"}\n            </Button>\n          </div>\n        </form>\n      </Form>\n    </div>\n  );\n}","size_bytes":15692},"client/src/pages/sign-contract.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useParams, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { CheckCircle, FileText, Calendar, MapPin, Clock, DollarSign, Download } from \"lucide-react\";\n\ninterface Contract {\n  id: number;\n  contractNumber: string;\n  clientName: string;\n  clientEmail: string;\n  clientPhone?: string;\n  eventDate: string;\n  eventTime: string;\n  venue: string;\n  fee: string;\n  terms?: string;\n  status: string;\n  signedAt?: string;\n}\n\ninterface UserSettings {\n  businessName?: string;\n  businessEmail?: string;\n  businessAddress?: string;\n  phone?: string;\n  website?: string;\n}\n\nexport default function SignContract() {\n  const params = useParams();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const contractId = params.id;\n  \n  const [contract, setContract] = useState<Contract | null>(null);\n  const [userSettings, setUserSettings] = useState<UserSettings | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [signing, setSigning] = useState(false);\n  const [signatureName, setSignatureName] = useState(\"\");\n  const [agreed, setAgreed] = useState(false);\n\n  // Load contract details\n  useEffect(() => {\n    if (!contractId) return;\n    \n    const loadContract = async () => {\n      try {\n        // Get contract details (public endpoint, no auth needed)\n        const response = await fetch(`/api/contracts/public/${contractId}`);\n        if (!response.ok) {\n          throw new Error('Contract not found');\n        }\n        const contractData = await response.json();\n        console.log('Contract data loaded:', contractData);\n        console.log('Contract status:', contractData.status);\n        console.log('Contract ID:', contractData.id);\n        console.log('Contract client name:', contractData.clientName);\n        setContract(contractData);\n        \n        // Get business settings for the contract owner\n        const settingsResponse = await fetch(`/api/settings/public/${contractData.userId}`);\n        if (settingsResponse.ok) {\n          const settingsData = await settingsResponse.json();\n          setUserSettings(settingsData);\n        }\n        \n        // Pre-fill signature name with client name\n        setSignatureName(contractData.clientName || \"\");\n        \n      } catch (error) {\n        console.error(\"Error loading contract:\", error);\n        toast({\n          title: \"Error\",\n          description: \"Contract not found or has already been signed\",\n          variant: \"destructive\",\n        });\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadContract();\n  }, [contractId, toast]);\n\n  const handleSign = async () => {\n    if (!signatureName.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter your full name to sign the contract\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!agreed) {\n      toast({\n        title: \"Error\", \n        description: \"Please confirm you agree to the terms and conditions\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setSigning(true);\n    try {\n      console.log('Attempting to sign contract:', contractId);\n      console.log('Signature name:', signatureName.trim());\n      \n      const response = await fetch(`/api/contracts/sign/${contractId}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          signatureName: signatureName.trim(),\n        }),\n      }).catch(networkError => {\n        console.error('Network error during signing:', networkError);\n        throw new Error('Network error: Unable to reach the server. Please check your connection and try again.');\n      });\n\n      console.log('Sign response status:', response.status);\n      console.log('Sign response ok:', response.ok);\n\n      if (!response.ok) {\n        const errorData = await response.text().catch(() => 'Unknown error');\n        console.error('Sign error response:', errorData);\n        throw new Error(`Failed to sign contract: ${response.status} - ${errorData}`);\n      }\n\n      const responseData = await response.json().catch(() => ({}));\n      console.log('Sign success response:', responseData);\n\n      // Update local contract state\n      setContract(prev => prev ? {\n        ...prev,\n        status: 'signed',\n        signedAt: new Date().toISOString()\n      } : null);\n\n      toast({\n        title: \"Success\",\n        description: \"Contract signed successfully! You will receive a confirmation email shortly.\",\n      });\n\n    } catch (error) {\n      console.error(\"Error signing contract:\", error);\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to sign contract. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setSigning(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto\"></div>\n          <p className=\"mt-2 text-gray-600\">Loading contract...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!contract) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"text-center py-6\">\n            <FileText className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n            <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">Contract Not Found</h2>\n            <p className=\"text-gray-600\">This contract may have already been signed or the link is invalid.</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (contract.status === 'signed') {\n    const handleDownloadPDF = async () => {\n      try {\n        console.log('Downloading PDF for contract:', contractId);\n        const response = await fetch(`/api/contracts/public/${contractId}/pdf`);\n        console.log('PDF response status:', response.status);\n        \n        if (!response.ok) {\n          const errorText = await response.text();\n          console.error('PDF download error:', errorText);\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const blob = await response.blob();\n        console.log('PDF blob size:', blob.size);\n        \n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `Contract-${contract.contractNumber}-Signed.pdf`;\n        document.body.appendChild(a); // Ensure element is in DOM\n        a.click();\n        document.body.removeChild(a); // Clean up\n        window.URL.revokeObjectURL(url);\n        \n        toast({\n          title: \"Success\",\n          description: \"Signed contract PDF downloaded successfully!\",\n        });\n      } catch (error) {\n        console.error('Error downloading contract:', error);\n        toast({\n          title: \"Error\",\n          description: \"Failed to download contract PDF. Please try again.\",\n          variant: \"destructive\",\n        });\n      }\n    };\n\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <Card className=\"w-full max-w-lg\">\n          <CardContent className=\"text-center py-8\">\n            <CheckCircle className=\"h-16 w-16 text-green-600 mx-auto mb-6\" />\n            <h2 className=\"text-2xl font-semibold text-gray-900 mb-4\">Contract Successfully Signed!</h2>\n            <p className=\"text-gray-600 mb-6\">\n              This contract was signed on {new Date(contract.signedAt || '').toLocaleDateString('en-GB')}.\n            </p>\n            \n            <div className=\"bg-green-50 border border-green-200 rounded-lg p-4 mb-6\">\n              <p className=\"text-green-800 text-sm\">\n                üìß Confirmation emails with the signed contract have been sent to both parties.\n              </p>\n            </div>\n            \n            <Button \n              onClick={handleDownloadPDF}\n              className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n              size=\"lg\"\n            >\n              <Download className=\"h-4 w-4 mr-2\" />\n              Download Signed Contract (PDF)\n            </Button>\n            \n            <p className=\"text-xs text-gray-500 mt-4\">\n              Keep this copy for your records\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-8\">\n      <div className=\"container mx-auto max-w-4xl px-4\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Performance Contract</h1>\n          <p className=\"text-gray-600\">Contract #{contract.contractNumber}</p>\n          <Badge variant=\"outline\" className=\"mt-2\">\n            {contract.status === 'sent' ? 'Awaiting Signature' : contract.status}\n          </Badge>\n        </div>\n\n        <div className=\"grid gap-6 lg:grid-cols-3\">\n          {/* Contract Details */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {/* Event Details */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Calendar className=\"h-5 w-5\" />\n                  Event Details\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label className=\"text-sm font-medium text-gray-700\">Date</Label>\n                    <p className=\"text-gray-900\">{new Date(contract.eventDate).toLocaleDateString('en-GB')}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-medium text-gray-700\">Time</Label>\n                    <p className=\"text-gray-900\">{contract.eventTime}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-medium text-gray-700\">Venue</Label>\n                    <p className=\"text-gray-900\">{contract.venue}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-medium text-gray-700\">Fee</Label>\n                    <p className=\"text-gray-900 font-semibold\">¬£{contract.fee}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Performer Details */}\n            {userSettings && (\n              <Card>\n                <CardHeader>\n                  <CardTitle>Performer Details</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2\">\n                    <p className=\"font-semibold\">{userSettings.businessName}</p>\n                    {userSettings.businessAddress && (\n                      <p className=\"text-gray-600\">{userSettings.businessAddress.replace(/\\n/g, ', ')}</p>\n                    )}\n                    {userSettings.phone && (\n                      <p className=\"text-gray-600\">Phone: {userSettings.phone}</p>\n                    )}\n                    {userSettings.businessEmail && (\n                      <p className=\"text-gray-600\">Email: {userSettings.businessEmail}</p>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Client Details */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Client Details</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  <p className=\"font-semibold\">{contract.clientName}</p>\n                  <p className=\"text-gray-600\">Email: {contract.clientEmail}</p>\n                  {contract.clientPhone && (\n                    <p className=\"text-gray-600\">Phone: {contract.clientPhone}</p>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Terms and Conditions */}\n            {contract.terms && (\n              <Card>\n                <CardHeader>\n                  <CardTitle>Terms and Conditions</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"prose prose-sm max-w-none\">\n                    <p className=\"whitespace-pre-line text-gray-700\">{contract.terms}</p>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n\n          {/* Signature Section */}\n          <div className=\"lg:col-span-1\">\n            <Card className=\"sticky top-8\">\n              <CardHeader>\n                <CardTitle>Digital Signature</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"signatureName\">Full Name</Label>\n                  <Input\n                    id=\"signatureName\"\n                    type=\"text\"\n                    value={signatureName}\n                    onChange={(e) => setSignatureName(e.target.value)}\n                    placeholder=\"Enter your full legal name\"\n                    className=\"mt-1\"\n                  />\n                </div>\n\n                <div className=\"flex items-start space-x-2\">\n                  <input\n                    type=\"checkbox\"\n                    id=\"agreed\"\n                    checked={agreed}\n                    onChange={(e) => setAgreed(e.target.checked)}\n                    className=\"mt-1\"\n                  />\n                  <Label htmlFor=\"agreed\" className=\"text-sm leading-tight\">\n                    I agree to the terms and conditions outlined in this contract and confirm that the information provided is accurate.\n                  </Label>\n                </div>\n\n                <Separator />\n\n                <Button\n                  onClick={handleSign}\n                  disabled={signing || !signatureName.trim() || !agreed}\n                  className=\"w-full\"\n                  size=\"lg\"\n                >\n                  {signing ? (\n                    <>\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                      Signing Contract...\n                    </>\n                  ) : (\n                    <>\n                      <FileText className=\"h-4 w-4 mr-2\" />\n                      Sign Contract\n                    </>\n                  )}\n                </Button>\n\n                <p className=\"text-xs text-gray-500 text-center\">\n                  By signing, you agree to the terms and create a legally binding agreement.\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":15261},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}