import { useState, useEffect } from "react";
import { useQuery, useMutation } from "@tanstack/react-query";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { Search, Filter, MoreHorizontal, DollarSign, Calendar, FileText, Download, Plus, Send, Edit, CheckCircle, AlertTriangle, Trash2, Archive, FileDown, RefreshCw, ArrowLeft, Eye } from "lucide-react";
import { insertInvoiceSchema, type Invoice } from "@shared/schema";
import { useLocation, Link } from "wouter";
import { apiRequest, queryClient } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";
import { z } from "zod";
import Sidebar from "@/components/sidebar";
import MobileNav from "@/components/mobile-nav";
import { useResponsive } from "@/hooks/useResponsive";

const invoiceFormSchema = z.object({
  contractId: z.number().optional(), // Made optional - contracts are just for auto-fill
  clientName: z.string().min(1, "Client name is required"),
  clientEmail: z.string().email("Please enter a valid email address").or(z.literal("")).optional(),
  clientAddress: z.string().optional(),
  venueAddress: z.string().optional(),
  amount: z.string().min(1, "Amount is required").refine((val) => {
    const num = parseFloat(val);
    return !isNaN(num) && num > 0;
  }, "Amount must be a valid number greater than 0"),
  dueDate: z.string().min(1, "Due date is required"),
  performanceDate: z.string().optional(),
  performanceFee: z.string().optional(),
  depositPaid: z.string().optional(),
});

export default function Invoices() {
  const { toast } = useToast();
  const [location, setLocation] = useLocation();
  const [searchQuery, setSearchQuery] = useState("");
  const [statusFilter, setStatusFilter] = useState("all");
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [editingInvoice, setEditingInvoice] = useState<Invoice | null>(null);
  const [editAndResendMode, setEditAndResendMode] = useState(false);
  const [selectedInvoices, setSelectedInvoices] = useState<number[]>([]);
  const [bulkActionLoading, setBulkActionLoading] = useState(false);
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const { isDesktop } = useResponsive();

  // Check for URL parameters to auto-open dialog
  useEffect(() => {
    const params = new URLSearchParams(window.location.search);
    const createNew = params.get('create');
    if (createNew === 'true') {
      setIsDialogOpen(true);
    }
  }, [location]);

  const { data: invoices = [], isLoading } = useQuery({
    queryKey: ['/api/invoices'],
  });

  const { data: contracts = [] } = useQuery({
    queryKey: ['/api/contracts'],
  });

  const { data: userSettings } = useQuery({
    queryKey: ['/api/settings'],
  });

  const form = useForm<z.infer<typeof invoiceFormSchema>>({
    resolver: zodResolver(invoiceFormSchema),
    defaultValues: {
      contractId: undefined, // Optional contract selection
      clientName: "", 
      clientEmail: "",
      clientAddress: "",
      venueAddress: "",
      amount: "",
      dueDate: "",
      performanceDate: "",
      performanceFee: "",
      depositPaid: "",
    },
  });

  // Auto-set due date (invoice numbers are now auto-generated by backend)
  useEffect(() => {
    // Set due date to 30 days from now
    const dueDate = new Date();
    dueDate.setDate(dueDate.getDate() + 30);
    form.setValue("dueDate", dueDate.toISOString().split('T')[0]);
  }, [form]);

  // Watch contract ID changes
  const selectedContractId = form.watch("contractId");

  // Auto-fill fields when contract is selected (for convenience)
  // Only auto-fill when user explicitly selects a contract (not when form first loads)
  const [contractHasBeenSelected, setContractHasBeenSelected] = useState(false);
  
  useEffect(() => {
    // Only auto-fill if a contract is explicitly selected AND we have contracts loaded
    if (selectedContractId && contracts.length > 0 && contractHasBeenSelected) {
      const selectedContract = contracts.find((c: any) => c.id === selectedContractId);
      if (selectedContract) {
        // Only fill empty fields to preserve user edits
        if (!form.getValues("clientName")) {
          form.setValue("clientName", selectedContract.clientName);
        }
        if (!form.getValues("clientEmail")) {
          form.setValue("clientEmail", selectedContract.clientEmail || "");
        }
        if (!form.getValues("venueAddress")) {
          form.setValue("venueAddress", selectedContract.venue || "");
        }
        if (!form.getValues("performanceDate") && selectedContract.eventDate) {
          form.setValue("performanceDate", new Date(selectedContract.eventDate).toISOString().split('T')[0]);
        }
        if (!form.getValues("amount") && selectedContract.fee) {
          // Set the performance fee and calculate amount due (fee minus any deposit)
          const fee = Number(selectedContract.fee);
          const deposit = Number(selectedContract.deposit) || 0;
          const amountDue = fee - deposit;
          
          form.setValue("performanceFee", selectedContract.fee.toString());
          form.setValue("depositPaid", selectedContract.deposit?.toString() || "0");
          form.setValue("amount", amountDue.toString());
        }
      }
    }
  }, [selectedContractId, contracts, form, contractHasBeenSelected]);

  // Helper functions
  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-GB', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric'
    });
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'draft':
        return 'bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-100';
      case 'sent':
        return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-100';
      case 'paid':
        return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-100';
      case 'overdue':
        return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-100';
      default:
        return 'bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-100';
    }
  };

  // Filter invoices based on search and status
  const filteredInvoices = invoices.filter((invoice: Invoice) => {
    const matchesSearch = invoice.clientName.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         invoice.invoiceNumber.toLowerCase().includes(searchQuery.toLowerCase());
    const matchesStatus = statusFilter === 'all' || invoice.status === statusFilter;
    return matchesSearch && matchesStatus;
  });

  // Selection handlers
  const handleSelectInvoice = (invoiceId: number, checked: boolean) => {
    if (checked) {
      setSelectedInvoices([...selectedInvoices, invoiceId]);
    } else {
      setSelectedInvoices(selectedInvoices.filter(id => id !== invoiceId));
    }
  };

  const handleSelectAll = (checked: boolean) => {
    if (checked) {
      setSelectedInvoices(filteredInvoices.map((invoice: Invoice) => invoice.id));
    } else {
      setSelectedInvoices([]);
    }
  };

  // Action handlers
  const handleViewInvoice = (invoice: Invoice) => {
    setLocation(`/view-invoice/${invoice.id}`);
  };

  const handleEditInvoice = (invoice: Invoice) => {
    setEditingInvoice(invoice);
    setEditAndResendMode(false);
    
    // Populate form with invoice data
    form.setValue("clientName", invoice.clientName);
    form.setValue("clientEmail", invoice.clientEmail || "");
    form.setValue("clientAddress", invoice.clientAddress || "");
    form.setValue("venueAddress", invoice.venueAddress || "");
    form.setValue("amount", invoice.amount.toString());
    form.setValue("dueDate", new Date(invoice.dueDate).toISOString().split('T')[0]);
    form.setValue("performanceDate", invoice.performanceDate ? new Date(invoice.performanceDate).toISOString().split('T')[0] : "");
    form.setValue("performanceFee", invoice.performanceFee?.toString() || "");
    form.setValue("depositPaid", invoice.depositPaid?.toString() || "");
    
    setIsDialogOpen(true);
  };

  const handleEditAndResend = (invoice: Invoice) => {
    setEditingInvoice(invoice);
    setEditAndResendMode(true);
    
    // Populate form with invoice data
    form.setValue("clientName", invoice.clientName);
    form.setValue("clientEmail", invoice.clientEmail || "");
    form.setValue("clientAddress", invoice.clientAddress || "");
    form.setValue("venueAddress", invoice.venueAddress || "");
    form.setValue("amount", invoice.amount.toString());
    form.setValue("dueDate", new Date(invoice.dueDate).toISOString().split('T')[0]);
    form.setValue("performanceDate", invoice.performanceDate ? new Date(invoice.performanceDate).toISOString().split('T')[0] : "");
    form.setValue("performanceFee", invoice.performanceFee?.toString() || "");
    form.setValue("depositPaid", invoice.depositPaid?.toString() || "");
    
    setIsDialogOpen(true);
  };

  // Mutation for creating/updating invoices
  const createInvoiceMutation = useMutation({
    mutationFn: async (data: z.infer<typeof invoiceFormSchema>) => {
      const invoiceData = {
        ...data,
        contractId: data.contractId || null,
        clientEmail: data.clientEmail || null,
        clientAddress: data.clientAddress || null,
        venueAddress: data.venueAddress || null,
        performanceDate: data.performanceDate ? new Date(data.performanceDate) : null,
        performanceFee: data.performanceFee ? data.performanceFee : null,
        depositPaid: data.depositPaid ? data.depositPaid : null,
        amount: data.amount,
        dueDate: new Date(data.dueDate),
      };

      if (editingInvoice) {
        // Update existing invoice
        const response = await fetch(`/api/invoices/${editingInvoice.id}`, {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(invoiceData),
          credentials: 'include',
        });
        
        if (!response.ok) {
          throw new Error('Failed to update invoice');
        }
        
        return response.json();
      } else {
        // Create new invoice
        const response = await fetch('/api/invoices', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(invoiceData),
          credentials: 'include',
        });
        
        if (!response.ok) {
          throw new Error('Failed to create invoice');
        }
        
        return response.json();
      }
    },
    onSuccess: (data) => {
      queryClient.invalidateQueries({ queryKey: ['/api/invoices'] });
      setIsDialogOpen(false);
      setEditingInvoice(null);
      setEditAndResendMode(false);
      form.reset();
      toast({
        title: "Success",
        description: editingInvoice ? "Invoice updated successfully!" : "Invoice created successfully!",
      });

      // If it's edit and resend mode, also send the email
      if (editAndResendMode) {
        sendInvoiceEmail(data);
      }
    },
    onError: (error) => {
      console.error('Invoice creation/update error:', error);
      toast({
        title: "Error",
        description: "Failed to save invoice. Please try again.",
        variant: "destructive",
      });
    },
  });

  // Send invoice email mutation
  const sendInvoiceMutation = useMutation({
    mutationFn: async (invoice: Invoice) => {
      const response = await fetch('/api/invoices/send-email', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          invoiceId: invoice.id,
          clientEmail: invoice.clientEmail,
        }),
        credentials: 'include',
      });
      
      if (!response.ok) {
        throw new Error('Failed to send invoice email');
      }
      
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/invoices'] });
      toast({
        title: "Success",
        description: "Invoice email sent successfully!",
      });
    },
    onError: (error) => {
      console.error('Send invoice email error:', error);
      toast({
        title: "Error",
        description: "Failed to send invoice email. Please try again.",
        variant: "destructive",
      });
    },
  });

  const sendInvoiceEmail = (invoice: Invoice) => {
    if (!invoice.clientEmail) {
      toast({
        title: "Error",
        description: "Client email is required to send invoice",
        variant: "destructive",
      });
      return;
    }
    sendInvoiceMutation.mutate(invoice);
  };

  // Mark as paid mutation
  const markAsPaidMutation = useMutation({
    mutationFn: async (invoiceId: number) => {
      const response = await fetch(`/api/invoices/${invoiceId}/mark-paid`, {
        method: 'POST',
        credentials: 'include',
      });
      
      if (!response.ok) {
        throw new Error('Failed to mark invoice as paid');
      }
      
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/invoices'] });
      toast({
        title: "Success",
        description: "Invoice marked as paid!",
      });
    },
    onError: (error) => {
      console.error('Mark as paid error:', error);
      toast({
        title: "Error",
        description: "Failed to mark invoice as paid. Please try again.",
        variant: "destructive",
      });
    },
  });

  // Send reminder mutation
  const sendReminderMutation = useMutation({
    mutationFn: async (invoice: Invoice) => {
      const response = await fetch(`/api/invoices/${invoice.id}/send-reminder`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          clientEmail: invoice.clientEmail,
          isOverdue: invoice.status === 'overdue',
        }),
        credentials: 'include',
      });
      
      if (!response.ok) {
        throw new Error('Failed to send reminder');
      }
      
      return response.json();
    },
    onSuccess: () => {
      toast({
        title: "Success",
        description: "Reminder sent successfully!",
      });
    },
    onError: (error) => {
      console.error('Send reminder error:', error);
      toast({
        title: "Error",
        description: "Failed to send reminder. Please try again.",
        variant: "destructive",
      });
    },
  });

  // Bulk delete mutation
  const bulkDeleteMutation = useMutation({
    mutationFn: async (invoiceIds: number[]) => {
      const response = await fetch('/api/invoices/bulk-delete', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ invoiceIds }),
        credentials: 'include',
      });
      
      if (!response.ok) {
        throw new Error('Failed to delete invoices');
      }
      
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/invoices'] });
      setSelectedInvoices([]);
      toast({
        title: "Success",
        description: "Selected invoices deleted successfully!",
      });
    },
    onError: (error) => {
      console.error('Bulk delete error:', error);
      toast({
        title: "Error",
        description: "Failed to delete invoices. Please try again.",
        variant: "destructive",
      });
    },
  });

  const handleBulkDelete = async () => {
    if (selectedInvoices.length === 0) return;
    
    if (confirm(`Are you sure you want to delete ${selectedInvoices.length} invoice(s)?`)) {
      setBulkActionLoading(true);
      try {
        await bulkDeleteMutation.mutateAsync(selectedInvoices);
      } finally {
        setBulkActionLoading(false);
      }
    }
  };

  const onSubmit = (data: z.infer<typeof invoiceFormSchema>) => {
    createInvoiceMutation.mutate(data);
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gray-50 dark:bg-gray-900 p-6">
        <div className="animate-pulse space-y-6">
          <div className="h-8 bg-gray-200 dark:bg-gray-700 rounded w-1/4"></div>
          <div className="space-y-4">
            {[...Array(5)].map((_, i) => (
              <div key={i} className="h-32 bg-gray-200 dark:bg-gray-700 rounded"></div>
            ))}
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
      <Sidebar sidebarOpen={sidebarOpen} setSidebarOpen={setSidebarOpen} />
      
      {/* Main Content */}
      <div className="md:ml-64">
        {/* Header */}
        <div className="bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 px-6 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center">
              <button
                onClick={() => setSidebarOpen(!sidebarOpen)}
                className="md:hidden mr-3 p-2 rounded-md hover:bg-gray-100 dark:hover:bg-gray-700"
              >
                <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16M4 18h16" />
                </svg>
              </button>
              <div>
                <h1 className="text-2xl font-bold text-gray-900 dark:text-white ml-12 md:ml-0">Invoices</h1>
                <p className="text-gray-600 dark:text-gray-400 ml-12 md:ml-0">Manage your invoices and payments</p>
              </div>
            </div>
            <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
              <DialogTrigger asChild>
                <Button className="bg-purple-600 hover:bg-purple-700">
                  <Plus className="w-4 h-4 mr-2" />
                  Create Invoice
                </Button>
              </DialogTrigger>
              <DialogContent className="max-w-2xl">
                <DialogHeader>
                  <DialogTitle>
                    {editingInvoice ? 
                      (editAndResendMode ? "Edit & Resend Invoice" : "Edit Invoice") : 
                      "Create New Invoice"
                    }
                  </DialogTitle>
                </DialogHeader>
                <Form {...form}>
                  <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
                    <div className="grid grid-cols-2 gap-4">
                      <FormField
                        control={form.control}
                        name="contractId"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Contract (Optional - for auto-fill)</FormLabel>
                            <Select 
                              onValueChange={(value) => {
                                field.onChange(parseInt(value));
                                setContractHasBeenSelected(true);
                              }}
                              value={field.value?.toString() || ""}
                            >
                              <FormControl>
                                <SelectTrigger>
                                  <SelectValue placeholder="Select contract to auto-fill" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent>
                                {contracts.map((contract: any) => (
                                  <SelectItem key={contract.id} value={contract.id.toString()}>
                                    {contract.clientName} - {contract.eventType}
                                  </SelectItem>
                                ))}
                              </SelectContent>
                            </Select>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      <div></div>
                    </div>

                    <div className="grid grid-cols-2 gap-4">
                      <FormField
                        control={form.control}
                        name="clientName"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Client Name</FormLabel>
                            <FormControl>
                              <Input placeholder="Enter client name" {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      <FormField
                        control={form.control}
                        name="clientEmail"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Client Email</FormLabel>
                            <FormControl>
                              <Input placeholder="Enter client email" {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>

                    <FormField
                      control={form.control}
                      name="clientAddress"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Client Address</FormLabel>
                          <FormControl>
                            <Input placeholder="Enter client address" {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <FormField
                      control={form.control}
                      name="venueAddress"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Venue Address</FormLabel>
                          <FormControl>
                            <Input placeholder="Enter venue address" {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <div className="grid grid-cols-2 gap-4">
                      <FormField
                        control={form.control}
                        name="amount"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Invoice Amount (£)</FormLabel>
                            <FormControl>
                              <Input placeholder="Enter amount" {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      <FormField
                        control={form.control}
                        name="dueDate"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Due Date</FormLabel>
                            <FormControl>
                              <Input type="date" {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>

                    <div className="grid grid-cols-3 gap-4">
                      <FormField
                        control={form.control}
                        name="performanceDate"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Performance Date</FormLabel>
                            <FormControl>
                              <Input type="date" {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      <FormField
                        control={form.control}
                        name="performanceFee"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Performance Fee (£)</FormLabel>
                            <FormControl>
                              <Input placeholder="Enter performance fee" {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      <FormField
                        control={form.control}
                        name="depositPaid"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Deposit Paid (£)</FormLabel>
                            <FormControl>
                              <Input placeholder="Enter deposit amount" {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>

                    <div className="flex justify-end space-x-3">
                      <Button type="button" variant="outline" onClick={() => {
                        setIsDialogOpen(false);
                        setEditingInvoice(null);
                        setEditAndResendMode(false);
                        form.reset();
                      }}>
                        Cancel
                      </Button>
                      <Button type="submit" disabled={createInvoiceMutation.isPending}>
                        {createInvoiceMutation.isPending ? "Processing..." : 
                         editAndResendMode ? "Update & Send" :
                         editingInvoice ? "Update Invoice" : "Create Invoice"}
                      </Button>
                    </div>
                  </form>
                </Form>
              </DialogContent>
            </Dialog>
          </div>
        </div>

        {/* Filters and Search */}
        <div className="px-6 py-4 bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700">
          <div className="flex flex-col md:flex-row md:items-center md:justify-between space-y-4 md:space-y-0">
            <div className="flex flex-1 items-center space-x-4">
              <div className="relative flex-1 max-w-md">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
                <Input
                  placeholder="Search invoices..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="pl-10"
                />
              </div>
              <Select value={statusFilter} onValueChange={setStatusFilter}>
                <SelectTrigger className="w-48">
                  <SelectValue placeholder="Filter by status" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Status</SelectItem>
                  <SelectItem value="draft">Draft</SelectItem>
                  <SelectItem value="sent">Sent</SelectItem>
                  <SelectItem value="paid">Paid</SelectItem>
                  <SelectItem value="overdue">Overdue</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
        </div>

        {/* Bulk Actions */}
        {selectedInvoices.length > 0 && (
          <div className="px-6 py-3 bg-blue-50 dark:bg-blue-900/20 border-b border-blue-200 dark:border-blue-800">
            <div className="flex items-center justify-between">
              <span className="text-sm text-blue-700 dark:text-blue-300">
                {selectedInvoices.length} invoice(s) selected
              </span>
              <div className="flex space-x-2">
                <Button
                  size="sm"
                  variant="outline"
                  onClick={handleBulkDelete}
                  disabled={bulkActionLoading}
                  className="text-red-600 hover:text-red-700"
                >
                  <Trash2 className="w-4 h-4 mr-1" />
                  Delete Selected
                </Button>
              </div>
            </div>
          </div>
        )}

        {/* Invoices List */}
        <div className="px-6 py-6 space-y-4">
          {filteredInvoices.length === 0 ? (
            <Card>
              <CardContent className="p-12 text-center">
                <FileText className="w-16 h-16 text-gray-300 mx-auto mb-4" />
                <p className="text-gray-500 text-lg">No invoices found</p>
                <p className="text-gray-400">Create your first invoice to get started</p>
                <Button className="mt-4 bg-purple-600 hover:bg-purple-700" onClick={() => setIsDialogOpen(true)}>
                  <Plus className="w-4 h-4 mr-2" />
                  Create Invoice
                </Button>
              </CardContent>
            </Card>
          ) : (
            <>
              {/* Select All Checkbox */}
              <div className="flex items-center space-x-2 mb-4">
                <input
                  type="checkbox"
                  checked={selectedInvoices.length === filteredInvoices.length}
                  onChange={(e) => handleSelectAll(e.target.checked)}
                  className="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500"
                />
                <label className="text-sm text-gray-700 dark:text-gray-300">
                  Select All ({filteredInvoices.length})
                </label>
              </div>

              {/* Invoice Cards with Improved Layout */}
              {filteredInvoices.map((invoice: Invoice) => {
                const isSelected = selectedInvoices.includes(invoice.id);
                return (
                  <Card key={invoice.id} className={`hover:shadow-md transition-shadow ${isSelected ? 'ring-2 ring-blue-500 bg-blue-50 dark:bg-blue-900/20' : ''}`}>
                    <CardContent className="p-6">
                      <div className="space-y-4">
                        {/* Header with title, status, and checkbox */}
                        <div className="flex items-center gap-3">
                          <input
                            type="checkbox"
                            checked={isSelected}
                            onChange={(e) => handleSelectInvoice(invoice.id, e.target.checked)}
                            className="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500"
                          />
                          <h3 className="font-semibold text-lg text-gray-900 dark:text-gray-100">
                            Invoice #{invoice.invoiceNumber}
                          </h3>
                          <Badge className={getStatusColor(invoice.status)}>
                            {invoice.status}
                          </Badge>
                        </div>

                        {/* Desktop Layout */}
                        <div className="hidden lg:block">
                          <div className="grid grid-cols-12 gap-4 items-center">
                            {/* Invoice details - fixed columns */}
                            <div className="col-span-8">
                              <div className="grid grid-cols-4 gap-4 text-sm">
                                <div className="min-w-0">
                                  <span className="font-medium text-gray-600 dark:text-gray-400 block">Client:</span>
                                  <p className="text-gray-900 dark:text-gray-100 truncate" title={invoice.clientName}>
                                    {invoice.clientName}
                                  </p>
                                </div>
                                <div className="min-w-0">
                                  <span className="font-medium text-gray-600 dark:text-gray-400 block">Amount:</span>
                                  <p className="text-gray-900 dark:text-gray-100 font-semibold">
                                    £{Number(invoice.amount).toLocaleString()}
                                  </p>
                                </div>
                                <div className="min-w-0">
                                  <span className="font-medium text-gray-600 dark:text-gray-400 block">Due:</span>
                                  <p className="text-gray-900 dark:text-gray-100">
                                    {formatDate(invoice.dueDate)}
                                  </p>
                                </div>
                                <div className="min-w-0">
                                  <span className="font-medium text-gray-600 dark:text-gray-400 block">Created:</span>
                                  <p className="text-gray-900 dark:text-gray-100">
                                    {formatDate(invoice.createdAt)}
                                  </p>
                                </div>
                              </div>
                            </div>

                            {/* Action buttons - fixed column */}
                            <div className="col-span-4">
                              <div className="flex items-center justify-end gap-2 flex-wrap">
                                {/* View button - available for all statuses */}
                                <Button 
                                  size="sm" 
                                  className="text-xs whitespace-nowrap bg-green-600 hover:bg-green-700 text-white min-w-[70px]"
                                  onClick={() => handleViewInvoice(invoice)}
                                >
                                  <Eye className="w-3 h-3 mr-1" />
                                  View
                                </Button>

                                {invoice.status === "draft" && (
                                  <>
                                    <Button 
                                      size="sm" 
                                      variant="outline" 
                                      className="text-xs whitespace-nowrap min-w-[70px]"
                                      onClick={() => handleEditInvoice(invoice)}
                                    >
                                      <Edit className="w-3 h-3 mr-1" />
                                      Edit
                                    </Button>
                                    <Button 
                                      size="sm" 
                                      className="text-xs whitespace-nowrap bg-blue-600 hover:bg-blue-700 text-white min-w-[70px]"
                                      onClick={() => sendInvoiceEmail(invoice)}
                                      disabled={!invoice.clientEmail || sendInvoiceMutation.isPending}
                                    >
                                      <Send className="w-3 h-3 mr-1" />
                                      Send
                                    </Button>
                                  </>
                                )}

                                {(invoice.status === "sent" || invoice.status === "overdue") && (
                                  <>
                                    <Button 
                                      size="sm" 
                                      className="text-xs whitespace-nowrap bg-green-600 hover:bg-green-700 text-white min-w-[90px]"
                                      onClick={() => markAsPaidMutation.mutate(invoice.id)}
                                      disabled={markAsPaidMutation.isPending}
                                    >
                                      <CheckCircle className="w-3 h-3 mr-1" />
                                      Mark Paid
                                    </Button>
                                    <Button 
                                      size="sm" 
                                      className="text-xs whitespace-nowrap bg-blue-600 hover:bg-blue-700 text-white min-w-[70px]"
                                      onClick={() => sendReminderMutation.mutate(invoice)}
                                      disabled={!invoice.clientEmail || sendReminderMutation.isPending}
                                    >
                                      <RefreshCw className="w-3 h-3 mr-1" />
                                      Resend
                                    </Button>
                                    <Button 
                                      size="sm" 
                                      variant="outline" 
                                      className="text-xs whitespace-nowrap min-w-[110px]"
                                      onClick={() => handleEditAndResend(invoice)}
                                    >
                                      <Edit className="w-3 h-3 mr-1" />
                                      Edit & Resend
                                    </Button>
                                  </>
                                )}

                                {invoice.status === "overdue" && (
                                  <Button 
                                    size="sm" 
                                    className="text-xs whitespace-nowrap bg-red-600 hover:bg-red-700 text-white min-w-[120px]"
                                    onClick={() => sendReminderMutation.mutate(invoice)}
                                    disabled={!invoice.clientEmail || sendReminderMutation.isPending}
                                  >
                                    <AlertTriangle className="w-3 h-3 mr-1" />
                                    Overdue Notice
                                  </Button>
                                )}

                                {/* Download button for all statuses */}
                                <Button 
                                  size="sm" 
                                  variant="outline" 
                                  className="text-xs whitespace-nowrap min-w-[90px]"
                                  onClick={() => window.open(`/api/invoices/${invoice.id}/pdf`, '_blank')}
                                >
                                  <Download className="w-3 h-3 mr-1" />
                                  Download
                                </Button>
                              </div>
                            </div>
                          </div>
                        </div>

                        {/* Mobile Layout */}
                        <div className="lg:hidden">
                          <div className="space-y-3">
                            {/* Data in 2x2 grid */}
                            <div className="grid grid-cols-2 gap-4 text-sm">
                              <div>
                                <span className="font-medium text-gray-600 dark:text-gray-400 block">Client:</span>
                                <p className="text-gray-900 dark:text-gray-100 truncate" title={invoice.clientName}>
                                  {invoice.clientName}
                                </p>
                              </div>
                              <div>
                                <span className="font-medium text-gray-600 dark:text-gray-400 block">Amount:</span>
                                <p className="text-gray-900 dark:text-gray-100 font-semibold">
                                  £{Number(invoice.amount).toLocaleString()}
                                </p>
                              </div>
                              <div>
                                <span className="font-medium text-gray-600 dark:text-gray-400 block">Due:</span>
                                <p className="text-gray-900 dark:text-gray-100">
                                  {formatDate(invoice.dueDate)}
                                </p>
                              </div>
                              <div>
                                <span className="font-medium text-gray-600 dark:text-gray-400 block">Created:</span>
                                <p className="text-gray-900 dark:text-gray-100">
                                  {formatDate(invoice.createdAt)}
                                </p>
                              </div>
                            </div>

                            {/* Buttons flow below on mobile */}
                            <div className="flex items-center gap-2 flex-wrap">
                              {/* View button - available for all statuses */}
                              <Button 
                                size="sm" 
                                className="text-xs bg-green-600 hover:bg-green-700 text-white"
                                onClick={() => handleViewInvoice(invoice)}
                              >
                                <Eye className="w-3 h-3 mr-1" />
                                View
                              </Button>

                              {invoice.status === "draft" && (
                                <>
                                  <Button 
                                    size="sm" 
                                    variant="outline" 
                                    className="text-xs"
                                    onClick={() => handleEditInvoice(invoice)}
                                  >
                                    <Edit className="w-3 h-3 mr-1" />
                                    Edit
                                  </Button>
                                  <Button 
                                    size="sm" 
                                    className="text-xs bg-blue-600 hover:bg-blue-700 text-white"
                                    onClick={() => sendInvoiceEmail(invoice)}
                                    disabled={!invoice.clientEmail || sendInvoiceMutation.isPending}
                                  >
                                    <Send className="w-3 h-3 mr-1" />
                                    Send
                                  </Button>
                                </>
                              )}

                              {(invoice.status === "sent" || invoice.status === "overdue") && (
                                <>
                                  <Button 
                                    size="sm" 
                                    className="text-xs bg-green-600 hover:bg-green-700 text-white"
                                    onClick={() => markAsPaidMutation.mutate(invoice.id)}
                                    disabled={markAsPaidMutation.isPending}
                                  >
                                    <CheckCircle className="w-3 h-3 mr-1" />
                                    Mark Paid
                                  </Button>
                                  <Button 
                                    size="sm" 
                                    className="text-xs bg-blue-600 hover:bg-blue-700 text-white"
                                    onClick={() => sendReminderMutation.mutate(invoice)}
                                    disabled={!invoice.clientEmail || sendReminderMutation.isPending}
                                  >
                                    <RefreshCw className="w-3 h-3 mr-1" />
                                    Resend
                                  </Button>
                                  <Button 
                                    size="sm" 
                                    variant="outline" 
                                    className="text-xs"
                                    onClick={() => handleEditAndResend(invoice)}
                                  >
                                    <Edit className="w-3 h-3 mr-1" />
                                    Edit & Resend
                                  </Button>
                                </>
                              )}

                              {invoice.status === "overdue" && (
                                <Button 
                                  size="sm" 
                                  className="text-xs bg-red-600 hover:bg-red-700 text-white"
                                  onClick={() => sendReminderMutation.mutate(invoice)}
                                  disabled={!invoice.clientEmail || sendReminderMutation.isPending}
                                >
                                  <AlertTriangle className="w-3 h-3 mr-1" />
                                  Overdue Notice
                                </Button>
                              )}

                              {/* Download button for all statuses */}
                              <Button 
                                size="sm" 
                                variant="outline" 
                                className="text-xs"
                                onClick={() => window.open(`/api/invoices/${invoice.id}/pdf`, '_blank')}
                              >
                                <Download className="w-3 h-3 mr-1" />
                                Download
                              </Button>
                            </div>
                          </div>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                );
              })}
            </>
          )}
        </div>
      </div>
    </div>
  );
}